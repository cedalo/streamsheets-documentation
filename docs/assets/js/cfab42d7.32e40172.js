"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[63419],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(a),d=o,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return a?n.createElement(h,l(l({ref:t},p),{},{components:a})):n.createElement(h,l({ref:t},p))}));function d(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<r;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},77585:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>k,contentTitle:()=>d,default:()=>f,frontMatter:()=>c,metadata:()=>h,toc:()=>g});var n=a(3905),o=Object.defineProperty,r=Object.defineProperties,l=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,p=(e,t,a)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,m=(e,t)=>{for(var a in t||(t={}))s.call(t,a)&&p(e,a,t[a]);if(i)for(var a of i(t))u.call(t,a)&&p(e,a,t[a]);return e};const c={id:"high-availability-autoscaling",title:"Kubernetes High Availability Autoscaling",sidebar_label:"High Availability Autoscaling"},d=void 0,h={unversionedId:"deployment/on-premises/deployment/installation/kubernetes/high-availability-autoscaling",id:"version-3.0/deployment/on-premises/deployment/installation/kubernetes/high-availability-autoscaling",title:"Kubernetes High Availability Autoscaling",description:"This setup will deploy HA Mosquitto broker and Platform with autoscaling feature on a managed kubernetes cluster like GKE (Google), EKS (Amazon) or Azure Kubernetes using Helm charts. This setup would deploy a 3 Mosquitto broker as a statefulsets. Also, a Platform pod and HA-proxy pods replica as a deployment entity as part of the default setup. This deployment by default uses a Persistent volumes for persistence. The setup uses HPA (Horizontal Pod autoscaler) to scale the kubernetes pods according to the manage the load of incoming request. This setup works best with Dynsec  cluster sync mode as in case of normal HA cluster, all the request is routed to the leader and follower mosquitto pods acts the backup. Therefore, no clear leverage of using Kubernetes autoscaling feature.",source:"@site/mosquitto_versioned_docs/version-3.0/deployment/on-premises/deployment/installation/kubernetes/high-availability-autoscaling.md",sourceDirName:"deployment/on-premises/deployment/installation/kubernetes",slug:"/deployment/on-premises/deployment/installation/kubernetes/high-availability-autoscaling",permalink:"/mosquitto/3.0/deployment/on-premises/deployment/installation/kubernetes/high-availability-autoscaling",draft:!1,tags:[],version:"3.0",frontMatter:{id:"high-availability-autoscaling",title:"Kubernetes High Availability Autoscaling",sidebar_label:"High Availability Autoscaling"},sidebar:"someSidebar",previous:{title:"High Availability",permalink:"/mosquitto/3.0/deployment/on-premises/deployment/installation/kubernetes/high-availability"},next:{title:"Introduction",permalink:"/mosquitto/3.0/deployment/on-premises/deployment/installation/openshift/introduction-openshift"}},k={},g=[{value:"Why Auto-scaling ?",id:"why-auto-scaling-",level:3},{value:"How does Auto-scaling works?",id:"how-does-auto-scaling-works",level:3},{value:"Kubernetes Cluster Setup",id:"kubernetes-cluster-setup",level:2},{value:"Dependencies and Prerequisites",id:"dependencies-and-prerequisites",level:3},{value:"Installation",id:"installation",level:2},{value:"Installation using Helm Charts:",id:"installation-using-helm-charts",level:3},{value:"Connect to cluster",id:"connect-to-cluster",level:2}],y={toc:g};function f(e){var t,a=e,{components:o}=a,p=((e,t)=>{var a={};for(var n in e)s.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&i)for(var n of i(e))t.indexOf(n)<0&&u.call(e,n)&&(a[n]=e[n]);return a})(a,["components"]);return(0,n.kt)("wrapper",(t=m(m({},y),p),r(t,l({components:o,mdxType:"MDXLayout"}))),(0,n.kt)("p",null,"This setup will deploy HA Mosquitto broker and Platform with autoscaling feature on a managed kubernetes cluster like GKE (Google), EKS (Amazon) or Azure Kubernetes using Helm charts. This setup would deploy a 3 Mosquitto broker as a statefulsets. Also, a Platform pod and HA-proxy pods replica as a deployment entity as part of the default setup. This deployment by default uses a Persistent volumes for persistence. The setup uses HPA (Horizontal Pod autoscaler) to scale the kubernetes pods according to the manage the load of incoming request. This setup works best with ",(0,n.kt)("inlineCode",{parentName:"p"},"Dynsec"),"  cluster sync mode as in case of normal HA cluster, all the request is routed to the leader and follower mosquitto pods acts the backup. Therefore, no clear leverage of using Kubernetes autoscaling feature. "),(0,n.kt)("h3",m({},{id:"why-auto-scaling-"}),"Why Auto-scaling ?"),(0,n.kt)("p",null,"When we deploy the Kubernetes setup using the above procedure, by default we start with 3 Mosquitto Pods and 1 Platform pods. However, we might run into problems if we have a lot of incoming requests and connections causing overload at Mosquitto brokers, especially in DynSec mode. We would want the setup to adjust based on the load to avoid crashes and maintain system requirements and at the same time avoid any need of human monitoring and intervention."),(0,n.kt)("h3",m({},{id:"how-does-auto-scaling-works"}),"How does Auto-scaling works?"),(0,n.kt)("p",null,"On deploying the above setup we also deploy certain other helper pods that takes care of Auto-scaling. For eg:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Metrics Server:")," This server pod monitors metrics of the deployed applications pods. Metrics could be CPU, Memory etc."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Horizontal Pod Scaler (HPA):")," HPA automatically scales up or down the pods based on the threshold. For eg: If the CPU threshold is set to 60%, and of overall CPU consumption across all pods reaches 60%, HPA scales up the Mosquitto pods."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Cluster-operator:")," This pod keeps tracks of pod scaling and triggers the requests to MQTT APIs so that newly scaled pods gets added to internal cluster of Mosquitto brokers. For eg If the current number of Mosquitto brokers are 3 and it scales to 5, then cluster-operator would send a ",(0,n.kt)("inlineCode",{parentName:"li"},"addNode")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"joinCluster"),"  request for 2 added nodes. If pod is to be scaled down, then the cluster-operator would send ",(0,n.kt)("inlineCode",{parentName:"li"},"removeNode")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"leaveCluster")," MQTT API requests.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Recommended Setup")),(0,n.kt)("p",null,"We would recommend to use Dynsec cluster with this setup as using HA cluster with autoscaling do not add much value. Make sure you understand the functioning of Dynsec cluster and its limitation before proceeding. "),(0,n.kt)("h2",m({},{id:"kubernetes-cluster-setup"}),"Kubernetes Cluster Setup"),(0,n.kt)("h3",m({},{id:"dependencies-and-prerequisites"}),"Dependencies and Prerequisites"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Running managed kubernetes setup (GKE, EKS, AKS etc). Follow documentation guide for the respective kubernetes cluster to create a cluster on your chosen cloud provider."),(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Create a namespace")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Once you are connected to your Kubernetes setup and can access the cluster using ",(0,n.kt)("inlineCode",{parentName:"li"},"kubectl")," tool. Create a namespace in which you would want to deploy the application. The deployment folder is pre-configured for the namespace named ",(0,n.kt)("inlineCode",{parentName:"li"},"ha"),". If you want to use the default configuration you can create a namespace named ",(0,n.kt)("inlineCode",{parentName:"li"},"ha")," using the below command:"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"kubectl create namespace ha")),(0,n.kt)("li",{parentName:"ul"},"If you want to use a different namespace, use the command: ",(0,n.kt)("inlineCode",{parentName:"li"},"kubectl create namespace <your-custom-namespace>"),".  Replace ",(0,n.kt)("inlineCode",{parentName:"li"},"<your-custom-namespace>")," with the name of the namespace you want to configure.")))),(0,n.kt)("h2",m({},{id:"installation"}),"Installation"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Prerequisites"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Kubernetes Cluster should be up and running. If you are yet to setup the cluster, refer ",(0,n.kt)("a",m({parentName:"li"},{href:"#kubernetes-cluster-setup"}),"Kubernetes Cluster Setup"),"."),(0,n.kt)("li",{parentName:"ul"},"You must have already created the namespace.")),(0,n.kt)("h3",m({},{id:"installation-using-helm-charts"}),"Installation using Helm Charts:"),(0,n.kt)("p",null,"Helm charts offer a comprehensive solution for configuring various Kubernetes resources\u2014including stateful sets, deployment templates, services, and service accounts\u2014through a single command, streamlining the deployment process.When the user downloads helm package from the Platform license key is already part of the package."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Get the helm chart")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Make sure you have the helm chart  ",(0,n.kt)("inlineCode",{parentName:"li"},"mosquitto-3.0-platform-3.0-kubernetes-cluster-autoscaling.tgz")," downloaded from the platfom portal."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Install Helm Chart:")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Use the following ",(0,n.kt)("inlineCode",{parentName:"p"},"helm install")," command to deploy the Mosquitto application on to your Kubernetes cluster. Replace ",(0,n.kt)("inlineCode",{parentName:"p"},"<release-name>")," with the desired name for your Helm release and ",(0,n.kt)("inlineCode",{parentName:"p"},"<namespace>")," with your chosen Kubernetes namespace:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-bash"}),"helm install <release-name>  mosquitto-3.0-platform-3.0-kubernetes-cluster-autoscaling.tgz  -n <namespace> --set clusterSyncMode=dynsec --set imageCredentials.registry=registry.cedalo.com  --set imageCredentials.username=<username> --set imageCredentials.password=<password> --set imageCredentials.email=<email> \n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"namespace"),": Set it to the namespace of your deployment.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"imageCredentials.username"),": Your docker username provided by Cedalo team.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"imageCredentials.password"),": Your docker password provided by Cedalo team.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"imageCredentials.email"),": Registered e-mail for accessing docker registry.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Note"),": By default the HPA threshold is set to 60 . That mean Horizontal Pod Scaler will scale the pods if overall CPU consumption passes the 60% threshold. To set a new thresold, you can change pass ",(0,n.kt)("inlineCode",{parentName:"p"},"--set hpa_threshold=<new_hpa_threshold>")," along with helm installation command.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Note"),": By default the max pod number is set to 5. That means tha HPA can only scale the max replica pods to 5. If you want set a new higher number, you can pass",(0,n.kt)("inlineCode",{parentName:"p"},"--set max_replica=<your-max-replica-count>")," by passing it along with helm installation command. ")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Sample example: If  your arbitrary release name is ",(0,n.kt)("inlineCode",{parentName:"p"},"sample-release-name"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"username"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"password")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"email")," be ",(0,n.kt)("inlineCode",{parentName:"p"},"demo-username"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"demo-password")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"demo@gmail.com"),",your new hpa threshold is 80 , max replica changed to 6 `then your helm installation command should be:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-bash"}),"   helm install sample-release-name  mosquitto-3.0-platform-3.0-kubernetes-cluster-autoscaling.tgz  -n ha --set clusterSyncMode=dynsec --set hpa_threshold=80  --set max_replica=6 --set imageCredentials.registry=registry.cedalo.com --set imageCredentials.username=demo-username --set imageCredentials.password=demo-password --set imageCredentials.email=demo@gmail.com \n"))))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"You can monitor the running pods using the ",(0,n.kt)("inlineCode",{parentName:"p"},"kubectl get pods -o wide -n <namespace>")," command. To observe the service endpoints ports use ",(0,n.kt)("inlineCode",{parentName:"p"},"kubectl get svc -n <namespace>"),".")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"To uninstall the setup:\n",(0,n.kt)("inlineCode",{parentName:"p"},"helm uninstall <release-name> -n <namespace>")))),(0,n.kt)("p",null,"Your Mosquitto setup is now running  with three single mosquitto nodes in a HA cluster along with a Platform portal."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Further Useful Commands")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"If you want to change mosquitto.conf, you can do so by uncompressing the helm chart, making the required changes and packaging the helm charts again. The detailed procedure is mentioned below:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"tar -xzvf mosquitto-3.0-platform-3.0-kubernetes-cluster-autoscaling.tgz"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"cd mosquitto-3.0-platform-3.0-kubernetes-cluster-autoscaling/files/")),(0,n.kt)("li",{parentName:"ul"},"Make changes to ",(0,n.kt)("inlineCode",{parentName:"li"},"mosquitto.conf")," and save it."),(0,n.kt)("li",{parentName:"ul"},"Go back to the parent directory:\n",(0,n.kt)("inlineCode",{parentName:"li"},"cd ../")),(0,n.kt)("li",{parentName:"ul"},"Package the helm chart to its original form using:\n",(0,n.kt)("inlineCode",{parentName:"li"},"helm package mosquitto-3.0-platform-3.0-kubernetes-cluster-autoscaling")),(0,n.kt)("li",{parentName:"ul"},"Uninstall helm package\n",(0,n.kt)("inlineCode",{parentName:"li"},"helm uninstall <release-name> -n <namespace>")))),(0,n.kt)("li",{parentName:"ul"},"Reinstall the helm package using the same ",(0,n.kt)("inlineCode",{parentName:"li"},"helm install")," command you used the first time or do a ",(0,n.kt)("inlineCode",{parentName:"li"},"helm upgrade"),"."))),(0,n.kt)("li",{parentName:"ul"},"You can similarly change any other configuration like ",(0,n.kt)("inlineCode",{parentName:"li"},"sql-bridge")," configuration, repackage the helm chart and install to bring changes into effect.")),(0,n.kt)("h2",m({},{id:"connect-to-cluster"}),"Connect to cluster"),(0,n.kt)("p",null,"Once your setup is ready, you can access the mosquitto brokers using the external ip of the haproxy service deployed to connect to the cluster from the outside world.\nGo to the ",(0,n.kt)("inlineCode",{parentName:"p"},"Client Account"),' menu and create a new client to connect from. Make sure to assign a role, like the default "client" role, to allow your client to publish and/or subscribe to topics.\nNow you can connect to the Mosquitto cluster. You can access it either with connecting it directly to worker node running the haproxy pod along with a service exposed at port 1883:'),(0,n.kt)("p",null,"To get the external ip of HAproxy service:\n",(0,n.kt)("inlineCode",{parentName:"p"},"kubectl get service mosquitto-loadbalancer -n <namespace>")),(0,n.kt)("p",null,"In this example command we use Mosquitto Sub to subscribe onto all topics:\n",(0,n.kt)("inlineCode",{parentName:"p"},"mosquitto_sub -h <external-ip-of-mosquitto-loadbalancer> -p 1883 -u <username> -P <password> -t '#'")),(0,n.kt)("p",null,"Make sure to replace your IP, username and password."))}f.isMDXComponent=!0}}]);