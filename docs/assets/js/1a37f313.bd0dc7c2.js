"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[35286],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>d});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,g=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(g,i(i({ref:n},l),{},{components:t})):r.createElement(g,i({ref:n},l))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},75200:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>f,contentTitle:()=>d,default:()=>v,frontMatter:()=>m,metadata:()=>g,toc:()=>y});var r=t(3905),a=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,l=(e,n,t)=>n in e?a(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,u=(e,n)=>{for(var t in n||(n={}))p.call(n,t)&&l(e,t,n[t]);if(s)for(var t of s(n))c.call(n,t)&&l(e,t,n[t]);return e};const m={},d=void 0,g={unversionedId:"bridges/influxdb-bridge-examples",id:"version-3.1/bridges/influxdb-bridge-examples",title:"influxdb-bridge-examples",description:"An example bridge configuration",source:"@site/mosquitto_versioned_docs/version-3.1/bridges/influxdb-bridge-examples.md",sourceDirName:"bridges",slug:"/bridges/influxdb-bridge-examples",permalink:"/mosquitto/bridges/influxdb-bridge-examples",draft:!1,tags:[],version:"3.1",frontMatter:{}},f={},y=[],b={toc:y};function v(e){var n,t=e,{components:a}=t,l=((e,n)=>{var t={};for(var r in e)p.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&s)for(var r of s(e))n.indexOf(r)<0&&c.call(e,r)&&(t[r]=e[r]);return t})(t,["components"]);return(0,r.kt)("wrapper",(n=u(u({},b),l),o(n,i({components:a,mdxType:"MDXLayout"}))),(0,r.kt)("p",null,"An example bridge configuration"),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-json"}),'{\n    "version": "1",\n    "connections": [\n        {\n            "name": "InfluxDB v1 Connection",\n            "connection": {\n                "driver": "influxdbv1",\n                "hostname": "influxdb-v1.example.com",\n                "port": 8086,\n                "database": "mqtt_data",\n                "credentials": {\n                    "username": "admin",\n                    "password": "password123"\n                }\n            },\n            "options": {\n                "bufferSize": 5000,\n                "timeoutMs": 3000,\n                "queueMaxSize": 10000,\n                "maxRetries": 15,\n                "retryDelayMs": 1000\n            },\n            "topicMappings": [\n                {\n                    "name": "topic-mapping-to-weather-measurement",\n                    "schemaMapping": "weather-schema-mapping",\n                    "target": "weather_data",\n                    "mqttTopics": [\n                        "sensors/weather/#"\n                    ]\n                }\n            ]\n        },\n        {\n            "name": "InfluxDB v2 Connection",\n            "connection": {\n                "driver": "influxdbv2",\n                "hostname": "influxdb-v2.example.com",\n                "port": 8086,\n                "database": "mqtt_metrics",\n                "organization": "my-org",\n                "credentials": {\n                    "token": "your-influxdb-v2-token"\n                },\n                "compression": {\n                    "enable": true\n                }\n            },\n            "options": {\n                "bufferSize": 1000,\n                "timeoutMs": 4000,\n                "queueMaxSize": 5000,\n                "maxRetries": 10,\n                "retryDelayMs": 2000\n            },\n            "topicMappings": [\n                {\n                    "name": "topic-mapping-to-system-measurement",\n                    "schemaMapping": "system-schema-mapping",\n                    "target": "system_metrics",\n                    "mqttTopics": [\n                        "system/metrics/#"\n                    ]\n                }\n            ]\n        }\n    ],\n    "schemaMappings": [\n        {\n            "name": "weather-schema-mapping",\n            "mapping": [\n                {\n                    "source": "[client_id]",\n                    "target": "device_id",\n                    "targetType": "tag"\n                },\n                {\n                    "source": "[payload][temperature]",\n                    "target": "temperature",\n                    "targetType": "field"\n                },\n                {\n                    "source": "[payload][humidity]",\n                    "target": "humidity",\n                    "targetType": "field"\n                },\n                {\n                    "source": "[payload][location]",\n                    "target": "location",\n                    "targetType": "tag"\n                },\n                {\n                    "source": "[timestamp]",\n                    "target": "recorded_at",\n                    "targetType": "field"\n                }\n            ]\n        },\n        {\n            "name": "system-schema-mapping",\n            "mapping": [\n                {\n                    "source": "[client_id]",\n                    "target": "host",\n                    "targetType": "tag"\n                },\n                {\n                    "source": "[payload][cpu]",\n                    "target": "cpu_usage",\n                    "targetType": "field"\n                },\n                {\n                    "source": "[payload][memory]",\n                    "target": "memory_usage",\n                    "targetType": "field"\n                },\n                {\n                    "source": "[payload][disk]",\n                    "target": "disk_usage",\n                    "targetType": "field"\n                },\n                {\n                    "source": "system",\n                    "target": "data_type",\n                    "targetType": "tag",\n                    "options": {\n                        "isConst": true\n                    }\n                }\n            ]\n        }\n    ]\n}\n')),(0,r.kt)("p",null,"An example bridge configuration connecting to both both Influxdb v1 and Invluxdb v2/v3"))}v.isMDXComponent=!0}}]);