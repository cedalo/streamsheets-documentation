"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[11890],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||r;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},37499:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>O,frontMatter:()=>m,metadata:()=>f,toc:()=>k});var a=n(3905),i=Object.defineProperty,r=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,u=(e,t,n)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,c=(e,t)=>{for(var n in t||(t={}))s.call(t,n)&&u(e,n,t[n]);if(l)for(var n of l(t))p.call(t,n)&&u(e,n,t[n]);return e};const m={id:"platform-oidc-auth",title:"OIDC Authentication/SSO",sidebar_label:"OIDC Authentication/SSO"},d=void 0,f={unversionedId:"security/platform-access/platform-oidc-auth",id:"version-3.0/security/platform-access/platform-oidc-auth",title:"OIDC Authentication/SSO",description:"This feature is only available in the enterprise version.",source:"@site/mosquitto_versioned_docs/version-3.0/security/platform-access/platform-oidc-auth.md",sourceDirName:"security/platform-access",slug:"/security/platform-access/platform-oidc-auth",permalink:"/mosquitto/3.0/security/platform-access/platform-oidc-auth",draft:!1,tags:[],version:"3.0",frontMatter:{id:"platform-oidc-auth",title:"OIDC Authentication/SSO",sidebar_label:"OIDC Authentication/SSO"},sidebar:"someSidebar",previous:{title:"LDAP Authentication/SSO",permalink:"/mosquitto/3.0/security/platform-access/platform-ldap-auth"},next:{title:"SAML Authentication/SSO",permalink:"/mosquitto/3.0/security/platform-access/platform-saml-auth"}},h={},k=[{value:"Open ID Connect SSO (Single Sign-On)",id:"open-id-connect-sso-single-sign-on",level:2},{value:"Terminology",id:"terminology",level:3},{value:"RP Callback Endpoints",id:"rp-callback-endpoints",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Limitations",id:"limitations",level:3}],y={toc:k};function O(e){var t,n=e,{components:i}=n,u=((e,t)=>{var n={};for(var a in e)s.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&l)for(var a of l(e))t.indexOf(a)<0&&p.call(e,a)&&(n[a]=e[a]);return n})(n,["components"]);return(0,a.kt)("wrapper",(t=c(c({},y),u),r(t,o({components:i,mdxType:"MDXLayout"}))),(0,a.kt)("admonition",c({},{type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"This feature is only available in the enterprise version.")),(0,a.kt)("h2",c({},{id:"open-id-connect-sso-single-sign-on"}),"Open ID Connect SSO (Single Sign-On)"),(0,a.kt)("p",null,"Open ID Connect- (OIDC-) based SSO feature enables support for any SSO provider that supports Open ID Connect protocol."),(0,a.kt)("p",null,"This feature can be configured by specifying several environment variables for Mosquitto MQTT Platform."),(0,a.kt)("h3",c({},{id:"terminology"}),"Terminology"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Single Sign On (SSO) - The process of using a single account to login across many applications")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Open ID Connect (OIDC) - an extension of OAuth 2.0 protocol which provides a JWT with user information. This allows it to implement authentication as opposed to the original OAuth 2.0 protocol designed for authorization.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Relying Party (RP) - Application that acts as a client in the SSO process and communicates with OpenID Provider to authenticate users. In simple terms, it is an application that users sign into using SSO.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"OpenID Provider (OP) - A centralized entity facilitating SSO process that users authenticate into. After successful authentication it securely communicates user identity data with RP, allowing users to access RP."))),(0,a.kt)("h3",c({},{id:"rp-callback-endpoints"}),"RP Callback Endpoints"),(0,a.kt)("p",null,"You will need to configure the Allowed Callback URL in your OpenID Provider. The URL for Mosquitto Platform is ",(0,a.kt)("inlineCode",{parentName:"p"},"<platform_host_url>/api/auth/callback/oidc"),"."),(0,a.kt)("p",null,"In case you need to redirect your identity provider to the application's error page, you may use ",(0,a.kt)("inlineCode",{parentName:"p"},"<platform_host_url>/auth/error"),". If you need to specify a particular error then: ",(0,a.kt)("inlineCode",{parentName:"p"},"<platform_host_url>/auth/error?error=someError"),". This is however a non-standard convenience redirect, so unlike ACS URL you won't need to worry about it for most OpenID Provider."),(0,a.kt)("h3",c({},{id:"configuration"}),"Configuration"),(0,a.kt)("p",null,"In order to enable the feature you have to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"It's recommended (but not required) to start with a clean Platform that doesn't have any users. You can delete ",(0,a.kt)("inlineCode",{parentName:"p"},"mosquitto-enterprise.sqlite3")," file to achieve this and restart the platform. The file is stored in the data directory which depends on your installation, but in Docker environments it's usually called ",(0,a.kt)("inlineCode",{parentName:"p"},"data"),", while for an RPM-package it's located under ",(0,a.kt)("inlineCode",{parentName:"p"},"var/opt/cedalo/mosquitto-platform"),". You can also manually delete your users as an administrator or by signing in one user at a time and navigating to ",(0,a.kt)("inlineCode",{parentName:"p"},"Settings")," -> ",(0,a.kt)("inlineCode",{parentName:"p"},"Delete account"),". A crucial point is to make sure you don't have any existing Platform users that use the same email as SSO users you want to add.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Add ",(0,a.kt)("inlineCode",{parentName:"p"},"oidc")," to the comma separated list of authentication providers specified in ",(0,a.kt)("inlineCode",{parentName:"p"},"AUTH_PROVIDERS")," environement variable.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Specify SSO email addresses that you want to register in Mosquitto Platform as a comma separated list in the ",(0,a.kt)("inlineCode",{parentName:"p"},"AUTH_CUSTOM_ALLOWED_SIGNUP_EMAILS")," environemnt varaible.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Specify ",(0,a.kt)("inlineCode",{parentName:"p"},"AUTH_CUSTOM_OIDC_ISSUER")," to set a URL of the OpenID Provider (OP).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Specify ",(0,a.kt)("inlineCode",{parentName:"p"},"AUTH_CUSTOM_OIDC_CLIENT_ID")," to set Platform's client ID from the OpenID Provider.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Either specify ",(0,a.kt)("inlineCode",{parentName:"p"},"AUTH_CUSTOM_OIDC_CLIENT_SECRET"),", which is Platform's client secret from the OpenID Provider or ",(0,a.kt)("inlineCode",{parentName:"p"},"AUTH_CUSTOM_OIDC_CLIENT_SECRET_FILE_PATH")," which is a full path to a file containing client secret.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Specify ",(0,a.kt)("inlineCode",{parentName:"p"},"AUTH_CUSTOM_OIDC_AUTHORIZATION_URL")," representing an authorization endpoint URL where users are redirected to login.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Specify ",(0,a.kt)("inlineCode",{parentName:"p"},"AUTH_CUSTOM_OIDC_TOKEN_URL")," representing a token endpoint URL where the code is exchanged for tokens.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Specify ",(0,a.kt)("inlineCode",{parentName:"p"},"AUTH_CUSTOM_OIDC_USERINFO_URL"),"representing a user info endpoint URL where user profile data is retrieved from. You can alternatively specify ",(0,a.kt)("inlineCode",{parentName:"p"},"AUTH_CUSTOM_OIDC_ID_TOKEN")," instead.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"You can optionaly specify ",(0,a.kt)("inlineCode",{parentName:"p"},"AUTH_CUSTOM_OIDC_ID_TOKEN")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"AUTH_CUSTOM_OIDC_USERINFO_URL")," to control whether to use ID tokens for extracting user information. If set to the value of 1, Platform gets user info from the ID token. If not set, Platform will use userinfo endpoint which has to be specified in this case.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Specify ",(0,a.kt)("inlineCode",{parentName:"p"},"AUTH_CUSTOM_OIDC_PROFILE_AUTOPARSE")," to automatically parse user information. You can alternatively manually specify at least email and id claims from the optional varaibles below.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"After specifying all the required environment variables, you can start Mosquitto Platform and open it in your browser. If you don't have any users you will be greeted with a Setup screen where you can choose SSO option to create an admin user and sign in. In case you already have users in the platform, you will have to login using an admin account.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'After you are signed in as an admin, you can click on the top-right menu and choose "Admin board".')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'Navigate to "User management" and create new users specifying ',(0,a.kt)("inlineCode",{parentName:"p"},"SSO")," as a user type.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'You can also choose to make some users admins in "Administrators" section on the left-hand side.')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"After users were created, they can be used to log in to the Platform by choosing the SSO option on the login page."))),(0,a.kt)("p",null,"There are also some optional environment variables such as:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AUTH_CUSTOM_OIDC_DISABLE_PKCE_CHECK")," - to specify whether to perform PKCE security check. If set to 1, Platform will only perform a state check. If not set, both PKCE and state checks will be peformed, which is a default."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AUTH_CUSTOM_NAME")," to display a different provider name on the SSO button on login and signup pages. Default name is ",(0,a.kt)("inlineCode",{parentName:"li"},"OIDC SSO"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AUTH_CUSTOM_LOGO_URL")," to set a default logo for the SSO button. Example: ",(0,a.kt)("inlineCode",{parentName:"li"},"https://my-org.org/media/logo.png"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AUTH_CUSTOM_OIDC_PROFILE_ID_CLAIM")," to specify a non-standard claim of the user object retreived from your OpenID Provider that stores user's unique id. By default (if autoparse is enabled) ",(0,a.kt)("inlineCode",{parentName:"li"},"sub")," is being used. If not found, ",(0,a.kt)("inlineCode",{parentName:"li"},"id")," claim is also tried."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AUTH_CUSTOM_PROFILE_EMAIL_CLAIM")," to specify a non-standard claim of the user object retreived from your OpenID Provider that stores user's email address. By default ",(0,a.kt)("inlineCode",{parentName:"li"},"email")," claim is used."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AUTH_CUSTOM_PROFILE_FIRSTNAME_CLAIM")," to specify a non-standard claim of the user object retreived from your OpenID Provider that stores user's first name. By default ",(0,a.kt)("inlineCode",{parentName:"li"},"given_name")," claim is used. Additionally ",(0,a.kt)("inlineCode",{parentName:"li"},"firstname")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"first_name")," are also tried."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AUTH_CUSTOM_PROFILE_LASTNAME_CLAIM")," to specify a non-standard claim of the user object retreived from your OpenID Provider that stores user's last name. By default ",(0,a.kt)("inlineCode",{parentName:"li"},"family_name")," claim is used. Additionally ",(0,a.kt)("inlineCode",{parentName:"li"},"lastname")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"last_name")," are also tried."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AUTH_CUSTOM_PROFILE_NAME_CLAIM")," to specify a non-standard claim of the user object retreived from your OpenID Provider that stores both first name and last name separated by a space. This variable needs to be specified together with ",(0,a.kt)("inlineCode",{parentName:"li"},"AUTH_CUSTOM_INFER_NAME"),". however variable doesn't need to be specified if there are separate claims for the first name and last name in your user object. By default ",(0,a.kt)("inlineCode",{parentName:"li"},"name")," claim is used."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AUTH_CUSTOM_PROFILE_IMAGE_CLAIM")," to specify a claim of the user object retreived from your OpenID Provider where user profile image is stored. By default ",(0,a.kt)("inlineCode",{parentName:"li"},"picture")," claim is used."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AUTH_CUSTOM_PROFILE_IMAGE_URL")," to set a default image for your users. Example: ",(0,a.kt)("inlineCode",{parentName:"li"},"https://my-org.org/media/profile)image.png"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AUTH_CUSTOM_INFER_NAME")," - whether to try to extract user's first name and last name from the name or email claims if they were not found. This extraction will try to remove everything after the ",(0,a.kt)("inlineCode",{parentName:"li"},"@")," symbol in the email or name fields and look for a seperator such as ",(0,a.kt)("inlineCode",{parentName:"li"},"."),", ",(0,a.kt)("inlineCode",{parentName:"li"},"-"),", ",(0,a.kt)("inlineCode",{parentName:"li"}," "),", or ",(0,a.kt)("inlineCode",{parentName:"li"},"_"),". If a separator is found, the first part of the string before it becomes user's first name and second part - their last name. You can set this varaible to 1 to enbale the inference. If this variable is not set or first and last name could not be extracted, you will be able to set manually them in user's account settings after login.")),(0,a.kt)("p",null,"To debug SSO flow:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set ",(0,a.kt)("inlineCode",{parentName:"li"},"AUTH_CUSTOM_DEBUG")," environement variable to ",(0,a.kt)("inlineCode",{parentName:"li"},"1"))),(0,a.kt)("h3",c({},{id:"limitations"}),"Limitations"),(0,a.kt)("p",null,"Only single sign on is supported. There is currently no single log out functionality.\nAccess tokens generated by OIDC are only used one time by the Platform to create an internal session which is managed separately thereafter. This means that expiration date of the access token will not be utilized after the first use. The same is true for any refresh token (if any) which was provided together with access token. Refresh tokens are not used by the Platform."),(0,a.kt)("p",null,"Additional consequence is that after logging out from the Platform, OP session stays active. After clicking log in button again this session gets immediately picked up and user is signed back in without having to enter their credentials. This is a problem when user's intention was to log back in as a different OIDC account. To metigate this it is currently required to manually clear OP's cookies."),(0,a.kt)("p",null,"The single log out limitation also means that RP-initiated logout process is irrelevant to the Platform as it doesn't rely on refresh tokens to keep the user signed in. While a so-called back-channel logout which represents an OP-initiated logout could work, it is not supported, as it is not a part of the official OpenID specification but is instead detailed in the OpenID implementer's draft."))}O.isMDXComponent=!0}}]);