"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[94401],{3905:(e,t,s)=>{s.d(t,{Zo:()=>u,kt:()=>p});var n=s(67294);function i(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function a(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,n)}return s}function o(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?a(Object(s),!0).forEach((function(t){i(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):a(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function r(e,t){if(null==e)return{};var s,n,i=function(e,t){if(null==e)return{};var s,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)s=a[n],t.indexOf(s)>=0||(i[s]=e[s]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)s=a[n],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(i[s]=e[s])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),s=t;return e&&(s="function"==typeof e?e(t):o(o({},t),e)),s},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var s=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=c(s),p=i,b=d["".concat(l,".").concat(p)]||d[p]||h[p]||a;return s?n.createElement(b,o(o({ref:t},u),{},{components:s})):n.createElement(b,o({ref:t},u))}));function p(e,t){var s=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=s.length,o=new Array(a);o[0]=d;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,o[1]=r;for(var c=2;c<a;c++)o[c]=s[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,s)}d.displayName="MDXCreateElement"},91223:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>g,frontMatter:()=>d,metadata:()=>b,toc:()=>v});var n=s(3905),i=Object.defineProperty,a=Object.defineProperties,o=Object.getOwnPropertyDescriptors,r=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,u=(e,t,s)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s,h=(e,t)=>{for(var s in t||(t={}))l.call(t,s)&&u(e,s,t[s]);if(r)for(var s of r(t))c.call(t,s)&&u(e,s,t[s]);return e};const d={id:"glossary",title:"Glossary",sidebar_label:"Glossary"},p=void 0,b={unversionedId:"glossary",id:"version-3.0/glossary",title:"Glossary",description:"Below a list of often used terms, when working with MQTT architectures.",source:"@site/mosquitto_versioned_docs/version-3.0/glossary.md",sourceDirName:".",slug:"/glossary",permalink:"/mosquitto/glossary",draft:!1,tags:[],version:"3.0",frontMatter:{id:"glossary",title:"Glossary",sidebar_label:"Glossary"},sidebar:"someSidebar",previous:{title:"Migration Information",permalink:"/mosquitto/migration"}},m={},v=[{value:"Broker",id:"broker",level:2},{value:"Clean Session",id:"clean-session",level:2},{value:"Clean Start",id:"clean-start",level:2},{value:"Client",id:"client",level:2},{value:"Client ID",id:"client-id",level:2},{value:"Cluster",id:"cluster",level:2},{value:"Dynamic Security",id:"dynamic-security",level:2},{value:"Keep Alive",id:"keep-alive",level:2},{value:"Last Will",id:"last-will",level:2},{value:"Message / Packet",id:"message--packet",level:2},{value:"MQTT",id:"mqtt",level:2},{value:"Payload",id:"payload",level:2},{value:"Persistent Session",id:"persistent-session",level:2},{value:"Publisher",id:"publisher",level:2},{value:"Publish / Subscribe",id:"publish--subscribe",level:2},{value:"Quality of Service (QoS)",id:"quality-of-service-qos",level:2},{value:"QoS 0",id:"qos-0",level:3},{value:"QoS 1",id:"qos-1",level:3},{value:"QoS 2",id:"qos-2",level:3},{value:"Queue",id:"queue",level:2},{value:"Retained Message",id:"retained-message",level:2},{value:"Session",id:"session",level:2},{value:"Session Expiry Interval",id:"session-expiry-interval",level:2},{value:"Subscription",id:"subscription",level:2},{value:"Subscriber",id:"subscriber",level:2},{value:"TLS",id:"tls",level:2},{value:"Topic",id:"topic",level:2}],f={toc:v};function g(e){var t,s=e,{components:i}=s,u=((e,t)=>{var s={};for(var n in e)l.call(e,n)&&t.indexOf(n)<0&&(s[n]=e[n]);if(null!=e&&r)for(var n of r(e))t.indexOf(n)<0&&c.call(e,n)&&(s[n]=e[n]);return s})(s,["components"]);return(0,n.kt)("wrapper",(t=h(h({},f),u),a(t,o({components:i,mdxType:"MDXLayout"}))),(0,n.kt)("p",null,"Below a list of often used terms, when working with MQTT architectures."),(0,n.kt)("h2",h({},{id:"broker"}),"Broker"),(0,n.kt)("p",null,"The Broker is the server that communicates with all clients to manage the message or\npacket transfer using the MQTT Protocol. The broker receives all messages published from connected clients\nand coordinates the message transfer to subscribing clients based on topics. The broker also ensures security issues.\nMessages are to some extent cached on the broker to be resent, if a connection is temporarily lost or a message\ndid not reach the client (depending on QoS)"),(0,n.kt)("h2",h({},{id:"clean-session"}),"Clean Session"),(0,n.kt)("p",null,"If the cleanSession is set true ( = true), the client does not want to store messages.\nAlso, if set true, previous persistent sessions are dismissed."),(0,n.kt)("h2",h({},{id:"clean-start"}),"Clean Start"),(0,n.kt)("p",null,"When connecting to a broker, the client defines how a broker resumes a previous session. If the clean start flag is set to\n1, the broker starts a new session. If it is set to 0the server resumes communication with the client based\non the state of the current session (the session is identified by the clientId). "),(0,n.kt)("h2",h({},{id:"client"}),"Client"),(0,n.kt)("p",null,"A client can be any device that can run a MQTT library and is able to connect to a broker. Clients communicate with the\nbroker via topics. A client can publish a message and/or subscribe to messages. These message are categorized by topics. "),(0,n.kt)("h2",h({},{id:"client-id"}),"Client ID"),(0,n.kt)("p",null,"The clientId identifies any MQTT client that is connecting to an MQTT broker. The clientId can come from the client,\nbut it does not always have to.\nIf permitted, a clientId can be blank. Whenever the client does not set a clientId, the broker sets one on behalf of the\nclient."),(0,n.kt)("h2",h({},{id:"cluster"}),"Cluster"),(0,n.kt)("p",null,"A cluster provides the ability to run a cluster of broker nodes with a single leader and\nmultiple followers, so that broker availability can be ensured even if a single node becomes unavailable through fault\nor for an upgrade. This document describes the recommended cluster architecture and how to configure the cluster for\nfirst use, and in the future."),(0,n.kt)("p",null,"The Mosquitto cluster comprises at least three nodes. A single node is available for use by MQTT clients at once, the\nother nodes operate as fail-over nodes. The cluster expects a minimum of two nodes to be available at once, to provide a\nleader and a fallback node. If the state of the cluster fails so that only a single node is available, clients will be\nunable to connect until the cluster is in a stable state again."),(0,n.kt)("h2",h({},{id:"dynamic-security"}),"Dynamic Security"),(0,n.kt)("p",null,"The Dynamic Security plugin for Eclipse Mosquitto provides role based\nauthentication and access control features that can updated while the broker\nis running, using a special topic based API."),(0,n.kt)("p",null,"It is supported since Eclipse Mosquitto 2.0, and should be available in all\ninstallations, but will not be activated by default."),(0,n.kt)("h2",h({},{id:"keep-alive"}),"Keep Alive"),(0,n.kt)("p",null,"The MQTT keepAlive parameter identifies the maximum interval in seconds\nwhen a client maintains the MQTT connection but without communication (sending an MQTT packet). After the specified\nkeepAlive parameter period is over, a client sends a PING request (PINGREQ), and a broker has to respond with a PING\nResponse (PINGRESP). If no response follows the PING request, the client can assume the connection has disconnected.\nAlso, the broker is waiting for the PING request. The broker must expect a PINGREQ and wait for another half of the set\nin the keepAlive parameter time, but then disconnect the connection for good."),(0,n.kt)("h2",h({},{id:"last-will"}),"Last Will"),(0,n.kt)("p",null,"The lastWill message is sent by the broker on behalf of the client when a disconnect occurs without a DISCONNECT packet\nbefore the actual break-off."),(0,n.kt)("h2",h({},{id:"message--packet"}),"Message / Packet"),(0,n.kt)("p",null,'There is no definition of when a delivery is called a packet or message. Cedalo is using the term "packet" for any of\nthe commands, and "message" for publishing or subscribing messages. All packets must pass the broker.'),(0,n.kt)("p",null,"The actual content of a message is the content of a payload. MQTT is not limited by its payload format. It delivers what\nthe publisher is sending. This could be a value, string, JSON file, or even content of a jpg or an mp3 file. Up to\n256MB. The payload does not encrypt the content. The broker simply delivers what the publisher inserts into the payload."),(0,n.kt)("h2",h({},{id:"mqtt"}),"MQTT"),(0,n.kt)("p",null,"MQTT (originally \u201cMQ Telemetry Transport\u201d) is a lightweight publish/subscribe messaging protocol.\nIt is designed for connecting remote devices with a small footprint and minimal network bandwidth."),(0,n.kt)("p",null,"There are two major specification versions. Click on a specification to get more information:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",h({parentName:"li"},{href:"http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html"}),"MQTT v.3.1.1")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",h({parentName:"li"},{href:"https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html"}),"MQTT v.5.0"))),(0,n.kt)("h2",h({},{id:"payload"}),"Payload"),(0,n.kt)("p",null,"Payload is the actual content of a message. MQTT is not limited by its payload format. It delivers what the publisher is\nsending."),(0,n.kt)("h2",h({},{id:"persistent-session"}),"Persistent Session"),(0,n.kt)("p",null,"The Persistent session is active when the cleanSession flag is set to false. An active MQTT persistent session\nis relevant whenever the client disconnects ungracefully. All information that\nthe client did not receive from the broker since the last active connection will be preserved on the broker and\ndelivered to the client once the connection is restored. The broker resumes the client in the existing session if the\nclientId is the same as the disconnected client. A client will not have to resubscribe to all topics again."),(0,n.kt)("h2",h({},{id:"publisher"}),"Publisher"),(0,n.kt)("p",null,"Either one publisher publishes messages to multiple Subscribers. Or multiple publishers publish messages to just one\nsubscriber. Or any combination of multiple publishers/subscribers. Any publisher can only be identified when information\nabout the publisher is included in the topic or payload."),(0,n.kt)("h2",h({},{id:"publish--subscribe"}),"Publish / Subscribe"),(0,n.kt)("p",null,"The PUBLISH/SUBSCRIBE model connects clients that want to exchange information/data/messages. Any client communicates\nwith an endpoint via the broker. Before a client\nwants to publish messages it first has to set up a connection with the broker. Also, a subscribing client has to do the\nsame. Therefore, the broker can decouple the publisher and subscriber."),(0,n.kt)("h2",h({},{id:"quality-of-service-qos"}),"Quality of Service (QoS)"),(0,n.kt)("p",null,"The QoS (Quality of Service) defines a certain level of service that enables the publisher to make sure that the\ncertainty and quantity of a subscriber receiving a sent message equal the importance to receive the message at all, plus\nwhether to receive the message only once. Also, a subscriber can set a QoS, defining the importance to receive every\nmessage, and whether to accept one message multiple times or not. There are three levels available."),(0,n.kt)("h3",h({},{id:"qos-0"}),"QoS 0"),(0,n.kt)("p",null,'The broker/client is delivering the message only once, without confirmation. There is no guarantee that the message sent\nhas been sent to the subscriber. The recipient on the other end does not acknowledge the receipt. Neither is the\nacknowledgment stored. The QoS - level 0 is often referred to be the "fire and forget"-level.'),(0,n.kt)("h3",h({},{id:"qos-1"}),"QoS 1"),(0,n.kt)("p",null,"QoS - Level 1 guarantees the delivery of a message to the receiver at least once."),(0,n.kt)("h3",h({},{id:"qos-2"}),"QoS 2"),(0,n.kt)("p",null,"QoS - level 2 guarantees each message is received exactly once."),(0,n.kt)("h2",h({},{id:"queue"}),"Queue"),(0,n.kt)("p",null,"When a persistent session is active, the broker must queue the missed messages. Whenever a persistent session is created\nby the client, and the broker already queued messages of an earlier persistent session, the broker delivers the queued\nmessages using the same old session."),(0,n.kt)("h2",h({},{id:"retained-message"}),"Retained Message"),(0,n.kt)("p",null,"A retained message safes the last known value of the topic. It's only possible to save uone retained message, equal\nto one retained value. The retainFlag identifies a message to be a retained message. This message is sent, if a client\nsubscribes to a topic."),(0,n.kt)("h2",h({},{id:"session"}),"Session"),(0,n.kt)("p",null,"If a client connects to the broker a session is started. If a client connects to the broker and another client session\nalready exists with the clientId that the new client has chosen, the old session will be kicked out and taken over."),(0,n.kt)("h2",h({},{id:"session-expiry-interval"}),"Session Expiry Interval"),(0,n.kt)("p",null,"The session expiry interval defines the period length after a client disconnects and the session of the client\nends. When the session ends allo data related to the session is removed (subscriptions, messages ...)"),(0,n.kt)("h2",h({},{id:"subscription"}),"Subscription"),(0,n.kt)("p",null,"A subscription consists of a packetId. And the subscriptions the subscriber wants to subscribe to. Each subscription\nconsists of a topic and a QoS level. When subscriptions overlap, the broker delivers the message that has the highest\nQoS level for the specific topic."),(0,n.kt)("h2",h({},{id:"subscriber"}),"Subscriber"),(0,n.kt)("p",null,"A subscriber is a client that subscribed messages related to a topic."),(0,n.kt)("h2",h({},{id:"tls"}),"TLS"),(0,n.kt)("p",null,"Using Transport Layer Security (TLS) provides a secured communication channel a client and a server can use to connect.\nTLS is a cryptographic protocol, that uses a handshake mechanism to create a secure connection between client and\nserver."),(0,n.kt)("h2",h({},{id:"topic"}),"Topic"),(0,n.kt)("p",null,"Messages in MQTT are published to topics. A topic is a string that that acts as an identifier for messages to be\npublished to or subscribed from. There is no need to configure a topic, publishing on it automatically creates a topic,\nyou can\nsubscribe on."),(0,n.kt)("p",null,"Topics are treated as a hierarchy, using a slash (/) as a separator. This allows an arrangement of common themes to be\ncreated, much in the same way as a file system. This way you can group or organize your data to be published."),(0,n.kt)("p",null,"Valid examples for grouped topics could be:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Company/Location/MachineA/Speed"),(0,n.kt)("li",{parentName:"ul"},"Company/Location/MachineB/Speed"),(0,n.kt)("li",{parentName:"ul"},"Company/Location/MachineC/Speed"),(0,n.kt)("li",{parentName:"ul"},"Company/Location/MachineC/Temp")),(0,n.kt)("p",null,'Topics can contain spaces and are case-sensitive. Topics must use UTF8 coding. Zero length topic levels are valid, which\ncan lead to some slightly non-obvious behaviour. For example, a topic of "\na//topic" would correctly match against a subscription of "a/+/topic". Likewise, zero length topic levels can exist at\nboth the beginning and the end of a topic string, so "/a/topic" would match against a subscription of "+/a/topic", "#"\nor "/#", and a topic "a/topic/" would match against a subscription of "a/topic/+" or "a/topic/#".'),(0,n.kt)("p",null,"Clients can receive messages by creating subscriptions. A subscription may be to an explicit topic, in which case only\nmessages to that topic will be received, or it may include wildcards. Two wildcards are available, + or #."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"'+' can be used as a wildcard for a single level of hierarchy. For the above topics using Company/Location/+/Speed\nwould subscribe to all machines messages related to Speed."),(0,n.kt)("li",{parentName:"ul"},"'#' can be used as a wildcard for all remaining levels of a hierarchy. For the above topics using\nCompany/Location/MachineC/# would subscribe to all messages for MachineC.")))}g.isMDXComponent=!0}}]);