"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[21568],{3905:function(e,t,n){n.d(t,{Zo:function(){return h},kt:function(){return p}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},h=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),u=c(n),p=o,m=u["".concat(l,".").concat(p)]||u[p]||d[p]||i;return n?a.createElement(m,r(r({ref:t},h),{},{components:n})):a.createElement(m,r({ref:t},h))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},67534:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return h},default:function(){return u}});var a=n(87462),o=n(63366),i=(n(67294),n(3905)),r=["components"],s={id:"getting-started",title:"Getting Started",sidebar_label:"Getting Started"},l=void 0,c={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"If you are new to Eclipse Streamsheets, this section offers a quick introduction to help you understand some basic principles. In this step-by-step guide, we will build an App, which is meant to quickly illustrate how to generate, send and receive data with Streamsheets. More specifically, we will create data in one Streamsheet, continuously send it to the internal MQTT Broker and this way publishes a data stream which we will then receive in another Streamsheet.",source:"@site/streamsheets/getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/streamsheets/next/getting-started",tags:[],version:"current",frontMatter:{id:"getting-started",title:"Getting Started",sidebar_label:"Getting Started"},sidebar:"someSidebar",previous:{title:"Known Issues",permalink:"/streamsheets/next/known-issues"},next:{title:"Home",permalink:"/streamsheets/next/maincomponents/home"}},h=[{value:"Step 1: Create an App",id:"step-1-create-an-app",children:[],level:2},{value:"Step 2: Generate Data",id:"step-2-generate-data",children:[],level:2},{value:"Step 3: Create a Connection",id:"step-3-create-a-connection",children:[],level:2},{value:"Step 4: Produce a Message stream",id:"step-4-produce-a-message-stream",children:[],level:2},{value:"Step 5: Subscribe to a data stream",id:"step-5-subscribe-to-a-data-stream",children:[],level:2},{value:"Optional Step: Ideas on what to do next",id:"optional-step-ideas-on-what-to-do-next",children:[],level:2}],d={toc:h};function u(e){var t=e.components,s=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"If you are new to Eclipse Streamsheets, this section offers a quick introduction to help you understand some basic principles. In this step-by-step guide, we will build an App, which is meant to quickly illustrate how to generate, send and receive data with Streamsheets. More specifically, we will create data in one Streamsheet, continuously send it to the internal MQTT Broker and this way publishes a data stream which we will then receive in another Streamsheet."),(0,i.kt)("p",null,"Let\xb4s get started!"),(0,i.kt)("h2",{id:"step-1-create-an-app"},"Step 1: Create an App"),(0,i.kt)("p",null,"After logging in, go to the App Dashboard which lists all Apps you have access to. To create your first App, look to the top-right corner and identify the \u201cAdd\u201d button (it is the \u201cplus\u201d).\nClick it and choose a meaningful name for your App, e.g. \u201cGetting Started\u201d. If you are working with Streamsheets Pro and have access to more than one workspace, you can also select in which the App should be placed."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Step1",src:n(62122).Z,width:"1270",height:"886"})),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"This is how a blank application looks like")),(0,i.kt)("h2",{id:"step-2-generate-data"},"Step 2: Generate Data"),(0,i.kt)("p",null,"Since we do not have real data streams connected to our application yet, we simulate one to work with. A simple way to do this is to use the function RANDBETWEEN. It creates random values between a minimum and a maximum. Let\xb4s create two values, one beneath the other, and name them. Write the names left off the values, e.g. \u201cTemperature\u201d and \u201cHumidity\u201d. Then, select all four cells, right-click and define them as a ",(0,i.kt)("a",{parentName:"p",href:"/streamsheets/next/tutorials/tut-json"},"JSON Range"),". JSON is a data format, which allows to organize several key-value pairs in which the keys can be thought of as the parameter names for the respective values.\n",(0,i.kt)("img",{alt:"Step2",src:n(28672).Z,width:"995",height:"255"})),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Add RANDBETWEEN() functions for data simulation")),(0,i.kt)("p",null,"Now, this cell range is not only a range in the sheet but also a JSON object which is continuously built with every calculation step of the sheet. Many protocols require the JSON format for their messages, but it is also good for structuring your message. "),(0,i.kt)("p",null,"You can start the calculation process, by pressing the play button in the top bar.\n",(0,i.kt)("img",{alt:"Step2",src:n(51714).Z,width:"1271",height:"888"})),(0,i.kt)("p",null,"To create a data stream out of the created data simulation, we have to set up a connection."),(0,i.kt)("h2",{id:"step-3-create-a-connection"},"Step 3: Create a Connection"),(0,i.kt)("p",null,"To allow data to either be streamed to or from the App it is necessary to define which connection details for each App. Without a connection an App only exits by its own (with the exception of HTTP functions)."),(0,i.kt)("p",null,"The Connection menu can be found in the top right corner. Click the add icon to see a list of possible connection types. In our example, we will choose MQTT. "),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Step2",src:n(7765).Z,width:"1272",height:"888"})),(0,i.kt)("p",null,"Here you can configure details for the connection to an MQTT Broker. Streamsheets comes with an integrated Mosquitto MQTT Broker, which we will use. In Streamsheets Professional you can use the existing account for the Internal Broker. The OS version does not come with accounts. "),(0,i.kt)("p",null,"A connection can either be used as a reference in sheet functions, or used to assign an Inbox of a sheet as a target (or both). "),(0,i.kt)("h2",{id:"step-4-produce-a-message-stream"},"Step 4: Produce a Message stream"),(0,i.kt)("p",null,'Now, we switch back to our sheet.\nTo send the created JSON, we select an empty cell beneath the range and enter =MQTT.PUBLISH() in a cell. Choose the just created connection from the inline help. As message parameter select the JSON Range above. To complete the MQTT.PUBLISH function enter a MQTT topic. A topic in MQTT can be either published or subscribed to. We want to add information to this topic, so we use a MQTT.PUBLISH() function. The topic name can be any kind of UTF-8 string like "gettingstarted" or "example". '),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Streamsheets calculate from left to right and from top to bottom. This means, first, row 1 is calculated from left to right, then, row 2 followed by row 3 \u2026 until the end of the sheet is reached. As a consequence, you typically place a stream function behind the cells you want to send/produce. Placing the stream function before these cells will send the values of the previous calculation step."))),(0,i.kt)("iframe",{title:"vimeo-player",src:"https://player.vimeo.com/video/759136332?h=41176b2cf1",width:"640",height:"449",frameborder:"0",allowfullscreen:!0}),(0,i.kt)("h2",{id:"step-5-subscribe-to-a-data-stream"},"Step 5: Subscribe to a data stream"),(0,i.kt)("p",null,"As described above, a Connection can not only be used to send, but also to receive messages. In MQTT Connections, it is possible to assign topics to inboxes of different sheets (Every sheet is assigned its own inbox)."),(0,i.kt)("p",null,'First, create another Streamsheet in this App by clicking the \u201cplus\u201d icon in the bottom-left corner of the grid and select "add Streamsheet". In the new Streamsheet look to the top-left where it says \u201cInbox\u201d and click it. '),(0,i.kt)("p",null,'The inbox configuration opens on your right-hand side. Switch from the "Settings" tab to the "Connections" tab. Select your Connection and type in the topic name you chose to publish to above. '),(0,i.kt)("iframe",{title:"vimeo-player",src:"https://player.vimeo.com/video/759155015?h=962ef9e20b",width:"640",height:"448",frameborder:"0",allowfullscreen:!0}),(0,i.kt)("p",null,"Done?"),(0,i.kt)("p",null,"Great! You just set up connections to the local MQTT broker and created an App that produces as well as consumes MQTT data streams.\nMessages should be arriving in the Inbox of the second Streamsheet. If that is not the case, check whether your App is running (on \u201cPlay\u201d), that your first Streamsheet has the calculation mode \u201cContinuously\u201d and that the topic is in MQTT.PUBLISH() is the same as in the Consumer."),(0,i.kt)("h2",{id:"optional-step-ideas-on-what-to-do-next"},"Optional Step: Ideas on what to do next"),(0,i.kt)("p",null,"As mentioned in the beginning, this example serves as a quick introduction."),(0,i.kt)("p",null,"Hence, why not extend this Streamsheet model a little? By dragging and dropping data points that you receive in the Inbox into the grid, you create a direct link between the data stream and the spreadsheet world. Consequently, you can start processing data and build logic with spreadsheet formulas, e.g. to calculate KPIs, create dynamic dashboards and build decision engines."),(0,i.kt)("iframe",{title:"vimeo-player",src:"https://player.vimeo.com/video/759138589?h=49ee5061bc",width:"640",height:"448",frameborder:"0",allowfullscreen:!0}),(0,i.kt)("p",null,"In the example, we calculate the sum of the two values. "),(0,i.kt)("p",null,"You will notice that you are working \u201clive\u201d on the message stream as incoming data is immediately transferred to the grid and formulas change their results accordingly. Additionally, you always see what the current result in each cell is. Remember: with every calculation step the whole logic is recalculated and, therefore, all conditions are reconsidered, and based upon these, decisions can be taken. For instance, you could send messages to an additional MQTT topic or a Slack channel but only if a certain threshold is met."),(0,i.kt)("p",null,"Further, sending data from one Streamsheet or App to another is useful when building larger models, however, typically you want to set up connections (Streams) to something outside of Streamsheets, too. Hence, why not set up a new Connection to get your Streamsheets communicating with the outside world?"))}u.isMDXComponent=!0},62122:function(e,t,n){t.Z=n.p+"assets/images/GettingStarted1-8f453c8cc9ddd8091f7bc4220e19600f.png"},28672:function(e,t,n){t.Z=n.p+"assets/images/GettingStarted2_1-657435e60db073bf6e919cef2974b3d8.png"},51714:function(e,t,n){t.Z=n.p+"assets/images/GettingStarted2_2-27fad9f23fa5e34103dd1cb16ce2e27b.png"},7765:function(e,t,n){t.Z=n.p+"assets/images/GettingStarted3-09c4c898a0828d35454b3a219dd0e58f.png"}}]);