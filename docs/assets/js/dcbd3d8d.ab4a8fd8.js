"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[24218],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=u(n),f=a,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||i;return n?r.createElement(m,o(o({ref:t},s),{},{components:n})):r.createElement(m,o({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},13454:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>f,default:()=>y,frontMatter:()=>d,metadata:()=>m,toc:()=>h});var r=n(3905),a=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,c=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,s=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,p=(e,t)=>{for(var n in t||(t={}))l.call(t,n)&&s(e,n,t[n]);if(c)for(var n of c(t))u.call(t,n)&&s(e,n,t[n]);return e};const d={id:"mosquitto-certificate-management",title:"Client Certificate Authority Management",sidebar_label:"Client CA Management"},f=void 0,m={unversionedId:"broker/Mosquitto Manual/mosquitto-certificate-management",id:"version-2.9/broker/Mosquitto Manual/mosquitto-certificate-management",title:"Client Certificate Authority Management",description:"Client certificates are a popular way of adding an extra layer of security to your client authentication. It can either be added on top or instead of the regular authentication provided by the dynamic security feature using username and password. While connecting, a client identifies using a client certificate. The broker has stored a client certificate authority and allows a connection, if the client certificate gets validated, the connection is allowed.",source:"@site/mosquitto_versioned_docs/version-2.9/broker/Mosquitto Manual/certificate-management.md",sourceDirName:"broker/Mosquitto Manual",slug:"/broker/Mosquitto Manual/mosquitto-certificate-management",permalink:"/mosquitto/2.9/broker/Mosquitto Manual/mosquitto-certificate-management",draft:!1,tags:[],version:"2.9",frontMatter:{id:"mosquitto-certificate-management",title:"Client Certificate Authority Management",sidebar_label:"Client CA Management"},sidebar:"someSidebar",previous:{title:"Dynamic security",permalink:"/mosquitto/2.9/broker/Mosquitto Manual/broker-dynamic-security"},next:{title:"Force Username",permalink:"/mosquitto/2.9/broker/Mosquitto Manual/cedalo-force-username"}},g={},h=[{value:"Plugin configuration",id:"plugin-configuration",level:2}],b={toc:h};function y(e){var t,n=e,{components:a}=n,s=((e,t)=>{var n={};for(var r in e)l.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&c)for(var r of c(e))t.indexOf(r)<0&&u.call(e,r)&&(n[r]=e[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(t=p(p({},b),s),i(t,o({components:a,mdxType:"MDXLayout"}))),(0,r.kt)("p",null,"Client certificates are a popular way of adding an extra layer of security to your client authentication. It can either be added on top or instead of the regular authentication provided by the ",(0,r.kt)("a",p({parentName:"p"},{href:"/mosquitto/2.9/broker/Mosquitto%20Manual/broker-dynamic-security"}),"dynamic security")," feature using username and password. While connecting, a client identifies using a client certificate. The broker has stored a client certificate authority and allows a connection, if the client certificate gets validated, the connection is allowed. "),(0,r.kt)("p",null,"The Client CA Management allows the upload of client CAs to the broker. "),(0,r.kt)("p",null,"This plugin provides a Mosquitto control API which manages client CA certificates for\ncertificate based authentication/validation.\nThe topic of the plugins control API is ",(0,r.kt)("inlineCode",{parentName:"p"},"$CONTROL/certificate-management/v1"),".\nCurrently, supported commands offered by the API are ",(0,r.kt)("inlineCode",{parentName:"p"},"insertCACertificate"),", which\ncan be used to extend the existing Certificate Authority (CA) Chain or just the\nRoot CA by an additional signing/validating certificate. To get rid of a\npreviously added CA cert, the ",(0,r.kt)("inlineCode",{parentName:"p"},"deleteCACertificate")," command can be used."),(0,r.kt)("h2",p({},{id:"plugin-configuration"}),"Plugin configuration"),(0,r.kt)("p",null,"To enable the plugin it must be loaded into the broker with, by adding the\nfollowing to your ",(0,r.kt)("inlineCode",{parentName:"p"},"mosquitto.conf"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-aconf"}),"plugin /usr/lib/cedalo_certificate_management.so\n")),(0,r.kt)("p",null,"In addition to enable the brokers internal ",(0,r.kt)("inlineCode",{parentName:"p"},"$CONTROL/broker/v1")," API we need to\nadd:"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-aconf"}),"enable_control_api true\n")),(0,r.kt)("p",null,"This is required to determine the listeners identifier, where the changes should\nbe applied to."),(0,r.kt)("p",null,"A sample broker configuration could look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-aconf"}),"listener 1883 127.0.0.1 # listener 1 to manage the CA certificates (local connection only)\n\nlistener 8883 # listener 2 to be managed, accepting the client connections\ncertfile server.crt\nkeyfile server.key\ncapath ca_path\nrequire_certificate true\n\nallow_anonymous true\nenable_control_api true\n\nplugin /usr/lib/cedalo_certificate_management.so\n")),(0,r.kt)("p",null,"The path of the ",(0,r.kt)("inlineCode",{parentName:"p"},"capath")," configuration should contain at least a root CA cert."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Note:"))," The ",(0,r.kt)("inlineCode",{parentName:"p"},"cafile")," configuration with a single PEM file containing the CA\nchain is currently not supported for this command."),(0,r.kt)("p",null,"To add a new CA certificate to the running broker instance you can either use\n",(0,r.kt)("inlineCode",{parentName:"p"},"mosquitto_ctrl")," or initiate a request-response API call, which is described\nbelow."))}y.isMDXComponent=!0}}]);