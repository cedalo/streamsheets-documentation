"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[19865],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),d=o,k=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},30586:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>d,default:()=>f,frontMatter:()=>c,metadata:()=>k,toc:()=>h});var a=n(3905),o=Object.defineProperty,r=Object.defineProperties,l=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,p=(e,t,n)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,m=(e,t)=>{for(var n in t||(t={}))s.call(t,n)&&p(e,n,t[n]);if(i)for(var n of i(t))u.call(t,n)&&p(e,n,t[n]);return e};const c={id:"single-node",title:"Kubernetes Single Node",sidebar_label:"Single Node"},d=void 0,k={unversionedId:"deployment/on-premises/deployment/installation/kubernetes/single-node",id:"version-3.1/deployment/on-premises/deployment/installation/kubernetes/single-node",title:"Kubernetes Single Node",description:"This setup will deploy Single node Mosquitto broker and a Platform portal on a managed kubernetes cluster like GKE (Google), EKS (Amazon) or Azure Kubernetes using Helm charts.",source:"@site/mosquitto_versioned_docs/version-3.1/deployment/on-premises/deployment/installation/kubernetes/single-node.md",sourceDirName:"deployment/on-premises/deployment/installation/kubernetes",slug:"/deployment/on-premises/deployment/installation/kubernetes/single-node",permalink:"/mosquitto/deployment/on-premises/deployment/installation/kubernetes/single-node",draft:!1,tags:[],version:"3.1",frontMatter:{id:"single-node",title:"Kubernetes Single Node",sidebar_label:"Single Node"},sidebar:"someSidebar",previous:{title:"Introduction",permalink:"/mosquitto/deployment/on-premises/deployment/installation/kubernetes/introduction-kubernetes"},next:{title:"High Availability",permalink:"/mosquitto/deployment/on-premises/deployment/installation/kubernetes/high-availability"}},g={},h=[{value:"Kubernetes Setup",id:"kubernetes-setup",level:2},{value:"Dependencies and Prerequisites",id:"dependencies-and-prerequisites",level:3},{value:"Installation",id:"installation",level:2},{value:"Installation using Helm Charts:",id:"installation-using-helm-charts",level:3},{value:"Connect to Broker",id:"connect-to-broker",level:2},{value:"Usage",id:"usage",level:2}],y={toc:h};function f(e){var t,n=e,{components:o}=n,p=((e,t)=>{var n={};for(var a in e)s.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&i)for(var a of i(e))t.indexOf(a)<0&&u.call(e,a)&&(n[a]=e[a]);return n})(n,["components"]);return(0,a.kt)("wrapper",(t=m(m({},y),p),r(t,l({components:o,mdxType:"MDXLayout"}))),(0,a.kt)("p",null,"This setup will deploy Single node Mosquitto broker and a Platform portal on a managed kubernetes cluster like GKE (Google), EKS (Amazon) or Azure Kubernetes using Helm charts.\nThis deployment by default uses a Persistent volumes for persistence, and also deploys a service called mosquitto to act as a connection endpoint. Platform pod is deployed as a deployment entity and mosquitto broker as statefulset."),(0,a.kt)("h2",m({},{id:"kubernetes-setup"}),"Kubernetes Setup"),(0,a.kt)("h3",m({},{id:"dependencies-and-prerequisites"}),"Dependencies and Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Running managed kubernetes setup (GKE, EKS, AKS etc). Follow documentation guide for the respective kubernetes cluster to create a cluster on your chosen cloud provider."),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Create a namespace")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Once you are connected to your Kubernetes setup and can access the cluster using ",(0,a.kt)("inlineCode",{parentName:"li"},"kubectl")," tool. Create a namespace in which you would want to deploy the application. The deployment folder is pre-configured for the namespace named ",(0,a.kt)("inlineCode",{parentName:"li"},"singlenode"),". If you want to use the default configuration you can create a namespace named ",(0,a.kt)("inlineCode",{parentName:"li"},"singlenode")," using the below command:"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"kubectl create namespace singlenode")),(0,a.kt)("li",{parentName:"ul"},"If you want to use a different namespace, use the command: ",(0,a.kt)("inlineCode",{parentName:"li"},"kubectl create namespace <your-custom-namespace>"),".  Replace ",(0,a.kt)("inlineCode",{parentName:"li"},"<your-custom-namespace>")," with the name of the namespace you want to configure.")))),(0,a.kt)("h2",m({},{id:"installation"}),"Installation"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Prerequisites"),":"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Kubernetes Cluster should be up and running. If you are yet to setup the cluster, refer ",(0,a.kt)("a",m({parentName:"li"},{href:"#kubernetes-cluster-setup"}),"Kubernetes Cluster Setup"),"."),(0,a.kt)("li",{parentName:"ol"},"You have successfully created the namespace")),(0,a.kt)("p",null,"Once kubernetes cluster is up and running then you can now follow these steps to install the Single node Mosquitto broker setup:"),(0,a.kt)("h3",m({},{id:"installation-using-helm-charts"}),"Installation using Helm Charts:"),(0,a.kt)("p",null,"Helm charts offer a comprehensive solution for configuring various Kubernetes resources\u2014including stateful sets, deployment templates, services, and service accounts\u2014through a single command, streamlining the deployment process.When the user downloads helm package from the Platform license key is already part of the package."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Get the helm chart")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Make sure you have the helm chart  ",(0,a.kt)("inlineCode",{parentName:"li"},"mosquitto-singlenode-3.0.0.tgz"),"."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Install Helm Chart:")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Use the following ",(0,a.kt)("inlineCode",{parentName:"li"},"helm install")," command to deploy the Mosquitto application on to your Kubernetes cluster. Replace ",(0,a.kt)("inlineCode",{parentName:"li"},"<release-name>")," with the desired name for your Helm release and ",(0,a.kt)("inlineCode",{parentName:"li"},"<namespace>")," with your chosen Kubernetes namespace:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",m({parentName:"pre"},{className:"language-bash"}),"helm install <release-name>  mosquitto-singlenode-3.0.0.tgz -n <namespace>  --set imageCredentials.registry=registry.cedalo.com --set imageCredentials.username=<username> --set imageCredentials.password=<password> --set imageCredentials.email=<email> \n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"namespace"),": Set it to the namespace of your deployment."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"imageCredentials.username"),": Your docker username provided by Cedalo team."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"imageCredentials.password"),": Your docker password provided by Cedalo team."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"imageCredentials.email"),": Registered e-mail for accessing docker registry."),(0,a.kt)("li",{parentName:"ul"},"Sample example: If  your arbitrary release name is ",(0,a.kt)("inlineCode",{parentName:"li"},"sample-release-name"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"username"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"password")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"email")," be ",(0,a.kt)("inlineCode",{parentName:"li"},"demo-username"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"demo-password")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"demo@gmail.com")," then your helm installation command should be:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",m({parentName:"pre"},{className:"language-bash"}),"   helm install sample-release-name  mosquitto-singlenode-3.0.0.tgz  -n singlenode --set imageCredentials.registry=registry.cedalo.com --set imageCredentials.username=demo-username --set imageCredentials.password=demo-password --set imageCredentials.email=demo@gmail.com \n"))))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"You can monitor the running pods using the ",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl get pods -o wide -n <namespace>")," command. To observe the opened ports use ",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl get svc -n <namespace>"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"To uninstall the setup:\n",(0,a.kt)("inlineCode",{parentName:"p"},"helm uninstall <release-name> -n <namespace>")))),(0,a.kt)("p",null,"Your Mosquitto setup is now running  with a single mosquitto nodes and the Platform portal."),(0,a.kt)("h2",m({},{id:"connect-to-broker"}),"Connect to Broker"),(0,a.kt)("p",null,"Once your setup is ready, you can access the mosquitto brokers using the external ip of the mosquitto service.\nGo to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Client Account"),' menu on the Platform portal and create a new client to connect from. Make sure to assign a role, like the default "client" role, to allow your client to publish and/or subscribe to topics.\nNow you can connect to the Mosquitto cluster. You can access it either with connecting it directly to worker node running the haproxy pod along with a service exposed at port 1883:'),(0,a.kt)("p",null,"To get the external ip of mosquitto-loadbalancer service:\n",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl get service mosquitto-loadbalancer -n <namespace>")),(0,a.kt)("p",null,"In this example command we use Mosquitto Sub to subscribe onto all topics:\n",(0,a.kt)("inlineCode",{parentName:"p"},"mosquitto_sub -h <external-ip-of-mosquitto-loadbalancer> -p 1883 -u <username> -P <password> -t '#'")),(0,a.kt)("p",null,"Make sure to replace your IP, username and password."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Further Useful Commands")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If you want to change mosquitto.conf, you can do so by uncompressing the helm chart, making the required changes and packaging the helm charts again. The detailed procedure is mentioned below:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tar -xzvf mosquitto-singlenode-3.0.0.tgz "),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cd mosquitto-singlenode-3.0.0/files/")),(0,a.kt)("li",{parentName:"ul"},"Make changes to ",(0,a.kt)("inlineCode",{parentName:"li"},"mosquitto.conf")," and save it."),(0,a.kt)("li",{parentName:"ul"},"Go back to the parent directory:\n",(0,a.kt)("inlineCode",{parentName:"li"},"cd ../")),(0,a.kt)("li",{parentName:"ul"},"Package the helm chart to its original form using:\n",(0,a.kt)("inlineCode",{parentName:"li"},"helm package mosquitto-singlenode-3.0.0")),(0,a.kt)("li",{parentName:"ul"},"Uninstall helm package\n",(0,a.kt)("inlineCode",{parentName:"li"},"helm uninstall <release-name> -n <namespace>")))),(0,a.kt)("li",{parentName:"ul"},"Reinstall the helm package using the same ",(0,a.kt)("inlineCode",{parentName:"li"},"helm install")," command you used the first time or do a ",(0,a.kt)("inlineCode",{parentName:"li"},"helm upgrade"),"."))),(0,a.kt)("li",{parentName:"ul"},"You can similarly change any other configuration like ",(0,a.kt)("inlineCode",{parentName:"li"},"sql-bridge")," configuration, repackage the helm chart and install to bring changes into effect.")),(0,a.kt)("h2",m({},{id:"usage"}),"Usage"),(0,a.kt)("p",null,"Once the installation is complete, you can start using the single-node Mosquitto broker. Be sure to check the Mosquitto documentation for further details on configuring and using the broker."))}f.isMDXComponent=!0}}]);