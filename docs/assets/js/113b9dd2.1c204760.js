"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[48337],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>d});var r=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=r.createContext({}),p=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},c=function(n){var e=p(n.components);return r.createElement(l.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,i=n.originalType,l=n.parentName,c=s(n,["components","mdxType","originalType","parentName"]),f=p(t),d=o,b=f["".concat(l,".").concat(d)]||f[d]||u[d]||i;return t?r.createElement(b,a(a({ref:e},c),{},{components:t})):r.createElement(b,a({ref:e},c))}));function d(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var i=t.length,a=new Array(i);a[0]=f;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s.mdxType="string"==typeof n?n:o,a[1]=s;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},41874:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>m,contentTitle:()=>d,default:()=>h,frontMatter:()=>f,metadata:()=>b,toc:()=>g});var r=t(3905),o=Object.defineProperty,i=Object.defineProperties,a=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,c=(n,e,t)=>e in n?o(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t,u=(n,e)=>{for(var t in e||(e={}))l.call(e,t)&&c(n,t,e[t]);if(s)for(var t of s(e))p.call(e,t)&&c(n,t,e[t]);return n};const f={},d=void 0,b={unversionedId:"bridges/influxdb-bridge-schema",id:"version-3.1/bridges/influxdb-bridge-schema",title:"influxdb-bridge-schema",description:"Schema for the InfluxDB\xae Bridge, which describes all configuration options for the bridge.",source:"@site/mosquitto_versioned_docs/version-3.1/bridges/influxdb-bridge-schema.md",sourceDirName:"bridges",slug:"/bridges/influxdb-bridge-schema",permalink:"/mosquitto/bridges/influxdb-bridge-schema",draft:!1,tags:[],version:"3.1",frontMatter:{}},m={},g=[],y={toc:g};function h(n){var e,t=n,{components:o}=t,c=((n,e)=>{var t={};for(var r in n)l.call(n,r)&&e.indexOf(r)<0&&(t[r]=n[r]);if(null!=n&&s)for(var r of s(n))e.indexOf(r)<0&&p.call(n,r)&&(t[r]=n[r]);return t})(t,["components"]);return(0,r.kt)("wrapper",(e=u(u({},y),c),i(e,a({components:o,mdxType:"MDXLayout"}))),(0,r.kt)("p",null,"Schema for the InfluxDB\xae Bridge, which describes all configuration options for the bridge. "),(0,r.kt)("pre",null,(0,r.kt)("code",u({parentName:"pre"},{className:"language-json"}),'{\n    "title": "InfluxDB-Bridge Plugin Config",\n    "type": "object",\n    "properties": {\n        "version": {\n            "type": [\n                "string",\n                "integer",\n                "null"\n            ],\n            "nullable": true,\n            "description": "Version of the configuration file"\n        },\n        "connections": {\n            "type": "array",\n            "description": "List of sub-configurations per InfluxDB connection",\n            "items": {\n                "type": "object",\n                "description": "Configuration per InfluxDB connection",\n                "properties": {\n                    "name": {\n                        "type": "string",\n                        "nullable": false,\n                        "description": "Unique textual identifier of the configuration"\n                    },\n                    "connection": {\n                        "type": "object",\n                        "description": "InfluxDB connection specific configuration",\n                        "properties": {\n                            "driver": {\n                                "type": "string",\n                                "enum": [\n                                    "influxdbv1",\n                                    "influxdbv2"\n                                ],\n                                "nullable": false,\n                                "description": "Name of the InfluxDB driver to use (for InfluxDB v1 or InfluxDB v2/v3)"\n                            },\n                            "hostname": {\n                                "type": "string",\n                                "nullable": false,\n                                "description": "Hostname or IP of the InfluxDB server to connect to"\n                            },\n                            "port": {\n                                "type": "integer",\n                                "nullable": false,\n                                "description": "Port of the InfluxDB server to connect to"\n                            },\n                            "database": {\n                                "type": "string",\n                                "nullable": false,\n                                "description": "Name of the database (or bucket for influxdb v2) to connect to"\n                            },\n                            "organization": {\n                                "type": "string",\n                                "nullable": true,\n                                "description": "Organization that a bucket belongs to in InfluxDB v2"\n                            },\n                            "compression": {\n                                "type": "object",\n                                "nullable": true,\n                                "description": "Properties related to data compression happening before sending it over to InfluxDB",\n                                "properties": {\n                                    "enable": {\n                                        "type": "boolean",\n                                        "nullable": true,\n                                        "default": false,\n                                        "description": "Whether to compress data before influxdb. Less bandwidth required but inflicts more strain on the server"\n                                    }\n                                }\n                            },\n                            "credentials": {\n                                "type": "object",\n                                "nullable": false,\n                                "description": "Credentials to authenticate to InfluxDB. Combine both v1 credentails (username and password) and v2 credentials (tokens). Only one of the two whic corresponds to the InfluxDB version in use must should be selected",\n                                "properties": {\n                                    "token": {\n                                        "type": "string",\n                                        "nullable": true,\n                                        "description": "Authentication token for InfluxDB v2 connection"\n                                    },\n                                    "username": {\n                                        "type": "string",\n                                        "nullable": true,\n                                        "description": "Username for InfluxDB v1"\n                                    },\n                                    "password": {\n                                        "type": "string",\n                                        "nullable": true,\n                                        "description": "Password for InfluxDB v1"\n                                    }\n                                }\n                            },\n                            "ssl": {\n                                "type": "object",\n                                "nullable": true,\n                                "description": "SSL configuration for the connection",\n                                "properties": {\n                                    "ca": {\n                                        "type": "string",\n                                        "nullable": true,\n                                        "description": "CA certificate file to use for the connection"\n                                    },\n                                    "caPath": {\n                                        "type": "string",\n                                        "nullable": true,\n                                        "description": "CA certificate path to use for the connection"\n                                    },\n                                    "rejectUnauthorized": {\n                                        "type": "boolean",\n                                        "nullable": true,\n                                        "description": "Whether to reject unauthorized connections or not"\n                                    }\n                                }\n                            },\n                            "debug": {\n                                "type": "boolean",\n                                "nullable": true,\n                                "description": "Whether to enable debug query logging for connection"\n                            },\n                            "lazyConnect": {\n                                "type": "boolean",\n                                "nullable": true,\n                                "default": false,\n                                "description": "Whether to allow the plugin to continue if the connection to the database cannot be established"\n                            }\n                        },\n                        "nullable": false,\n                        "required": [\n                            "driver"\n                        ]\n                    },\n                    "options": {\n                        "type": "object",\n                        "nullable": true,\n                        "description": "Plugin options for configuring internal queues and buffers",\n                        "properties": {\n                            "bufferSize": {\n                                "type": "integer",\n                                "nullable": true,\n                                "minimum": 1,\n                                "description": "Maximum number of messages to buffer before flushing to the database"\n                            },\n                            "timeoutMs": {\n                                "type": "integer",\n                                "nullable": true,\n                                "minimum": 0,\n                                "description": "Maximum time in milliseconds to buffer messages before flushing to the database"\n                            },\n                            "queueMaxSize": {\n                                "type": "integer",\n                                "nullable": true,\n                                "minimum": -1,\n                                "description": "Maximum number of messages in retry queue"\n                            },\n                            "maxRetries": {\n                                "type": "integer",\n                                "nullable": true,\n                                "minimum": 0,\n                                "description": "Maximum number of retries for failed inserts due to lost connection"\n                            },\n                            "retryDelayMs": {\n                                "type": "integer",\n                                "nullable": true,\n                                "minimum": 0,\n                                "description": "Delay in milliseconds before retrying inserts failed due to lost connection"\n                            }\n                        }\n                    },\n                    "topicMappings": {\n                        "type": "array",\n                        "description": "List of topic mapping objects to forward MQTT messages to InfluxDB",\n                        "items": {\n                            "type": "object",\n                            "properties": {\n                                "name": {\n                                    "type": "string",\n                                    "nullable": false,\n                                    "description": "Unique identifier of this mapping"\n                                },\n                                "schemaMapping": {\n                                    "type": "string",\n                                    "nullable": false,\n                                    "description": "Name of the schema mapping which should be applied here"\n                                },\n                                "target": {\n                                    "type": "string",\n                                    "description": "InfluxDB measurement to forward MQTT messages to"\n                                },\n                                "options": {\n                                    "type": "object",\n                                    "nullable": true,\n                                    "description": "Optional options for the measurement"\n                                },\n                                "mqttTopics": {\n                                    "type": "array",\n                                    "items": {\n                                        "type": "string",\n                                        "description": "List of MQTT topics to forward messages from"\n                                    }\n                                }\n                            },\n                            "required": [\n                                "name",\n                                "target",\n                                "mqttTopics"\n                            ]\n                        }\n                    }\n                },\n                "required": [\n                    "name",\n                    "connection",\n                    "topicMappings"\n                ]\n            }\n        },\n        "schemaMappings": {\n            "type": "array",\n            "items": {\n                "type": "object",\n                "properties": {\n                    "name": {\n                        "type": "string",\n                        "nullable": false,\n                        "description": "Unique identifier of the mapping"\n                    },\n                    "mapping": {\n                        "type": "array",\n                        "description": "List of mappings to apply to InfluxDB. Each schema contains a mapping of InfluxDB fields/tags to MQTT message properties",\n                        "items": {\n                            "type": "object",\n                            "description": "Properties to select from the MQTT message and insert into InfluxDB",\n                            "properties": {\n                                "source": {\n                                    "oneOf": [\n                                        {\n                                            "type": "string"\n                                        },\n                                        {\n                                            "type": "number"\n                                        },\n                                        {\n                                            "type": "null",\n                                            "nullable": true\n                                        }\n                                    ],\n                                    "description": "JSON path to the value to insert or constant value"\n                                },\n                                "target": {\n                                    "type": "string",\n                                    "description": "Name of the field or tag to insert data from \\"source\\" into"\n                                },\n                                "targetType": {\n                                    "type": "string",\n                                    "enum": [\n                                        "tag",\n                                        "field",\n                                        "lineProtocol"\n                                    ],\n                                    "description": "Whether the target is a tag or a field in InfluxDB"\n                                },\n                                "type": {\n                                    "type": "string",\n                                    "nullable": true,\n                                    "description": "Data type of the value to cast source to before inserting"\n                                },\n                                "options": {\n                                    "type": "object",\n                                    "nullable": true,\n                                    "description": "Optional options for the field or tag",\n                                    "properties": {\n                                        "isConst": {\n                                            "type": "boolean",\n                                            "nullable": true,\n                                            "description": "Whether the source is a constant value"\n                                        }\n                                    }\n                                }\n                            },\n                            "required": [\n                                "source",\n                                "target",\n                                "targetType"\n                            ]\n                        }\n                    }\n                },\n                "required": [\n                    "name",\n                    "mapping"\n                ]\n            }\n        }\n    },\n    "required": [\n        "connections",\n        "schemaMappings"\n    ]\n}\n')))}h.isMDXComponent=!0}}]);