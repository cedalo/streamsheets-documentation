"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[71969],{3905:function(e,t,s){s.d(t,{Zo:function(){return d},kt:function(){return u}});var o=s(67294);function i(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function a(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,o)}return s}function n(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?a(Object(s),!0).forEach((function(t){i(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):a(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function r(e,t){if(null==e)return{};var s,o,i=function(e,t){if(null==e)return{};var s,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)s=a[o],t.indexOf(s)>=0||(i[s]=e[s]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)s=a[o],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(i[s]=e[s])}return i}var l=o.createContext({}),c=function(e){var t=o.useContext(l),s=t;return e&&(s="function"==typeof e?e(t):n(n({},t),e)),s},d=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var s=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=c(s),u=i,m=p["".concat(l,".").concat(u)]||p[u]||h[u]||a;return s?o.createElement(m,n(n({ref:t},d),{},{components:s})):o.createElement(m,n({ref:t},d))}));function u(e,t){var s=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=s.length,n=new Array(a);n[0]=p;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,n[1]=r;for(var c=2;c<a;c++)n[c]=s[c];return o.createElement.apply(null,n)}return o.createElement.apply(null,s)}p.displayName="MDXCreateElement"},79369:function(e,t,s){s.r(t),s.d(t,{frontMatter:function(){return r},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return p}});var o=s(87462),i=s(63366),a=(s(67294),s(3905)),n=["components"],r={id:"mqtt-vocabulary",title:"MQTT Vocabulary",sidebar_label:"MQTT Vocabulary"},l=void 0,c={unversionedId:"mqtt-vocabulary",id:"version-2.1/mqtt-vocabulary",title:"MQTT Vocabulary",description:"Acknowledgement",source:"@site/mosquitto_versioned_docs/version-2.1/mqtt-vocabulary.md",sourceDirName:".",slug:"/mqtt-vocabulary",permalink:"/mosquitto/2.1/mqtt-vocabulary",tags:[],version:"2.1",frontMatter:{id:"mqtt-vocabulary",title:"MQTT Vocabulary",sidebar_label:"MQTT Vocabulary"},sidebar:"someSidebar",previous:{title:"MQTT Packets",permalink:"/mosquitto/2.1/mqtt-packets-overview"}},d=[{value:"Acknowledgement",id:"acknowledgement",children:[],level:4},{value:"Broker",id:"broker",children:[],level:4},{value:"Clean Session",id:"clean-session",children:[],level:4},{value:"Clean Start",id:"clean-start",children:[],level:4},{value:"Client",id:"client",children:[],level:4},{value:"Client ID",id:"client-id",children:[],level:4},{value:"CONNACK",id:"connack",children:[],level:4},{value:"CONNECT",id:"connect",children:[],level:4},{value:"Device",id:"device",children:[],level:4},{value:"DUP",id:"dup",children:[],level:4},{value:"Flag",id:"flag",children:[],level:4},{value:"IP",id:"ip",children:[],level:4},{value:"Keep Alive",id:"keep-alive",children:[],level:4},{value:"Last Will",id:"last-will",children:[],level:4},{value:"Message",id:"message",children:[],level:4},{value:"MQTT",id:"mqtt",children:[],level:4},{value:"MQTT v.3.1.1",id:"mqtt-v311",children:[],level:4},{value:"MQTT v.5.0",id:"mqtt-v50",children:[],level:4},{value:"Packet",id:"packet",children:[],level:4},{value:"Packet ID",id:"packet-id",children:[],level:4},{value:"Password",id:"password",children:[],level:4},{value:"Payload",id:"payload",children:[],level:4},{value:"Persistent Session",id:"persistent-session",children:[],level:4},{value:"PINGREQ",id:"pingreq",children:[],level:4},{value:"PINGRESP",id:"pingresp",children:[],level:4},{value:"Pub / Sub",id:"pub--sub",children:[],level:4},{value:"PUBACK",id:"puback",children:[],level:4},{value:"PUBCOMP",id:"pubcomp",children:[],level:4},{value:"PUBLISH",id:"publish",children:[],level:4},{value:"Publisher",id:"publisher",children:[],level:4},{value:"PUBREC",id:"pubrec",children:[],level:4},{value:"PUBREL",id:"pubrel",children:[],level:4},{value:"Quality of Service QoS",id:"quality-of-service-qos",children:[],level:4},{value:"QoS 0",id:"qos-0",children:[],level:4},{value:"QoS 1",id:"qos-1",children:[],level:4},{value:"QoS 2",id:"qos-2",children:[],level:4},{value:"Queue",id:"queue",children:[],level:4},{value:"Retained Message",id:"retained-message",children:[],level:4},{value:"Return Code",id:"return-code",children:[],level:4},{value:"Session",id:"session",children:[],level:4},{value:"Session Expiry Interval",id:"session-expiry-interval",children:[],level:4},{value:"SUBSCRIBE",id:"subscribe",children:[],level:4},{value:"Subscriber",id:"subscriber",children:[],level:4},{value:"Subscription",id:"subscription",children:[],level:4},{value:"TCP",id:"tcp",children:[],level:4},{value:"TLS",id:"tls",children:[],level:4},{value:"Topic",id:"topic",children:[],level:4},{value:"UNSUBSCRIBE",id:"unsubscribe",children:[],level:4},{value:"Username",id:"username",children:[],level:4},{value:"Wildcard",id:"wildcard",children:[],level:4},{value:"+",id:"-1",children:[],level:4}],h={toc:d};function p(e){var t=e.components,r=(0,i.Z)(e,n);return(0,a.kt)("wrapper",(0,o.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"acknowledgement"},"Acknowledgement"),(0,a.kt)("p",null,"There are various acknowledgements that are used within MQTT:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"SUBACK"),(0,a.kt)("li",{parentName:"ul"},"CONNACK"),(0,a.kt)("li",{parentName:"ul"},"PUBACK / PUBREC / PUBREL")),(0,a.kt)("h4",{id:"broker"},"Broker"),(0,a.kt)("p",null,"There is no alternative for clients (publisher and subscribers) than to connect to a broker when you are using MQTT protocol architecture. All packets must pass the broker. Each getting checked for specific properties, also the broker filters the package to figure out whom (subscribers) to forward the package to.\nSee more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#the-broker-is-the-central-entity"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#the-broker-is-the-central-entity"),"."),(0,a.kt)("h4",{id:"clean-session"},"Clean Session"),(0,a.kt)("p",null,"This parameter shows if a client wants to establish a persistent session with a broker or not. Therefore, the cleanSession parameter can have two values: \u201ctrue\u201d (Client doesn\u2019t want to establish a persistent session. In addition, all previous persistent sessions are dismissed.) or \u201cfalse\u201d(Client wants to establish a persistent session.)"),(0,a.kt)("h4",{id:"clean-start"},"Clean Start"),(0,a.kt)("p",null,"cleanStart = 0\nIn this case the server resumes communication with the client based on the state of the current session (the session is identified by the clientId).\nIf there is no earlier session, the broker must create a new session.\nIn case of a connection disconnectiong, the broker must store:\nWhether the session exists. Even though a topic has no subscriptions and therefore the session would be without real use.\nAll subscriptions.\nAll QoS1 or QoS2 messages that haven't been confirmed by the client yet.\ncleanStart = 1\nIn this case the broker discards any previous sessions and opens a new one."),(0,a.kt)("h4",{id:"client"},"Client"),(0,a.kt)("p",null,"The data is sent via the MQTT protocol. The MQTT broker receives the data, filters the data packet, and forwards it to the receiving clients. In this scenario, the receiving clients could be the radiator or humidifier. This is possible because of the efficient protocol format, and because a broker is used to decouple the sender and receiver.\nSee more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/broker-introduction#intro"},"https://docs.cedalo.com/mosquitto/2.1/broker-introduction#intro"),"."),(0,a.kt)("h4",{id:"client-id"},"Client ID"),(0,a.kt)("p",null,"Most used for cleanSession. In case you have set CleanFlag=false and reconnected with the same clientId, the broker remembers the topics you have subscribed to."),(0,a.kt)("h4",{id:"connack"},"CONNACK"),(0,a.kt)("p",null,"The broker in return responds by sending a so-called CONNACK packet (Acknowledge connection request) and a status code. If the clean session value in a client\u2019s CONNECT message is \u201ctrue,\u201d then the session present value in the CONNACK response will be \u201cfalse.\u201d It means that a client and broker should establish a new session and, at the same time, discard any existing one. After the CONNECT and CONNACK packet is exchanged, the connection is enabled."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"mqttProtocol",src:s(26932).Z,width:"600",height:"280"})),(0,a.kt)("p",null,"See more  ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#broker-client-connection"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#broker-client-connection"),"."),(0,a.kt)("h4",{id:"connect"},"CONNECT"),(0,a.kt)("p",null,"An MQTT broker always connects clients who want to share and clients who want to receive data. "),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"mqttProtocol",src:s(21307).Z,width:"600",height:"400"})),(0,a.kt)("p",null,"See more  ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#broker-client-connection"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#broker-client-connection"),"."),(0,a.kt)("h4",{id:"device"},"Device"),(0,a.kt)("p",null,"In this documentation, any device can be a client. And any client can be a publisher or subscriber."),(0,a.kt)("h4",{id:"dup"},"DUP"),(0,a.kt)("p",null,"A dupFlag indicates the duplicate of a message.\nSee more  ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt#dupflag"},"https://docs.cedalo.com/mosquitto/2.1/mqtt#dupflag"),"."),(0,a.kt)("h4",{id:"flag"},"Flag"),(0,a.kt)("p",null,"There is only the DUP flag available within MQTT."),(0,a.kt)("h4",{id:"ip"},"IP"),(0,a.kt)("p",null,"The Internet Protocol (IP) is a network protocol that is widespread in computer networks and represents the basis of the Internet due to its function. The IP is the implementation of the Internet layer of the TCP/IP model.\nSee more  ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/security#tcpip-is-not-safe-on-its-own"},"https://docs.cedalo.com/mosquitto/2.1/security#tcpip-is-not-safe-on-its-own"),"."),(0,a.kt)("h4",{id:"keep-alive"},"Keep Alive"),(0,a.kt)("p",null,"The MQTT keepAlive parameter identifies the maximum interval in seconds (e.g., 120, as I show in this article\u2019s example) when a client maintains the MQTT connection but without communication (sending an MQTT packet). After the specified keepAlive parameter period is over, a client sends a PING request (PINGREQ), and a broker has to respond with a PING Response (PINGRESP). If no response follows the PING request, the client can assume the connection has disconnected. Also, the broker is waiting for the PING request. The broker must expect a PINGREQ and wait for another half of the set in the keepAlive parameter time, but then disconnect the connection for good.\nSee more  ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt#keepalive"},"https://docs.cedalo.com/mosquitto/2.1/mqtt#keepalive"),"."),(0,a.kt)("h4",{id:"last-will"},"Last Will"),(0,a.kt)("p",null,"The lastWill message is sent by the broker on behalf of the client when a disconnect occurs without a DISCONNECT packet before the actual break-off.\nSee more  ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#lastwill"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#lastwill"),"."),(0,a.kt)("h4",{id:"message"},"Message"),(0,a.kt)("p",null,"The actual content of a message is the content of a payload. MQTT is not limited by its payload format. It delivers what the publisher is sending. This could be a value, string, JSON file, or even content of a jpg or an mp3 file. Up to 256MB. The payload does not encrypt the content. The broker simply delivers what the publisher inserts into the payload.\nSee more  ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#payload"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#payload"),"."),(0,a.kt)("h4",{id:"mqtt"},"MQTT"),(0,a.kt)("p",null,"MQTT = \u201cMQ Telemetry Transport\u201d. The setup consists of two basic concepts: PUBLISH / SUBSCRIBE and CLIENT / BROKER. And three basic functionalities: CONNECT, PUBLISH, SUBSCRIBE\nSee more  ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/"),"."),(0,a.kt)("h4",{id:"mqtt-v311"},"MQTT v.3.1.1"),(0,a.kt)("p",null,"Most MQTT-related devices support v.3.1.1 whilst v.5.0 not.\nSee more ",(0,a.kt)("a",{parentName:"p",href:"http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html"},"http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html"),"."),(0,a.kt)("h4",{id:"mqtt-v50"},"MQTT v.5.0"),(0,a.kt)("p",null,"The MQTT version 5.0 is the next development step in the evolution of MQTT. Especially interesting is the changes made to the cleanSession. Have a look here: ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt#connect"},"https://docs.cedalo.com/mosquitto/2.1/mqtt#connect"),"\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/supported-mqtt-versions/#v50"},"https://docs.cedalo.com/mosquitto/2.1/supported-mqtt-versions/#v50"),"."),(0,a.kt)("h4",{id:"packet"},"Packet"),(0,a.kt)("p",null,'There is no definition of when a delivery is called a packet or message. Cedalo is using the term "packet" for any of the commands, and "message" for publishing or subscribing messages. All packets must pass the broker.'),(0,a.kt)("h4",{id:"packet-id"},"Packet ID"),(0,a.kt)("p",null,"Unique packet identifier the broker uses to identify the packet when needed.\nSee more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt#packetid-1"},"https://docs.cedalo.com/mosquitto/2.1/mqtt#packetid-1"),"."),(0,a.kt)("h4",{id:"password"},"Password"),(0,a.kt)("p",null,"MQTT can forward and handle username and password within a sent packet. It's important that whenever a packet is not encrypted or hashed (either by implementation or TSL), the password is sent as plain text.\nSee more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#usernamepassword"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#usernamepassword"),"."),(0,a.kt)("h4",{id:"payload"},"Payload"),(0,a.kt)("p",null,"MQTT is not limited by its payload format. It delivers what the publisher is sending. The actual content of a message is the content of a payload.\nSee more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt#payload"},"https://docs.cedalo.com/mosquitto/2.1/mqtt#payload"),"."),(0,a.kt)("h4",{id:"persistent-session"},"Persistent Session"),(0,a.kt)("p",null,"The Persistent session is active when the cleanSession flag is set to false. An active MQTT persistent session (with the cleanSession having the \u201cfalse\u201d value) is activated whenever the client disconnects ungracefully. All information that the client did not receive from the broker since the last active connection will be preserved on the broker and delivered to the client once the connection is restored. The broker resumes the client in the existing session if the clientId is the same as the disconnected client. A client will not have to resubscribe to all topics again.\nSee more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt#persistent-sessions"},"https://docs.cedalo.com/mosquitto/2.1/mqtt#persistent-sessions"),"."),(0,a.kt)("h4",{id:"pingreq"},"PINGREQ"),(0,a.kt)("p",null,"No matter who is not answering or sending the PINGREQ or PINGRESP within the specific time interval plus another half of the very same interval, the broker or client must disconnect. When this happens, the broker sends the lastWill and testament message. If the client has created one. Within the interval, it's ok that the client and broker do not transmit messages. In fact, after this interval, the client must send a so-called PING Request packet (PINGREQ)."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"mqttProtocol",src:s(17207).Z,width:"600",height:"203"})),(0,a.kt)("p",null,"See more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#keepalive"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#keepalive"),"."),(0,a.kt)("h4",{id:"pingresp"},"PINGRESP"),(0,a.kt)("p",null,'The broker must respond with a PING Response (PINGRESP). If the connection is out of sync, and a participant is not responding - called a "half-open connection", keepAlive takes action.'),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"mqttProtocol",src:s(98969).Z,width:"600",height:"203"})),(0,a.kt)("p",null,"See more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#keepalive"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#keepalive"),"."),(0,a.kt)("h4",{id:"pub--sub"},"Pub / Sub"),(0,a.kt)("p",null,"The PUBLISH/SUBSCRIBE model connects client that want to exchange information/data/messages.\nThe model consists of the client-server model. Any client communicates with an endpoint via the broker. Before a client wants to publish messages it first has to set up a connection with the broker. Also, a subscribing client has to do the same. Therefore, the broker can decouple the publisher and subscriber.\nSee more  ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#central-hub"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#central-hub"),"."),(0,a.kt)("h4",{id:"puback"},"PUBACK"),(0,a.kt)("p",null,"The broker must acknowledge each SUBSCRIBE packet. Therefore the broker sends a SUBACK packet (subscribe acknowledge) to the client."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"mqttProtocol",src:s(50486).Z,width:"600",height:"219"})),(0,a.kt)("p",null,"See more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#subscriptions"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#subscriptions"),"."),(0,a.kt)("h4",{id:"pubcomp"},"PUBCOMP"),(0,a.kt)("p",null,"To discard all stored states and answers a so-called PUBCOMP packet (Publish complete) is sent. That's the end of the QoS2 order of events."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"mqttProtocol",src:s(37005).Z,width:"600",height:"219"})),(0,a.kt)("p",null,"See more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/quality-of-service/#qos2---exactly-once"},"https://docs.cedalo.com/mosquitto/2.1/quality-of-service/#qos2---exactly-once"),"."),(0,a.kt)("h4",{id:"publish"},"PUBLISH"),(0,a.kt)("p",null,"The PUBLISH packet consists of details that indicate to the broker what to do.\nRead more about these here: ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#packetid"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#packetid"),"."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"mqttProtocol",src:s(59640).Z,width:"600",height:"310"})),(0,a.kt)("p",null,"See more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#mqtt-pubsub-model"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#mqtt-pubsub-model"),"."),(0,a.kt)("h4",{id:"publisher"},"Publisher"),(0,a.kt)("p",null,"Either one publisher publishes messages to multiple Subscribers. Or multiple publishers publish messages to just one subscriber. Or any combination of multiple publishers/subscribers. Any publisher can only be identified when information about the publisher is included in the topic or payload.\nSee more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt#client-server-model"},"https://docs.cedalo.com/mosquitto/2.1/mqtt#client-server-model"),"."),(0,a.kt)("h4",{id:"pubrec"},"PUBREC"),(0,a.kt)("p",null,"A PUBREC Packet is a response to a PUBLISH Packet with QoS 2. It is the second packet of the QoS 2 protocol exchange."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"mqttProtocol",src:s(59137).Z,width:"600",height:"219"})),(0,a.kt)("p",null,"See more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/quality-of-service/#qos2---exactly-once"},"https://docs.cedalo.com/mosquitto/2.1/quality-of-service/#qos2---exactly-once"),"."),(0,a.kt)("h4",{id:"pubrel"},"PUBREL"),(0,a.kt)("p",null,"A PUBREL is another packet the broker sends after receiving the PUBREC packet. This packet must be responded to with a PUBCOMP packet."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"mqttProtocol",src:s(75942).Z,width:"600",height:"219"})),(0,a.kt)("p",null,"See more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/quality-of-service/#qos2---exactly-once"},"https://docs.cedalo.com/mosquitto/2.1/quality-of-service/#qos2---exactly-once"),"."),(0,a.kt)("h4",{id:"quality-of-service-qos"},"Quality of Service QoS"),(0,a.kt)("p",null,"The QoS (Quality of Service) defines a certain level of service that enables the publisher to make sure that the certainty and quantity of a subscriber receiving a sent message equal the importance to receive the message at all, plus whether to receive the message only once. Also, a subscriber can set a QoS, defining the importance to receive every message, and whether to accept one message multiple times or not. There are three levels available.\nSee more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#qos"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#qos"),"."),(0,a.kt)("h4",{id:"qos-0"},"QoS 0"),(0,a.kt)("p",null,'The broker/client is delivering the message only once, without confirmation. There is no guarantee that the message sent has been sent to the subscriber. The recipient on the other end does not acknowledge the receipt. Neither is the acknowledgment stored. The QoS0 - level is often referred to be the "fire and forget"-level.\nSee more ',(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#qos-0---at-most-once"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#qos-0---at-most-once"),"."),(0,a.kt)("h4",{id:"qos-1"},"QoS 1"),(0,a.kt)("p",null,"Level 1 QoS guarantees the delivery of a message to the receiver at least once.\nSee more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#qos-1---at-least-once"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#qos-1---at-least-once"),"."),(0,a.kt)("h4",{id:"qos-2"},"QoS 2"),(0,a.kt)("p",null,"QoS level 2 guarantees each message is received exactly once.\nSee more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#qos-2---exactly-once"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#qos-2---exactly-once"),"."),(0,a.kt)("h4",{id:"queue"},"Queue"),(0,a.kt)("p",null,"When a persistent session is active, the broker must queue the missed messages. Whenever a persistent session is created by the client, and the broker already queued messages of an earlier persistent session, the broker delivers the queued messages using the same old session.\nSee more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt#persistent-sessions"},"https://docs.cedalo.com/mosquitto/2.1/mqtt#persistent-sessions"),"."),(0,a.kt)("h4",{id:"retained-message"},"Retained Message"),(0,a.kt)("p",null,"A retained message safes the last known value of the topic. It's only possible to save up to one retained message, equal to one retained value. The retainFlag identifies a message to be a retained message. To identify the message itself the packetId is used.\nSee more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt#retainflag"},"https://docs.cedalo.com/mosquitto/2.1/mqtt#retainflag"),"."),(0,a.kt)("h4",{id:"return-code"},"Return Code"),(0,a.kt)("p",null,"The return code is used within a SUBACK packet. The broker sends one return code for each topic/QoS-pair that it receives in the SUBSCRIBE packet. The return codes can be:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"0 - Success-Maximum QoS0"),(0,a.kt)("li",{parentName:"ul"},"1 - Success-Maximum QoS1"),(0,a.kt)("li",{parentName:"ul"},"2 - Success-Maximum QoS2"),(0,a.kt)("li",{parentName:"ul"},"128 - Failure")),(0,a.kt)("h4",{id:"session"},"Session"),(0,a.kt)("p",null,"If a client connects to the broker a session is started. If a client connects to the broker and another client session already exists with the clientId that the new client has chosen, the old session will be kicked out and taken over."),(0,a.kt)("h4",{id:"session-expiry-interval"},"Session Expiry Interval"),(0,a.kt)("p",null,"sessionExpiryInterval:"),(0,a.kt)("p",null,"Whenever a session ExpiryInterval is set (e.g. 60) a cleanStart is automatically set to \u201c0\u201d.\nWith a sessionExpiryInterval active the sessionState will be saved immediately after the keepAlive runs out (e.g. 120 plus half of the keepAlive - that would be 60 seconds in this case).The sessionState is safed for the amount of time set (in this case 60 seconds).\nsessionExpiryInterval is solving the problem that you don\u2019t need to send anther CONNECT packet including cleanSession=1 (MQTT v.3.1.1) to discard the session after set it retained."),(0,a.kt)("h4",{id:"subscribe"},"SUBSCRIBE"),(0,a.kt)("p",null,"To receive messages on topics of interest, the client sends a SUBSCRIBE packet to the broker."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"mqttProtocol",src:s(92687).Z,width:"600",height:"373"})),(0,a.kt)("p",null,"See more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt#subscribe"},"https://docs.cedalo.com/mosquitto/2.1/mqtt#subscribe"),"."),(0,a.kt)("h4",{id:"subscriber"},"Subscriber"),(0,a.kt)("p",null,"Direct contact between subscriber and publisher is never able. Only the broker enables transmitting messages.  Also, the subscribing client only has one duty. To subscribe to the topic it wants to receive messages from. The subscriber-only knows about the existence of the publisher as the client subscribes to the published topics.\nSee more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/subscribing"},"https://docs.cedalo.com/mosquitto/2.1/subscribing"),"."),(0,a.kt)("h4",{id:"subscription"},"Subscription"),(0,a.kt)("p",null,"A subscription consists of a packetId. And the subscriptions the subscriber wants to subscribe to. Each subscription consists of a topic and a QoS level. When subscriptions overlap, the broker delivers the message that has the highest QoS level for the specific topic."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"mqttProtocol",src:s(92687).Z,width:"600",height:"373"})),(0,a.kt)("p",null,"See more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/broker-introduction#subscribe"},"https://docs.cedalo.com/mosquitto/2.1/broker-introduction#subscribe"),"."),(0,a.kt)("h4",{id:"tcp"},"TCP"),(0,a.kt)("p",null,"TCP is embedding TLS (Transport Layer Security). Allowing MQTT packets to be transmitted via encrypted pipes. TLS protects all parts of an MQTT packet, not only the payload.\nSee more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/security#authorization"},"https://docs.cedalo.com/mosquitto/2.1/security#authorization"),"."),(0,a.kt)("h4",{id:"tls"},"TLS"),(0,a.kt)("p",null,"Using Transport Layer Security (TLS) provides a secured communication channel a client and a server can use to connect. TLS is a cryptographic protocol, that uses a handshake mechanism to create a secure connection between client and server.\nSee more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/security#server-side-tls"},"https://docs.cedalo.com/mosquitto/2.1/security#server-side-tls"),"."),(0,a.kt)("h4",{id:"topic"},"Topic"),(0,a.kt)("p",null,'The topic is set using a simple UTF-8 string. Topics are treated hierarchically. To delimiter, a slash "/" symbolizes a separation. Allowing the client organizational structure, much like a common filesystem. There is no need for creating a topic. You can subscribe to any topic, even though there might not be messages published. On the other hand, you must know about the topic names to be able to subscribe to them.\nSee more ',(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#central-hub"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#central-hub"),"."),(0,a.kt)("h4",{id:"unsubscribe"},"UNSUBSCRIBE"),(0,a.kt)("p",null,"A client can always UNSUBSCRIBE from a topic. The UNSUBSCRIBE packet includes the packetId and list of topics the subscriber wants to unsubscribe from."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"mqttProtocol",src:s(6130).Z,width:"600",height:"286"})),(0,a.kt)("h4",{id:"username"},"Username"),(0,a.kt)("p",null,"MQTT can forward and handle username and password within a sent packet.\nSee more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#usernamepassword"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#usernamepassword"),"."),(0,a.kt)("h4",{id:"wildcard"},"Wildcard"),(0,a.kt)("p",null,"Subscribing to several topics simultaneously is an option that's possible. There are two kinds of wildcards: single-level and multiple levels.\nSee more ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cedalo.com/mosquitto/2.1/mqtt/#subscriptions"},"https://docs.cedalo.com/mosquitto/2.1/mqtt/#subscriptions"),"."),(0,a.kt)("h5",{id:""}),(0,a.kt)("p",null,'"#" is used, the client subscribes to each topic that\'s after the #.'),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"mqttProtocol",src:s(77671).Z,width:"600",height:"416"})),(0,a.kt)("h4",{id:"-1"},"+"),(0,a.kt)("p",null,"\u201c+\u201d is the wildcard used to match a single level of hierarchy."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"mqttProtocol",src:s(50285).Z,width:"600",height:"273"})))}p.isMDXComponent=!0},26932:function(e,t,s){t.Z=s.p+"assets/images/CONNACK-01d74fa06e61abb23ab6c3136b9ee4f9.png"},21307:function(e,t,s){t.Z=s.p+"assets/images/CONNECT-5a980387b5072c46485bb7e5846a778e.png"},17207:function(e,t,s){t.Z=s.p+"assets/images/PINGREQ-3f59bf01166e56a43e22c0a329a2ac23.png"},98969:function(e,t,s){t.Z=s.p+"assets/images/PINGRESP-015856310847e3d4f1d6765f307f3b43.png"},50486:function(e,t,s){t.Z=s.p+"assets/images/PUBACK-006003278fa5905ddb879b54cbb6f378.png"},37005:function(e,t,s){t.Z=s.p+"assets/images/PUBCOMP-c6e2ea70b25e2fa1ce2a910dccb8be7b.png"},59640:function(e,t,s){t.Z=s.p+"assets/images/PUBLISH-e0d3503e716c9661f59b1704ad9cd154.png"},59137:function(e,t,s){t.Z=s.p+"assets/images/PUBREC-e13f60c51521081b2905ecc1003ef1bb.png"},75942:function(e,t,s){t.Z=s.p+"assets/images/PUBREL-ed79ff6635f8562dda6dc0fbd268f679.png"},92687:function(e,t,s){t.Z=s.p+"assets/images/SUBSCRIBE-85c834fcaaa6eed0eb6bd0b86a9a96fa.png"},6130:function(e,t,s){t.Z=s.p+"assets/images/UNSUBSCRIBE-bafcc7ea712e85f35476223766cd5572.png"},77671:function(e,t,s){t.Z=s.p+"assets/images/multiLevelWildcard-5891b52d18a7e2c766096b3c84009134.png"},50285:function(e,t,s){t.Z=s.p+"assets/images/singleLevelWildcard-91bc807966ddb3472020cd99e51ee06c.png"}}]);