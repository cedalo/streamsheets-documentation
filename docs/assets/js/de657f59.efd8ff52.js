"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[89047],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,d=p["".concat(l,".").concat(h)]||p[h]||f[h]||o;return n?a.createElement(d,i(i({ref:t},u),{},{components:n})):a.createElement(d,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9405:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=["components"],s={id:"tut-history",title:"Create data history",sidebar_label:"Historical data"},l=void 0,c={unversionedId:"tutorials/tut-history",id:"tutorials/tut-history",title:"Create data history",description:"Often it is essential to not only work with single real-time data points but to build a history and work with a series of values.",source:"@site/streamsheets/tutorials/history.md",sourceDirName:"tutorials",slug:"/tutorials/tut-history",permalink:"/streamsheets/next/tutorials/tut-history",tags:[],version:"current",frontMatter:{id:"tut-history",title:"Create data history",sidebar_label:"Historical data"},sidebar:"someSidebar",previous:{title:"Execute",permalink:"/streamsheets/next/tutorials/tut-execute"},next:{title:"IF Dependencies",permalink:"/streamsheets/next/tutorials/tut-if"}},u=[{value:"Using References",id:"using-references",children:[],level:2},{value:"Using Stack",id:"using-stack",children:[],level:2},{value:"Using Table Update",id:"using-table-update",children:[],level:2}],f={toc:u};function p(e){var t=e.components,s=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},f,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Often it is essential to not only work with single real-time data points but to build a history and work with a series of values.\nBesides using databases, you can store a finite amount of information within your running application. Check out database examples in the ",(0,o.kt)("a",{parentName:"p",href:"./tut-streams"},"stream function")," tutorials."),(0,o.kt)("h2",{id:"using-references"},"Using References"),(0,o.kt)("p",null,"A straightforward way to create not only a data history but a full-blown data table, which updates over time, can be done by understanding the core principle of the Streamsheet calculation process. Every sheet is calculated from left to right and from top to bottom. Consequently, cell A1 is calculated first, then B1, C1, etc., before the next rows follow. This concept allows us to use references to create a data history.\nCreate a table and reference the bottom of the table to the incoming data. Now add in every cell above one cell down facing references. Since a cell above another cell is calculated before the other, the reference is one step in the past. This way, the table will slowly but surely fill up with information. "),(0,o.kt)("iframe",{title:"vimeo-player",src:"https://player.vimeo.com/video/759887207?h=8999904148",width:"640",height:"440",frameborder:"0",allowfullscreen:!0}),(0,o.kt)("h2",{id:"using-stack"},"Using Stack"),(0,o.kt)("p",null,"The same result can be achieved by using the function ",(0,o.kt)("a",{parentName:"p",href:"../functions/stack/stackadd"},"STACKADD()"),"."),(0,o.kt)("p",null,"STACKADD() will add value with every step to the stack. When the created table is complete, it automatically deletes the oldest entry.\nOther stack functions could also help to keep your table up to date. (",(0,o.kt)("a",{parentName:"p",href:"../functions/stack/stackdrop"},"STACKDROP()"),", ",(0,o.kt)("a",{parentName:"p",href:"../functions/stack/stackfind"},"STACKFIND()"),", ",(0,o.kt)("a",{parentName:"p",href:"../functions/stack/stackupsert"},"STACKUPSERT()"),", ",(0,o.kt)("a",{parentName:"p",href:"../functions/stack/stacksort"},"STACKSORT()")," & ",(0,o.kt)("a",{parentName:"p",href:"../functions/stack/stackrotate"},"STACKROTATE()"),"))"),(0,o.kt)("img",{src:n(63362).Z,alt:"stackadd",width:"80%"}),(0,o.kt)("h2",{id:"using-table-update"},"Using Table Update"),(0,o.kt)("p",null,"A powerful function is the ",(0,o.kt)("a",{parentName:"p",href:"/streamsheets/next/functions/streamsheet/tableupdate"},"TABLE.UPDATE()")," function. It combines the general possibility of creating a simple table filled with historical data while adding further aggregation functionalities. "),(0,o.kt)("p",null,'Define a cell range to set your table size and define headers for each column in the first row of the table.\nDynamic Row and Column Indices make it possible to decide where a value is updated in the table.\nAs the function says, it is only updating an existing table by default. To create more rows or columns, use the parameters "PushRowat" and "PushColumnAt."\nFor example:'),(0,o.kt)("p",null," ",(0,o.kt)("inlineCode",{parentName:"p"},'=TABLE.UPDATE(A1:D30,1,NOW(),"time",-1,0)')),(0,o.kt)("p",null,' This function would lead to the creation of an entry of the function NOW() in the column for "time". If no such header is given, there won\'t be a creation.\nPushRowat = -1 allows the creation of the new row, but PushColumnat = 0 does not allow the creation of a new column.'))}p.isMDXComponent=!0},63362:function(e,t,n){t.Z=n.p+"assets/images/Version 2-7e0895f2d06baf3bea063a3a2409292c.png"}}]);