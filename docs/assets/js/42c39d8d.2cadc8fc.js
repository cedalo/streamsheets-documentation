"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[3476],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var i=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},s=Object.keys(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)t=s[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),m=c(t),u=o,h=m["".concat(l,".").concat(u)]||m[u]||p[u]||s;return t?i.createElement(h,r(r({ref:n},d),{},{components:t})):i.createElement(h,r({ref:n},d))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,r=new Array(s);r[0]=m;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,r[1]=a;for(var c=2;c<s;c++)r[c]=t[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6617:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>v,contentTitle:()=>u,default:()=>k,frontMatter:()=>m,metadata:()=>h,toc:()=>g});var i=t(3905),o=Object.defineProperty,s=Object.defineProperties,r=Object.getOwnPropertyDescriptors,a=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,d=(e,n,t)=>n in e?o(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,p=(e,n)=>{for(var t in n||(n={}))l.call(n,t)&&d(e,t,n[t]);if(a)for(var t of a(n))c.call(n,t)&&d(e,t,n[t]);return e};const m={id:"mc-monitoring-rest-api",title:"Monitoring REST API",sidebar_label:"Monitoring REST API \u2b50"},u=void 0,h={unversionedId:"mc-monitoring-rest-api",id:"version-2.5/mc-monitoring-rest-api",title:"Monitoring REST API",description:"This page describes the first version of the Monitoring REST API of the Management Center. This API will provide endpoints for retrieving monitoring information of Mosquitto broker instances that are connected to the Management Center instance.",source:"@site/management-center_versioned_docs/version-2.5/monitoring-rest-api.md",sourceDirName:".",slug:"/mc-monitoring-rest-api",permalink:"/management-center/mc-monitoring-rest-api",draft:!1,tags:[],version:"2.5",frontMatter:{id:"mc-monitoring-rest-api",title:"Monitoring REST API",sidebar_label:"Monitoring REST API \u2b50"},sidebar:"someSidebar",previous:{title:"Application Tokens REST API \u2b50",permalink:"/management-center/mc-application-tokens-rest-api"},next:{title:"HTTPS, TLS termination \u2b50",permalink:"/management-center/mc-https"}},v={},g=[{value:"API description \u2b50",id:"api-description-",level:2},{value:"Data format",id:"data-format",level:3},{value:"Endpoints",id:"endpoints",level:3},{value:"Connections",id:"connections",level:3},{value:"URL and HTTP methods",id:"url-and-http-methods",level:4},{value:"Response payload",id:"response-payload",level:4},{value:"Single Connection",id:"single-connection",level:3},{value:"URL and HTTP methods",id:"url-and-http-methods-1",level:4},{value:"Response payload",id:"response-payload-1",level:4},{value:"Clusters",id:"clusters",level:3},{value:"URL and HTTP methods",id:"url-and-http-methods-2",level:4},{value:"Response payload",id:"response-payload-2",level:4},{value:"Single Cluster",id:"single-cluster",level:3},{value:"URL and HTTP methods",id:"url-and-http-methods-3",level:4},{value:"Response payload",id:"response-payload-3",level:4},{value:"Authentication",id:"authentication",level:2},{value:"Versioning \u2b50",id:"versioning-",level:2}],f={toc:g};function k(e){var n,t=e,{components:o}=t,d=((e,n)=>{var t={};for(var i in e)l.call(e,i)&&n.indexOf(i)<0&&(t[i]=e[i]);if(null!=e&&a)for(var i of a(e))n.indexOf(i)<0&&c.call(e,i)&&(t[i]=e[i]);return t})(t,["components"]);return(0,i.kt)("wrapper",(n=p(p({},f),d),s(n,r({components:o,mdxType:"MDXLayout"}))),(0,i.kt)("p",null,"This page describes the first version of the Monitoring REST API of the Management Center. This API will provide endpoints for retrieving monitoring information of Mosquitto broker instances that are connected to the Management Center instance."),(0,i.kt)("admonition",p({},{type:"info"}),(0,i.kt)("p",{parentName:"admonition"},"Monitoring API can be accessed by users with a ",(0,i.kt)("em",{parentName:"p"},"viewer")," role and higher. ",(0,i.kt)("em",{parentName:"p"},"monitroingViewer")," user has exclusive rights which allow them to access theis REST API only.")),(0,i.kt)("h2",p({},{id:"api-description-"}),"API description \u2b50"),(0,i.kt)("h3",p({},{id:"data-format"}),"Data format"),(0,i.kt)("p",null,"The data format used by the Monitoring REST API is JSON."),(0,i.kt)("h3",p({},{id:"endpoints"}),"Endpoints"),(0,i.kt)("h3",p({},{id:"connections"}),"Connections"),(0,i.kt)("p",null,"This endpoint will retrieve the status of all brokers."),(0,i.kt)("h4",p({},{id:"url-and-http-methods"}),"URL and HTTP methods"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"URL: ",(0,i.kt)("inlineCode",{parentName:"li"},"/api/monitoring/brokers")),(0,i.kt)("li",{parentName:"ul"},"Method: ",(0,i.kt)("inlineCode",{parentName:"li"},"GET"))),(0,i.kt)("h4",p({},{id:"response-payload"}),"Response payload"),(0,i.kt)("p",null,"The response body contains the overview information of all brokers. Each broker provides additional metrics information like the number of clients connected, the number of subscriptions and the number of messages received and sent."),(0,i.kt)("p",null,"The response payload has the following structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "total": 2,\n  "brokers": [\n    {\n      "id": "mosquitto1",\n      "name": "Mosquitto 1 Test Instance",\n      "status": {\n        "timestamp": 1234567,\n        "connected": false,\n        "error": {\n          "errno": -61,\n          "code": "ECONNREFUSED",\n          "syscall": "connect",\n          "address": "127.0.0.1",\n          "port": 1891\n        }\n      }\n    },\n    {\n      "id": "mosquitto2",\n      "name": "Mosquitto 2 Test Instance",\n      "status": {\n        "timestamp": 1234567,\n        "connected": true\n      },\n      "metrics": {\n        "version": "mosquitto version 2.1.0",\n        "clients": {\n          "total": "3",\n          "active": "1",\n          "connected": "1"\n        },\n        "load": {\n          "publish": {\n            "sent": {\n              "1min": "89.24",\n              "5min": "37.59",\n              "15min": "26.32"\n            }\n          },\n          "sockets": {\n            "15min": "0.87",\n            "1min": "1.96",\n            "5min": "0.74"\n          },\n          "connections": {\n            "15min": "0.87",\n            "1min": "1.96",\n            "5min": "0.74"\n          },\n          "messages": {\n            "received": {\n              "1min": "13.69",\n              "5min": "5.34",\n              "15min": "3.45"\n            },\n            "sent": {\n              "1min": "106.56",\n              "5min": "45.82",\n              "15min": "33.12"\n            }\n          },\n          "bytes": {\n            "received": {\n              "1min": "406.86",\n              "5min": "154.90",\n              "15min": "124.23"\n            },\n            "sent": {\n              "1min": "3418.76",\n              "5min": "1371.17",\n              "15min": "885.65"\n            }\n          }\n        },\n        "messages": {\n          "stored": "37",\n          "received": "195425",\n          "sent": "1207818"\n        },\n        "store": {\n          "messages": {\n            "count": "37",\n            "bytes": "200"\n          }\n        },\n        "subscriptions": {\n          "count": "7"\n        },\n        "retained messages": {\n          "count": "37"\n        },\n        "publish": {\n          "messages": {\n            "sent": "1012830"\n          },\n          "bytes": {\n            "sent": "5919457"\n          }\n        },\n        "bytes": {\n          "received": "17444986",\n          "sent": "43697617"\n        },\n        "uptime": "5367950 seconds"\n      }\n    }\n  ]\n}\n')),(0,i.kt)("h3",p({},{id:"single-connection"}),"Single Connection"),(0,i.kt)("p",null,"This endpoint will retrieve the status of a single connection."),(0,i.kt)("h4",p({},{id:"url-and-http-methods-1"}),"URL and HTTP methods"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"URL: ",(0,i.kt)("inlineCode",{parentName:"li"},"/api/monitoring/brokers/<broker-id>")),(0,i.kt)("li",{parentName:"ul"},"Method: ",(0,i.kt)("inlineCode",{parentName:"li"},"GET"))),(0,i.kt)("h4",p({},{id:"response-payload-1"}),"Response payload"),(0,i.kt)("p",null,"The response body contains the detailed information of one single broker:"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "id": "mosquitto2",\n  "name": "Mosquitto 2 Test Instance",\n  "status": {\n    "timestamp": 1234567,\n    "connected": true\n  },\n  "metrics": {\n    "version": "mosquitto version 2.1.0",\n    "clients": {\n      "total": "3",\n      "active": "1",\n      "connected": "1"\n    },\n    "load": {\n      "publish": {\n        "sent": {\n          "1min": "89.24",\n          "5min": "37.59",\n          "15min": "26.32"\n        }\n      },\n      "sockets": {\n        "15min": "0.87",\n        "1min": "1.96",\n        "5min": "0.74"\n      },\n      "connections": {\n        "15min": "0.87",\n        "1min": "1.96",\n        "5min": "0.74"\n      },\n      "messages": {\n        "received": {\n          "1min": "13.69",\n          "5min": "5.34",\n          "15min": "3.45"\n        },\n        "sent": {\n          "1min": "106.56",\n          "5min": "45.82",\n          "15min": "33.12"\n        }\n      },\n      "bytes": {\n        "received": {\n          "1min": "406.86",\n          "5min": "154.90",\n          "15min": "124.23"\n        },\n        "sent": {\n          "1min": "3418.76",\n          "5min": "1371.17",\n          "15min": "885.65"\n        }\n      }\n    },\n    "messages": {\n      "stored": "37",\n      "received": "195425",\n      "sent": "1207818"\n    },\n    "store": {\n      "messages": {\n        "count": "37",\n        "bytes": "200"\n      }\n    },\n    "subscriptions": {\n      "count": "7"\n    },\n    "retained messages": {\n      "count": "37"\n    },\n    "publish": {\n      "messages": {\n        "sent": "1012830"\n      },\n      "bytes": {\n        "sent": "5919457"\n      }\n    },\n    "bytes": {\n      "received": "17444986",\n      "sent": "43697617"\n    },\n    "uptime": "5367950 seconds"\n  }\n}\n')),(0,i.kt)("h3",p({},{id:"clusters"}),"Clusters"),(0,i.kt)("p",null,"This endpoint will retrieve statuses of all the clusters."),(0,i.kt)("h4",p({},{id:"url-and-http-methods-2"}),"URL and HTTP methods"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"URL: ",(0,i.kt)("inlineCode",{parentName:"li"},"/api/monitoring/clusters")),(0,i.kt)("li",{parentName:"ul"},"Method: ",(0,i.kt)("inlineCode",{parentName:"li"},"GET"))),(0,i.kt)("h4",p({},{id:"response-payload-2"}),"Response payload"),(0,i.kt)("p",null,"The response contains a list of all available clusters plus an additional counter. Each cluster information contains the name, the description and a status of the cluster. The latter can be one of:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"active: the cluster is active and working"),(0,i.kt)("li",{parentName:"ul"},"degraded: the cluster is active, but not all nodes are healthy"),(0,i.kt)("li",{parentName:"ul"},"inactive: the cluster is inactive")),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "total": 3,\n  "clusters": [\n    {\n      "name": "mosquittotests1",\n      "description": "Mosquitto Test Cluster 1",\n      "status": {\n        "clusterstate": "active"\n      }\n    },\n    {\n      "name": "mosquittotests2",\n      "description": "Mosquitto Test Cluster 2",\n      "status": {\n        "clusterstate": "degraded"\n      }\n    },\n    {\n      "name": "mosquittotests3",\n      "description": "Mosquitto Test Cluster 3",\n      "status": {\n        "clusterstate": "inactive"\n      }\n    },\n  ]\n}\n')),(0,i.kt)("h3",p({},{id:"single-cluster"}),"Single Cluster"),(0,i.kt)("p",null,"This endpoint will retrieve the status of a single cluster."),(0,i.kt)("h4",p({},{id:"url-and-http-methods-3"}),"URL and HTTP methods"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"URL: ",(0,i.kt)("inlineCode",{parentName:"li"},"/api/monitoring/clusters")),(0,i.kt)("li",{parentName:"ul"},"Method: ",(0,i.kt)("inlineCode",{parentName:"li"},"GET"))),(0,i.kt)("h4",p({},{id:"response-payload-3"}),"Response payload"),(0,i.kt)("p",null,"The response body contains the detailed information of one single cluster. For every cluster the same information is included as in the \u201cClusters\u201d endpoint plus additional detail information, i.e., specific information about each node in the cluster."),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "name": "mosquittotests1",\n  "description": "Mosquitto Test Cluster 1",\n  "status": {\n    "clusterstate": "active"\n  },\n  "details": {\n    "nodes": [\n      {\n        "address": "172.20.1.1",\n        "port": 7000,\n        "nodeid": 1,\n        "broker": "mosquitto1",\n        "leader": true\n      },\n      {\n        "address": "172.20.1.2",\n        "port": 7000,\n        "nodeid": 2,\n        "broker": "mosquitto2",\n        "leader": false\n      },\n      {\n        "address": "172.20.1.3",\n        "port": 7000,\n        "nodeid": 2,\n        "broker": "mosquitto3",\n        "leader": false\n      }\n    ]\n  }\n}\n')),(0,i.kt)("h2",p({},{id:"authentication"}),"Authentication"),(0,i.kt)("p",null,"The Monitoring REST API will provide the same authentication mechanism that all other existing REST APIs of the Management Center use. This authentication mechanism is described in the REST API page. You can also use Application Tokens to authenticate described on the separate page as well."),(0,i.kt)("h2",p({},{id:"versioning-"}),"Versioning \u2b50"),(0,i.kt)("p",null,"In order to be REST compliant the Media Type Versioning will be implemented. This means that the version number will not be included in the URL, but will be provided by the client when accessing the API by the Accept header. "),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{}),"application/json;version=1\napplication/json;version=2\napplication/json;version=3\n")),(0,i.kt)("p",null,"etc."),(0,i.kt)("p",null,"The first version number will be ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),". Whenever in future there is a breaking change to the API a new major version will be released."))}k.isMDXComponent=!0}}]);