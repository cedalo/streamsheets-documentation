"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[74802],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||r;return n?o.createElement(h,i(i({ref:t},u),{},{components:n})):o.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},30619:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>m,default:()=>y,frontMatter:()=>d,metadata:()=>h,toc:()=>g});var o=n(3905),a=Object.defineProperty,r=Object.defineProperties,i=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,u=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,c=(e,t)=>{for(var n in t||(t={}))l.call(t,n)&&u(e,n,t[n]);if(s)for(var n of s(t))p.call(t,n)&&u(e,n,t[n]);return e};const d={id:"single-node-openshift",title:"Openshift Single Node",sidebar_label:"Single Node"},m=void 0,h={unversionedId:"deployment/on-premises/deployment/installation/openshift/single-node-openshift",id:"version-3.0/deployment/on-premises/deployment/installation/openshift/single-node-openshift",title:"Openshift Single Node",description:"This setup will deploy Single node Mosquitto broker and a Platform portal on a managed Openshift cluster using Helm charts. This deployment by default uses a Persistent volumes for persistence, and also deploys a service called mosquitto-loadbalancer to act as a connection endpoint. Platform pod is deployed as a deployment entity and mosquitto pod as statefuleset. This setup has been tested on Open source Openshift OKD cluster. However, feel free to deploy on your own Openshift infrastructure. Openshift offers lot of different features on top of Kubernetes. For details on Openshift and OKD you can refer to the Introduction page. For deploying a full fledged OKD cluster,  you can follow the official Openshift OKD installation documentation.  OKD can be mainly installed in two different fashion:",source:"@site/mosquitto_versioned_docs/version-3.0/deployment/on-premises/deployment/installation/openshift/single-node-openshift.md",sourceDirName:"deployment/on-premises/deployment/installation/openshift",slug:"/deployment/on-premises/deployment/installation/openshift/single-node-openshift",permalink:"/mosquitto/deployment/on-premises/deployment/installation/openshift/single-node-openshift",draft:!1,tags:[],version:"3.0",frontMatter:{id:"single-node-openshift",title:"Openshift Single Node",sidebar_label:"Single Node"},sidebar:"someSidebar",previous:{title:"Introduction",permalink:"/mosquitto/deployment/on-premises/deployment/installation/openshift/introduction-openshift"},next:{title:"High Availability",permalink:"/mosquitto/deployment/on-premises/deployment/installation/openshift/high-availability-openshift"}},f={},g=[{value:"Openshift Cluster Setup and Configuration",id:"openshift-cluster-setup-and-configuration",level:2},{value:"Dependencies and Prerequisites",id:"dependencies-and-prerequisites",level:3},{value:"Installation",id:"installation",level:2},{value:"Installation using Helm Charts:",id:"installation-using-helm-charts",level:3},{value:"Connect to Broker",id:"connect-to-broker",level:2}],k={toc:g};function y(e){var t,a=e,{components:u}=a,d=((e,t)=>{var n={};for(var o in e)l.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&s)for(var o of s(e))t.indexOf(o)<0&&p.call(e,o)&&(n[o]=e[o]);return n})(a,["components"]);return(0,o.kt)("wrapper",(t=c(c({},k),d),r(t,i({components:u,mdxType:"MDXLayout"}))),(0,o.kt)("p",null,"This setup will deploy Single node Mosquitto broker and a Platform portal on a managed Openshift cluster using Helm charts. This deployment by default uses a Persistent volumes for persistence, and also deploys a service called mosquitto-loadbalancer to act as a connection endpoint. Platform pod is deployed as a deployment entity and mosquitto pod as statefuleset. This setup has been tested on Open source Openshift OKD cluster. However, feel free to deploy on your own Openshift infrastructure. Openshift offers lot of different features on top of Kubernetes. For details on Openshift and OKD you can refer to the Introduction page. For deploying a full fledged OKD cluster,  you can follow the official Openshift OKD installation ",(0,o.kt)("a",c({parentName:"p"},{href:"https://docs.okd.io/"}),"documentation"),".  OKD can be mainly installed in two different fashion:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"IPI: Installer Provisioned Infrastructure"),(0,o.kt)("li",{parentName:"ol"},"UPI: User Provisioned Infrastructure")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Installer Provisioned Infrastructure:"),"  Installer Provisioned Infrastructure (IPI) in OKD/OpenShift refers to a deployment model where the installation program provisions and manages all the components of the infrastructure needed to run the OpenShift cluster. This includes the creation of virtual machines, networking rules, load balancers, and storage components, among others. The installer uses cloud-specific APIs to automatically set up the infrastructure, making the process faster, more standardized, and less prone to human error compared to manually setting up the environment."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"User Provisioned Infrastructure:"),"  User Provisioned Infrastructure (UPI) in OKD/OpenShift is a deployment model where users manually create and manage all the infrastructure components required to run the OpenShift cluster. This includes setting up virtual machines or physical servers, configuring networking, load balancers, storage, and any other necessary infrastructure components. Unlike the Installer Provisioned Infrastructure (IPI) model, where the installation program automatically creates and configures the infrastructure, UPI offers users complete control over the deployment process."),(0,o.kt)("p",null,"You are free to choose your own method among the two. You can also choose the cloud provider you want to deploy your solution on. Openshift OKD supports number of different cloud providers and also gives you an option to do bare-metal installation. In this deployment we went forward with UPI and deployed our infrastructure on Google Cloud Platform (GCP) using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Private cluster")," method mentioned ",(0,o.kt)("a",c({parentName:"p"},{href:"https://docs.okd.io/latest/installing/installing_gcp/installing-gcp-private.html"}),"here"),". Therefore, this solution is developed and tested on GCP, however it is unlikely that basic infrastructure would differ across different cloud providers."),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"private cluster")," in GCP ensures that the nodes are isolated in a private network, reducing exposure to the public internet but again you are free to choose your own version of infrastructure supported by Openshift OKD.  We will briefly discuss how the infrastructure looks like in our case so that you can have a reference for your own infrastructure."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"OKD Infrastructure (During provisioning)",src:n(31070).Z,title:"OKD Infrastructure on GCP during provisioning",width:"751",height:"510"})),(0,o.kt)("p",null,"Figure 1: OKD Infrastructure on GCP during provisioning"),(0,o.kt)("p",null,"The diagram depicts the deployment process for our OCP cluster on GCP, starting with the establishment of a bastion host. Bastion host is where we'll execute commands to configure the bootstrap node, then the Master nodes, and finally, the worker nodes in a separate subnet. Before initiating the bootstrap procedure, we set up the essential infrastructure components, including networks, subnetworks, an IAM service account, an IAM project, a Private DNS zone, Load balancers, Cloud NATs, and a Cloud Router."),(0,o.kt)("p",null,"Upon completing the bootstrap phase, we dismantled the bootstrap components from the cluster. Subsequently, we focussed on creating the worker nodes. After the worker nodes are operational, we set up a reverse proxy on the bastion host to facilitate local access to the OCP Console UI through our browser. To conclude, we confirm that all cluster operators are marked as \u2018Available\u2019. Once we done with the provisioning the architecture would look something like Figure 2. More detailed steps can be found in the official documentation.  These discussed steps are all part of the official  ",(0,o.kt)("a",c({parentName:"p"},{href:"https://docs.okd.io/latest/installing/installing_gcp/installing-gcp-private.html"}),"documentation"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"OKD Infrastructure (Post provisioning)",src:n(87083).Z,title:"OKD Infrastructure on GCP post provisioning ",width:"684",height:"676"})),(0,o.kt)("p",null,"Figure 2: OKD Infrastructure on GCP post provisioning"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Note:")," This deployment involves setting up a private cluster, which means access to the cluster is limited to through the bastion host. Consequently, we avoid using public DNS for this installation, relying solely on a private DNS zone. To facilitate access to the external UI, we will employ a reverse proxy for this purpose."),(0,o.kt)("h2",c({},{id:"openshift-cluster-setup-and-configuration"}),"Openshift Cluster Setup and Configuration"),(0,o.kt)("h3",c({},{id:"dependencies-and-prerequisites"}),"Dependencies and Prerequisites"),(0,o.kt)("p",null,"As we chose to use a private cluster, therefore master and worker nodes would not have access to the internet. Therefore, we will install the dependencies on the bastion node and would also deploy the application from the bastion node."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Prerequisites")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Running Openshift cluster by following the official documentation guide of ",(0,o.kt)("a",c({parentName:"p"},{href:"https://docs.okd.io/"}),"Openshift")),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Create a namespace")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Once you are connected to your Openshift setup and can access the cluster using ",(0,o.kt)("inlineCode",{parentName:"li"},"oc")," tool. Create a namespace in which you would want to deploy the application. The deployment folder is pre-configured for the namespace named ",(0,o.kt)("inlineCode",{parentName:"li"},"singlenode"),". If you want to use the default configuration you can create a namespace named ",(0,o.kt)("inlineCode",{parentName:"li"},"singlenode")," using the below command:"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"oc create namespace singlenode")),(0,o.kt)("li",{parentName:"ul"},"If you want to use a different namespace, use the command: ",(0,o.kt)("inlineCode",{parentName:"li"},"oc create namespace <your-custom-namespace>"),".  Replace ",(0,o.kt)("inlineCode",{parentName:"li"},"<your-custom-namespace>")," with the name of the namespace you want to configure.")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"On your bastion node"),": Check the allocated user id for your namespace after you already created your desired namespace. You can check the allocated user id for your namespace by running the command ",(0,o.kt)("inlineCode",{parentName:"p"},"oc describe namespace <namespace>")," where ",(0,o.kt)("inlineCode",{parentName:"p"},"<namespace>")," is the namespace you chose while creating the namespace. For default namespace i.e ",(0,o.kt)("inlineCode",{parentName:"p"},"singlenode"),", the command would be ",(0,o.kt)("inlineCode",{parentName:"p"},"oc describe namespace singlenode"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",c({parentName:"pre"},{}),"  - The above command would output a response.  A sample output could be like:\n")),(0,o.kt)("pre",null,(0,o.kt)("code",c({parentName:"pre"},{}),"     Name:         singlenode\n     Labels:       kubernetes.io/metadata.name=multinode\n                   pod-security.kubernetes.io/audit=restricted\n                   pod-security.kubernetes.io/audit-version=v1.24\n                   pod-security.kubernetes.io/warn=restricted\n                   pod-security.kubernetes.io/warn-version=v1.24\n     Annotations:  openshift.io/sa.scc.mcs: s0:c27,c4\n                   openshift.io/sa.scc.supplemental-groups: 1000710000/10000\n                   openshift.io/sa.scc.uid-range: 1000710000/10000\n     Status:       Active\n\n     No resource quota.\n     No LimitRange resource.\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Note down the value for ",(0,o.kt)("inlineCode",{parentName:"li"},"openshift.io/sa.scc.uid-range"),". The noted user id will now be used to install the helm chart. This user id needs to be propagated to the pods so that they could have adequate permissions while execution without needing additional security policy. After checking the environment prerequisites are set, follow we will prepare the Mosquitto environment:")),(0,o.kt)("h2",c({},{id:"installation"}),"Installation"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Prerequisites"),":"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Openshift Cluster should be up and running. If you are yet to setup the cluster, refer ",(0,o.kt)("a",c({parentName:"li"},{href:"#kubernetes-cluster-setup"}),"Kubernetes Cluster Setup"),"."),(0,o.kt)("li",{parentName:"ol"},"You have successfully created the namespace")),(0,o.kt)("p",null,"Once Openshift cluster is up and running then you can now follow these steps to install the Single node Mosquitto broker setup:"),(0,o.kt)("h3",c({},{id:"installation-using-helm-charts"}),"Installation using Helm Charts:"),(0,o.kt)("p",null,"Helm charts offer a comprehensive solution for configuring various Kubernetes resources\u2014including stateful sets, deployment templates, services, and service accounts\u2014through a single command, streamlining the deployment process.When the user downloads helm package from the Platform license key is already part of the package."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Get the helm chart")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Make sure you have the helm chart  ",(0,o.kt)("inlineCode",{parentName:"li"},"mosquitto-3.0-platform-3.0-openshift-sn.tgz"),"."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Install Helm Chart:")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Use the following ",(0,o.kt)("inlineCode",{parentName:"li"},"helm install")," command to deploy the Mosquitto application on to your Kubernetes cluster. Replace ",(0,o.kt)("inlineCode",{parentName:"li"},"<release-name>")," with the desired name for your Helm release and ",(0,o.kt)("inlineCode",{parentName:"li"},"<namespace>")," with your chosen Kubernetes namespace:",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",c({parentName:"pre"},{className:"language-bash"}),"helm install <release-name>  mosquitto-3.0-platform-3.0-openshift-sn.tgz -n <namespace> --set runAsUser=<namespace-alloted-user-id> --set imageCredentials.registry=registry.cedalo.com --set imageCredentials.username=<username> --set imageCredentials.password=<password> --set imageCredentials.email=<email> \n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"namespace"),": Set it to the namespace of your deployment."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"imageCredentials.username"),": Your docker username provided by Cedalo team."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"imageCredentials.password"),": Your docker password provided by Cedalo team."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"imageCredentials.email"),": Registered e-mail for accessing docker registry."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"namespace-alloted-user-id"),": Set it to user id you noted through ",(0,o.kt)("inlineCode",{parentName:"li"},"oc describe namespace singlenode")," command."),(0,o.kt)("li",{parentName:"ul"},"Sample example: If  your arbitrary release name is ",(0,o.kt)("inlineCode",{parentName:"li"},"sample-release-name"),", your user id for your namespace is ",(0,o.kt)("inlineCode",{parentName:"li"},"1000710000"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"username"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"password")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"email")," be ",(0,o.kt)("inlineCode",{parentName:"li"},"demo-username"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"demo-password")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"demo@gmail.com")," then your helm installation command should be:",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",c({parentName:"pre"},{className:"language-bash"}),"   helm install sample-release-name  mosquitto-3.0-platform-3.0-openshift-sn.tgz  -n singlenode --set runAsUser=1000710000 --set imageCredentials.registry=registry.cedalo.com --set imageCredentials.username=demo-username --set imageCredentials.password=demo-password --set imageCredentials.email=demo@gmail.com \n"))))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"You can monitor the running pods using the ",(0,o.kt)("inlineCode",{parentName:"p"},"oc get pods -o wide -n <namespace>")," command. To observe the opened ports use ",(0,o.kt)("inlineCode",{parentName:"p"},"oc get svc -n <namespace>"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"To uninstall the setup:\n",(0,o.kt)("inlineCode",{parentName:"p"},"helm uninstall <release-name> -n <namespace>")))),(0,o.kt)("p",null,"Your Mosquitto setup is now running  with a single mosquitto nodes and the Platform portal."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Further Useful Commands")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"If you want to change mosquitto.conf, you can do so by uncompressing the helm chart, making the required changes and packaging the helm charts again. The detailed procedure is mentioned below:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tar -xzvf mosquitto-3.0-platform-3.0-openshift-sn.tgz")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"cd mosquitto-3.0-platform-3.0-openshift-sn/files/")),(0,o.kt)("li",{parentName:"ul"},"Make changes to ",(0,o.kt)("inlineCode",{parentName:"li"},"mosquitto.conf")," and save it."),(0,o.kt)("li",{parentName:"ul"},"Go back to the parent directory:\n",(0,o.kt)("inlineCode",{parentName:"li"},"cd ../")),(0,o.kt)("li",{parentName:"ul"},"Package the helm chart to its original form using:\n",(0,o.kt)("inlineCode",{parentName:"li"},"helm package mosquitto-3.0-platform-3.0-openshift-sn")),(0,o.kt)("li",{parentName:"ul"},"Uninstall helm package\n",(0,o.kt)("inlineCode",{parentName:"li"},"helm uninstall <release-name> -n <namespace>")),(0,o.kt)("li",{parentName:"ul"},"Reinstall the helm package using the same ",(0,o.kt)("inlineCode",{parentName:"li"},"helm install")," command you used the first time or do a ",(0,o.kt)("inlineCode",{parentName:"li"},"helm upgrade"),"."))),(0,o.kt)("li",{parentName:"ul"},"You can similarly change any other configuration like ",(0,o.kt)("inlineCode",{parentName:"li"},"sql-bridge")," configuration, repackage the helm chart and install to bring changes into effect.")))),(0,o.kt)("h2",c({},{id:"connect-to-broker"}),"Connect to Broker"),(0,o.kt)("p",null,"Once your setup is ready, you can access the mosquitto brokers using the external ip of the mosquitto service.\nGo to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Client Account"),' menu on the Platform portal and create a new client to connect from. Make sure to assign a role, like the default "client" role, to allow your client to publish and/or subscribe to topics.\nNow you can connect to the Mosquitto cluster. You can access it either with connecting it directly to worker node running the haproxy pod along with a service exposed at port 1883:'),(0,o.kt)("p",null,"To get the external ip of Mosquitto service:\n",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl get service mosquitto-loadbalancer -n <namespace>")),(0,o.kt)("p",null,"In this example command we use Mosquitto Sub to subscribe onto all topics:\n",(0,o.kt)("inlineCode",{parentName:"p"},"mosquitto_sub -h <external-ip-of-mosquitto-loadbalancer> -p 1883 -u <username> -P <password> -t '#'")),(0,o.kt)("p",null,"Make sure to replace your IP, username and password."))}y.isMDXComponent=!0},31070:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/okd-infrastructure-1-bba8c29af6e08db7c6f3e61d79bfd615.png"},87083:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/okd-infrastructure-2-abe5236cfef5147cd3d552b6886cc976.png"}}]);