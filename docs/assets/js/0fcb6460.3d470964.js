"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[44598],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>p});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(n),p=r,h=m["".concat(s,".").concat(p)]||m[p]||d[p]||i;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},57176:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>p,default:()=>v,frontMatter:()=>m,metadata:()=>h,toc:()=>k});var a=n(3905),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,u=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,d=(e,t)=>{for(var n in t||(t={}))s.call(t,n)&&u(e,n,t[n]);if(o)for(var n of o(t))c.call(t,n)&&u(e,n,t[n]);return e};const m={id:"overview-clusters",title:"Cluster Overview",sidebar_label:"Cluster Overview"},p="Cluster Architecture of Cedalo Pro Mosquitto Broker",h={unversionedId:"clustering/overview-clusters",id:"version-3.0/clustering/overview-clusters",title:"Cluster Overview",description:"Introduction",source:"@site/mosquitto_versioned_docs/version-3.0/clustering/clusteroverview.md",sourceDirName:"clustering",slug:"/clustering/overview-clusters",permalink:"/mosquitto/3.0/clustering/overview-clusters",draft:!1,tags:[],version:"3.0",frontMatter:{id:"overview-clusters",title:"Cluster Overview",sidebar_label:"Cluster Overview"},sidebar:"someSidebar",previous:{title:"Platform - Configure Broker",permalink:"/mosquitto/3.0/deployment/on-premises/configure-broker-onpremises"},next:{title:"Setting Up HA Clusters",permalink:"/mosquitto/3.0/clustering/setting-up-ha-clusters"}},g={},k=[{value:"Introduction",id:"introduction",level:2},{value:"Cluster Modes",id:"cluster-modes",level:2},{value:"1. High Availability Mode (Active-Passive)",id:"1-high-availability-mode-active-passive",level:3},{value:"2. Dynamic-Security Sync Mode (Active-Active)",id:"2-dynamic-security-sync-mode-active-active",level:3},{value:"Choosing the Cluster Mode",id:"choosing-the-cluster-mode",level:3},{value:"Cluster Architecture",id:"cluster-architecture",level:2},{value:"Overview",id:"overview",level:3},{value:"Cluster Operation with Raft Consensus Algorithm",id:"cluster-operation-with-raft-consensus-algorithm",level:3},{value:"Cluster Architecture Diagram",id:"cluster-architecture-diagram",level:3},{value:"Conclusion",id:"conclusion",level:2}],y={toc:k};function v(e){var t,r=e,{components:u}=r,m=((e,t)=>{var n={};for(var a in e)s.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&o)for(var a of o(e))t.indexOf(a)<0&&c.call(e,a)&&(n[a]=e[a]);return n})(r,["components"]);return(0,a.kt)("wrapper",(t=d(d({},y),m),i(t,l({components:u,mdxType:"MDXLayout"}))),(0,a.kt)("h1",d({},{id:"cluster-architecture-of-cedalo-pro-mosquitto-broker"}),"Cluster Architecture of Cedalo Pro Mosquitto Broker"),(0,a.kt)("h2",d({},{id:"introduction"}),"Introduction"),(0,a.kt)("p",null,"Pro Mosquittos cluster feature enables the creation of different types of clusters of Pro Mosquitto nodes with a single leader and multiple followers. This architecture ensures that the broker remains available even if one node fails or goes offline. "),(0,a.kt)("h2",d({},{id:"cluster-modes"}),"Cluster Modes"),(0,a.kt)("p",null,"The Mosquitto cluster operates in two distinct modes, both of which require a minimum of three brokers to ensure data synchronization in the event of a broker failure. "),(0,a.kt)("h3",d({},{id:"1-high-availability-mode-active-passive"}),"1. High Availability Mode (Active-Passive)"),(0,a.kt)("p",null,"In High Availability mode, the cluster functions as an ",(0,a.kt)("strong",{parentName:"p"},"active-passive")," setup. This means that only one node is active at any given time, while the remaining nodes act as failover nodes. Key features of this mode include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Active node synchronization"),": The active node continuously synchronizes MQTT session information and authentication data with the follower nodes."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Seamless failover"),": If the active node fails, a follower node takes over as the leader, allowing clients to reconnect as if nothing changed."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Client-to-client communication"),": This mode supports communication between clients connected to the broker.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Best suited for:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Client-to-client communication"),": Ideal when your MQTT clients need to exchange messages directly with each other. This mode ensures all session states and messages are synchronized across the cluster."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Complete MQTT session synchronization"),": Ensures that if the active node fails, clients can reconnect to the new leader with their session state fully preserved."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"High message delivery reliability"),": Provides seamless failover without data loss, ensuring reliable message delivery.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Recommended for:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use cases where reliable message delivery and session persistence are critical.")),(0,a.kt)("h3",d({},{id:"2-dynamic-security-sync-mode-active-active"}),"2. Dynamic-Security Sync Mode (Active-Active)"),(0,a.kt)("p",null,"Dynamic-Security Sync mode operates as an ",(0,a.kt)("strong",{parentName:"p"},"active-active")," cluster, where all nodes can accept client connections simultaneously. Key characteristics of this mode include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Dynamic security synchronization"),": Only role-based access control (dynamic security authentication) data is synchronized between nodes, not MQTT session data."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"No client-to-client communication"),": Clients can connect to any node and data flows only to a backend service.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Best suited for:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"High throughput applications"),": Distributes client load across multiple nodes, improving performance and handling a large number of simultaneous connections."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Client-to-backend communication"),": Perfectly suited for data collection scenarios where devices send telemetry data to a backend (e.g., monitoring systems, IoT sensor data collection). Works well when MQTT clients do not need to communicate with each other but need to send data to a backend service or data processing pipeline. "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Simplified scalability"),": Can be scaled effortlessly, enabling the addition of nodes to accommodate increased load.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Considerations:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Limited client interaction"),": Clients cannot directly communicate with each other, which limits collaborative use cases.")),(0,a.kt)("h3",d({},{id:"choosing-the-cluster-mode"}),"Choosing the Cluster Mode"),(0,a.kt)("p",null,"When deciding on a cluster mode for your Mosquitto broker setup, consider the following circumstances:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Client Communication Needs"),": If clients need to communicate with each other directly, opt for a mode that supports this feature."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Session Synchronization Requirements"),": Choose a mode that ensures session state is fully synchronized if message reliability and seamless failover are critical."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Throughput and Load Distribution"),": For high-throughput applications, consider a mode that allows multiple clients to connect simultaneously without bottlenecks."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Backend Interaction"),": If clients primarily send data to a backend without needing to interact with each other, select a mode focused on optimizing backend communication."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Scalability"),": Assess how easy it is to scale the cluster with the chosen mode, particularly if your system requires handling a large number of connections.")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Criteria"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Full Sync Mode (Active-Passive)"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Dynamic-Security Sync Mode (Active-Active)"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"td"},"Client-to-Client Communication")),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Supported (clients can interact with each other)"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Not supported (clients interact with backend only)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"td"},"Session State Synchronization")),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Fully synchronized"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Role-based access control synchronized")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"td"},"Failover Handling")),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Seamless client reconnection with full state"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Client reconnection without session state")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"td"},"Load Distribution")),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"All clients connect to the leader node"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Clients can connect to any node")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),(0,a.kt)("strong",{parentName:"td"},"Scalability")),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Limited by leader's capacity"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"High scalability, balanced load")))),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Criteria/Setup"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Single Node"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"HA - Full Sync (Active-Passive)"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"HA - Dynamic-Security Sync (Active-Active)"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"All Nodes Available"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"\u2705"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"\u274c Only leader"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"MQTT Session Synchronization"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Not needed"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"\u2705"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"\u274c")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Authentication & Authorization Sync"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Not needed"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"\u2705"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"\u2705")))),(0,a.kt)("h2",d({},{id:"cluster-architecture"}),"Cluster Architecture"),(0,a.kt)("h3",d({},{id:"overview"}),"Overview"),(0,a.kt)("p",null,"The Mosquitto cluster architecture comprises a minimum of three broker nodes to maintain high availability and data consistency. Each cluster setup includes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"A leader node")," that manages the active connections."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Two or more follower nodes")," that are available as failovers to take over as the leader if needed.")),(0,a.kt)("p",null,"If the cluster state degrades to having only a single node available, clients will not be able to connect until at least two nodes are restored."),(0,a.kt)("h3",d({},{id:"cluster-operation-with-raft-consensus-algorithm"}),"Cluster Operation with Raft Consensus Algorithm"),(0,a.kt)("p",null,"The Mosquitto broker cluster uses the ",(0,a.kt)("strong",{parentName:"p"},"Raft")," consensus algorithm to maintain consistency and reliability across the nodes. Consensus is a fundamental problem in fault-tolerant distributed systems, where multiple servers must agree on shared values. Here\u2019s a summary of how the cluster operates using the Raft algorithm:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Consensus Agreement"),": Raft ensures that all servers in the cluster agree on values. Once a decision is made, it is final and cannot be undone."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Fault Tolerance"),": Raft will only make progress if a majority of servers are available. For example, in a cluster of 5 nodes, the system can continue to operate even if up to 2 nodes fail or are not reachable. If more servers fail, the cluster stops making progress but will not produce incorrect results."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Replicated State Machines"),": Each server in the cluster maintains a replicated state machine and a log. These mechanisms help ensure that even in the case of node failures, the cluster maintains data integrity and provides consistent operations."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Majority"),': Majority is a key component in the cluster design. Only servers, which detect to be a working cluster and are a majority will continue to allow connections. This is especially important in case of network downtimes, where nodes may create two clusters instead of one. Only the set of nodes which is in the majority will be available and therefore only one "truth" is created. ')),(0,a.kt)("p",null,"This approach to using Raft consensus makes the Mosquitto cluster robust, ensuring that even in cases of node failures, the data remains consistent, and the overall system behavior is predictable. "),(0,a.kt)("h3",d({},{id:"cluster-architecture-diagram"}),"Cluster Architecture Diagram"),(0,a.kt)("p",null,"The diagrams below illustrate the suggested architecture for the two cluster modes. Each setup includes three broker nodes operating Mosquitto and a fourth node running the ",(0,a.kt)("strong",{parentName:"p"},"Mosquitto Management Center (MMC)"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Figure 1: High Availability Mode")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("img",{alt:"High Availability Mode",src:n(5980).Z,width:"1138",height:"805"}))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Figure 2: Dynamic-Security Sync Mode")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("img",{alt:"Dynamic-Security Sync Mode",src:n(75840).Z,width:"1000",height:"707"})))),(0,a.kt)("h2",d({},{id:"conclusion"}),"Conclusion"),(0,a.kt)("p",null,"The Cedalo Mosquitto high-availability cluster, built on the RAFT protocol, offers robust failover capabilities and flexible clustering options. By choosing the appropriate cluster mode\u2014",(0,a.kt)("strong",{parentName:"p"},"High Availability")," for client-to-client communication or ",(0,a.kt)("strong",{parentName:"p"},"Dynamic-Security Sync")," for isolated clients\u2014you can ensure that your MQTT broker setup is resilient, scalable, and tailored to your specific use cases."))}v.isMDXComponent=!0},75840:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/ha-dynsec-05a385ef5d8b4d065f3da4316d7eefaf.png"},5980:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/hamap-60b6711078659a8cc4bebb8b3ba79a8a.png"}}]);