"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[3834],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),u=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(r),d=a,f=m["".concat(p,".").concat(d)]||m[d]||s[d]||l;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},78887:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>b,contentTitle:()=>d,default:()=>k,frontMatter:()=>m,metadata:()=>f,toc:()=>g});var n=r(3905),a=Object.defineProperty,l=Object.defineProperties,o=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,c=(e,t,r)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,s=(e,t)=>{for(var r in t||(t={}))p.call(t,r)&&c(e,r,t[r]);if(i)for(var r of i(t))u.call(t,r)&&c(e,r,t[r]);return e};const m={id:"hextobin",title:"HEX.TO.BIN",hide_title:!0},d=void 0,f={unversionedId:"functions/Engineering/hextobin",id:"version-3.0/functions/Engineering/hextobin",title:"HEX.TO.BIN",description:"HEX.TO.BIN",source:"@site/streamsheets_versioned_docs/version-3.0/functions/Engineering/hextobin.md",sourceDirName:"functions/Engineering",slug:"/functions/Engineering/hextobin",permalink:"/streamsheets/functions/Engineering/hextobin",draft:!1,tags:[],version:"3.0",frontMatter:{id:"hextobin",title:"HEX.TO.BIN",hide_title:!0},sidebar:"someSidebar",previous:{title:"FLOAT.TO.HEX",permalink:"/streamsheets/functions/Engineering/floattohex"},next:{title:"HEX.TO.DEC",permalink:"/streamsheets/functions/Engineering/hextodec"}},b={},g=[],h={toc:g};function k(e){var t,r=e,{components:a}=r,c=((e,t)=>{var r={};for(var n in e)p.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&i)for(var n of i(e))t.indexOf(n)<0&&u.call(e,n)&&(r[n]=e[n]);return r})(r,["components"]);return(0,n.kt)("wrapper",(t=s(s({},h),c),l(t,o({components:a,mdxType:"MDXLayout"}))),(0,n.kt)("h1",null,"HEX.TO.BIN"),(0,n.kt)("p",null,"Converts a hexadecimal number to binary."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Syntax")),(0,n.kt)("p",null,"=HEX.TO.BIN(Number, ","[","Places","]",")"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Arguments")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),"Number"),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"Number"),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"The hexadecimal number to convert.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),"Places (optional)"),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"Number or Error"),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"The number of characters to use for returned value. If value has less characters then it is padded with leading zeros.")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Return")),(0,n.kt)("p",null,"The binary number or a #NUM! ",(0,n.kt)("a",s({parentName:"p"},{href:"../../other/errorcodes"}),"error")," if given number is not a valid hexadecimal number. The #VALUE! ",(0,n.kt)("a",s({parentName:"p"},{href:"../../other/errorcodes"}),"error")," is returned if specified places is not numeric or negative."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Examples")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Formula"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Result"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Comment"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("pre",null,(0,n.kt)("code",null,'=HEX.TO.BIN("F")'))),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"1111"),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"converts hexadecimal F to binary")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("pre",null,(0,n.kt)("code",null,'=HEX.TO.BIN("F", 6)'))),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"001111"),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"converts hexadecimal F to binary with 6 characters")))))}k.isMDXComponent=!0}}]);