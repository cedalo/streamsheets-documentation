"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[5477],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var i=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},s=Object.keys(e);for(i=0;i<s.length;i++)a=s[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)a=s[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=i.createContext({}),c=function(e){var t=i.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),m=c(a),h=n,d=m["".concat(l,".").concat(h)]||m[h]||u[h]||s;return a?i.createElement(d,o(o({ref:t},p),{},{components:a})):i.createElement(d,o({ref:t},p))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,o=new Array(s);o[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:n,o[1]=r;for(var c=2;c<s;c++)o[c]=a[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,a)}m.displayName="MDXCreateElement"},76279:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>b,contentTitle:()=>h,default:()=>v,frontMatter:()=>m,metadata:()=>d,toc:()=>f});var i=a(3905),n=Object.defineProperty,s=Object.defineProperties,o=Object.getOwnPropertyDescriptors,r=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,p=(e,t,a)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,u=(e,t)=>{for(var a in t||(t={}))l.call(t,a)&&p(e,a,t[a]);if(r)for(var a of r(t))c.call(t,a)&&p(e,a,t[a]);return e};const m={id:"manpage-mqtt",title:"MQTT man page",sidebar_label:"MQTT"},h=void 0,d={unversionedId:"manpage-mqtt",id:"version-2.0/manpage-mqtt",title:"MQTT man page",description:"Name",source:"@site/mosquitto_versioned_docs/version-2.0/manpage-mqtt.md",sourceDirName:".",slug:"/manpage-mqtt",permalink:"/mosquitto/2.0/manpage-mqtt",draft:!1,tags:[],version:"2.0",frontMatter:{id:"manpage-mqtt",title:"MQTT man page",sidebar_label:"MQTT"},sidebar:"someSidebar",previous:{title:"mosquitto_sub",permalink:"/mosquitto/2.0/manpage-mosquitto-sub"},next:{title:"Download",permalink:"/mosquitto/2.0/broker-download"}},b={},f=[{value:"Name",id:"name",level:3},{value:"Synopsis",id:"synopsis",level:3},{value:"Description",id:"description",level:3},{value:"Publish/Subscribe",id:"publishsubscribe",level:3},{value:"Topics/Subscriptions",id:"topicssubscriptions",level:3},{value:"Quality of Service",id:"quality-of-service",level:3},{value:"Retained Messages",id:"retained-messages",level:3},{value:"Clean session / Durable connections",id:"clean-session--durable-connections",level:3},{value:"Wills",id:"wills",level:3}],g={toc:f};function v(e){var t,a=e,{components:n}=a,p=((e,t)=>{var a={};for(var i in e)l.call(e,i)&&t.indexOf(i)<0&&(a[i]=e[i]);if(null!=e&&r)for(var i of r(e))t.indexOf(i)<0&&c.call(e,i)&&(a[i]=e[i]);return a})(a,["components"]);return(0,i.kt)("wrapper",(t=u(u({},g),p),s(t,o({components:n,mdxType:"MDXLayout"}))),(0,i.kt)("h3",u({},{id:"name"}),"Name"),(0,i.kt)("p",null,"mqtt \u2014 MQ Telemetry Transport"),(0,i.kt)("h3",u({},{id:"synopsis"}),"Synopsis"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"MQTT")),(0,i.kt)("h3",u({},{id:"description"}),"Description"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"MQTT")," is a lightweight publish/subscribe messaging protocol. It is useful for use with low power sensors, but is applicable to many scenarios."),(0,i.kt)("p",null,"This manual describes some of the features of MQTT version 3.1.1/3.1, to assist end users in getting the most out of the protocol. For more complete information on MQTT, see ",(0,i.kt)("a",u({parentName:"p"},{href:"http://mqtt.org/"}),"http://mqtt.org/"),"."),(0,i.kt)("h3",u({},{id:"publishsubscribe"}),"Publish/Subscribe"),(0,i.kt)("p",null,'The MQTT protocol is based on the principle of publishing messages and subscribing to topics, or "pub/sub". Multiple clients connect to a broker and subscribe to topics that they are interested in. Clients also connect to the broker and publish messages to topics. Many clients may subscribe to the same topics and do with the information as they please. The broker and MQTT act as a simple, common interface for everything to connect to. This means that you if you have clients that dump subscribed messages to a database, to Twitter, Cosm or even a simple text file, then it becomes very simple to add new sensors or other data input to a database, Twitter or so on.'),(0,i.kt)("h3",u({},{id:"topicssubscriptions"}),"Topics/Subscriptions"),(0,i.kt)("p",null,"Messages in MQTT are published on topics. There is no need to configure a topic, publishing on it is enough. Topics are treated as a hierarchy, using a slash (/) as a separator. This allows sensible arrangement of common themes to be created, much in the same way as a filesystem. For example, multiple computers may all publish their hard drive temperature information on the following topic, with their own computer and hard drive name being replaced as appropriate:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"sensors/COMPUTER","_","NAME/temperature/HARDDRIVE","_","NAME")),(0,i.kt)("p",null,"Clients can receive messages by creating subscriptions. A subscription may be to an explicit topic, in which case only messages to that topic will be received, or it may include wildcards. Two wildcards are available, ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"#"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"+")," can be used as a wildcard for a single level of hierarchy. It could be used with the topic above to get information on all computers and hard drives as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"sensors/+/temperature/+")),(0,i.kt)("p",null,'As another example, for a topic of "a/b/c/d", the following example subscriptions will match:'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a/b/c/d"),(0,i.kt)("li",{parentName:"ul"},"+/b/c/d"),(0,i.kt)("li",{parentName:"ul"},"a/+/c/d"),(0,i.kt)("li",{parentName:"ul"},"a/+/+/d"),(0,i.kt)("li",{parentName:"ul"},"+/+/+/+")),(0,i.kt)("p",null,"The following subscriptions will not match:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a/b/c"),(0,i.kt)("li",{parentName:"ul"},"b/+/c/d"),(0,i.kt)("li",{parentName:"ul"},"+/+/+")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"#"),' can be used as a wildcard for all remaining levels of hierarchy. This means that it must be the final character in a subscription. With a topic of "a/b/c/d", the following example subscriptions will match:'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a/b/c/d"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h1",u({parentName:"li"},{id:""}))),(0,i.kt)("li",{parentName:"ul"},"a/#"),(0,i.kt)("li",{parentName:"ul"},"a/b/#"),(0,i.kt)("li",{parentName:"ul"},"a/b/c/#"),(0,i.kt)("li",{parentName:"ul"},"+/b/c/#")),(0,i.kt)("p",null,'Zero length topic levels are valid, which can lead to some slightly non-obvious behaviour. For example, a topic of "a//topic" would correctly match against a subscription of "a/+/topic". Likewise, zero length topic levels can exist at both the beginning and the end of a topic string, so "/a/topic" would match against a subscription of "+/a/topic", "#" or "/#", and a topic "a/topic/" would match against a subscription of "a/topic/+" or "a/topic/#".'),(0,i.kt)("h3",u({},{id:"quality-of-service"}),"Quality of Service"),(0,i.kt)("p",null,"MQTT defines three levels of Quality of Service (QoS). The QoS defines how hard the broker/client will try to ensure that a message is received. Messages may be sent at any QoS level, and clients may attempt to subscribe to topics at any QoS level. This means that the client chooses the maximum QoS it will receive. For example, if a message is published at QoS 2 and a client is subscribed with QoS 0, the message will be delivered to that client with QoS 0. If a second client is also subscribed to the same topic, but with QoS 2, then it will receive the same message but with QoS 2. For a second example, if a client is subscribed with QoS 2 and a message is published on QoS 0, the client will receive it on QoS 0."),(0,i.kt)("p",null,"Higher levels of QoS are more reliable, but involve higher latency and have higher bandwidth requirements."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"0: The broker/client will deliver the message once, with no confirmation."),(0,i.kt)("li",{parentName:"ul"},"1: The broker/client will deliver the message at least once, with confirmation required."),(0,i.kt)("li",{parentName:"ul"},"2: The broker/client will deliver the message exactly once by using a four step handshake.")),(0,i.kt)("h3",u({},{id:"retained-messages"}),"Retained Messages"),(0,i.kt)("p",null,'All messages may be set to be retained. This means that the broker will keep the message even after sending it to all current subscribers. If a new subscription is made that matches the topic of the retained message, then the message will be sent to the client. This is useful as a "last known good" mechanism. If a topic is only updated infrequently, then without a retained message, a newly subscribed client may have to wait a long time to receive an update. With a retained message, the client will receive an instant update.'),(0,i.kt)("h3",u({},{id:"clean-session--durable-connections"}),"Clean session / Durable connections"),(0,i.kt)("p",null,'On connection, a client sets the "clean session" flag, which is sometimes also known as the "clean start" flag. If clean session is set to false, then the connection is treated as durable. This means that when the client disconnects, any subscriptions it has will remain and any subsequent QoS 1 or 2 messages will be stored until it connects again in the future. If clean session is true, then all subscriptions will be removed for the client when it disconnects.'),(0,i.kt)("h3",u({},{id:"wills"}),"Wills"),(0,i.kt)("p",null,"When a client connects to a broker, it may inform the broker that it has a will. This is a message that it wishes the broker to send when the client disconnects unexpectedly. The will message has a topic, QoS and retain status just the same as any other message."))}v.isMDXComponent=!0}}]);