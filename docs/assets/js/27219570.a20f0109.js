"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[89370],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return n?o.createElement(h,a(a({ref:t},u),{},{components:n})):o.createElement(h,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<r;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},44884:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>m,default:()=>y,frontMatter:()=>d,metadata:()=>h,toc:()=>g});var o=n(3905),i=Object.defineProperty,r=Object.defineProperties,a=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,u=(e,t,n)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,p=(e,t)=>{for(var n in t||(t={}))s.call(t,n)&&u(e,n,t[n]);if(l)for(var n of l(t))c.call(t,n)&&u(e,n,t[n]);return e};const d={id:"mosquitto-rpm",title:"RPM Pro Mosquitto",sidebar_label:"RPM Pro Mosquitto"},m=void 0,h={unversionedId:"deployment/on-premises/deployment/installation/rpm/mosquitto-rpm",id:"version-3.0/deployment/on-premises/deployment/installation/rpm/mosquitto-rpm",title:"RPM Pro Mosquitto",description:"Pro Edition for Eclipse Mosquitto package for RHEL/CentOS",source:"@site/mosquitto_versioned_docs/version-3.0/deployment/on-premises/deployment/installation/rpm/mosquitto-rpm.md",sourceDirName:"deployment/on-premises/deployment/installation/rpm",slug:"/deployment/on-premises/deployment/installation/rpm/mosquitto-rpm",permalink:"/mosquitto/deployment/on-premises/deployment/installation/rpm/mosquitto-rpm",draft:!1,tags:[],version:"3.0",frontMatter:{id:"mosquitto-rpm",title:"RPM Pro Mosquitto",sidebar_label:"RPM Pro Mosquitto"},sidebar:"someSidebar",previous:{title:"High Availability",permalink:"/mosquitto/deployment/on-premises/deployment/installation/docker/docker-high-availability"},next:{title:"RPM Mosquitto Platform",permalink:"/mosquitto/deployment/on-premises/deployment/installation/rpm/platform-rpm"}},f={},g=[{value:"Pro Edition for Eclipse Mosquitto package for RHEL/CentOS",id:"pro-edition-for-eclipse-mosquitto-package-for-rhelcentos",level:2},{value:"Pro Mosquitto general installation and set up",id:"pro-mosquitto-general-installation-and-set-up",level:3},{value:"Single Node Configuration",id:"single-node-configuration",level:2},{value:"HA Cluster Configuration",id:"ha-cluster-configuration",level:3},{value:"Example HA network configuration",id:"example-ha-network-configuration",level:3},{value:"Setting up a cluster",id:"setting-up-a-cluster",level:2}],k={toc:g};function y(e){var t,n=e,{components:i}=n,u=((e,t)=>{var n={};for(var o in e)s.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&l)for(var o of l(e))t.indexOf(o)<0&&c.call(e,o)&&(n[o]=e[o]);return n})(n,["components"]);return(0,o.kt)("wrapper",(t=p(p({},k),u),r(t,a({components:i,mdxType:"MDXLayout"}))),(0,o.kt)("h2",p({},{id:"pro-edition-for-eclipse-mosquitto-package-for-rhelcentos"}),"Pro Edition for Eclipse Mosquitto package for RHEL/CentOS"),(0,o.kt)("h3",p({},{id:"pro-mosquitto-general-installation-and-set-up"}),"Pro Mosquitto general installation and set up"),(0,o.kt)("p",null,"To install: ",(0,o.kt)("inlineCode",{parentName:"p"},"yum install mosquitto-premium-x.x.x-y.el8.x86_64.rpm")),(0,o.kt)("p",null,"The binary installation directory is ",(0,o.kt)("inlineCode",{parentName:"p"},"/opt/cedalo/mosquitto")),(0,o.kt)("p",null,"Place your license file at ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/opt/cedalo/mosquitto/license.lic"),"\nPlace your configuration file at ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/opt/cedalo/mosquitto/mosquitto.conf"),"\nApplication data should be configured to be saved in ",(0,o.kt)("inlineCode",{parentName:"p"},"/var/opt/cedalo/mosquitto")),(0,o.kt)("p",null,"See the sections below for different configurations."),(0,o.kt)("p",null,"To configure mosquitto to start on boot:"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-sh"}),"systemctl enable mosquitto\n")),(0,o.kt)("p",null,"And to start mosquitto:"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-sh"}),"systemctl start mosquitto\n")),(0,o.kt)("admonition",p({},{type:"info"}),(0,o.kt)("p",{parentName:"admonition"},"Mosquitto will run as the ",(0,o.kt)("inlineCode",{parentName:"p"},"mosquitto")," user by default. All files must have\npermissions that are accessible to this user.")),(0,o.kt)("h2",p({},{id:"single-node-configuration"}),"Single Node Configuration"),(0,o.kt)("p",null,"This section assumes you wish to configure a single Mosquitto node using TLS\nencryption and running the dynamic security plugin for authentication."),(0,o.kt)("p",null,"Place your TLS certificate and private key at e.g.\n",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/opt/cedalo/mosquitto/certs/server.crt")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/opt/cedalo/mosquitto/certs/server.key"),", and set them to be owned by the\n",(0,o.kt)("inlineCode",{parentName:"p"},"mosquitto")," user."),(0,o.kt)("p",null,"Edit your config file as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-aconf"}),"listener 8883\ncertfile /etc/opt/cedalo/mosquitto/certs/server.crt\nkeyfile /etc/opt/cedalo/mosquitto/certs/server.key\nplugin /opt/cedalo/mosquitto/lib/mosquitto_dynamic_security.so\nplugin_opt_config_file /var/opt/cedalo/mosquitto/dynamic-security.json\n\nplugin /opt/cedalo/mosquitto/lib/cedalo_inspect.so\nplugin_opt_disconnected_clients_ttl 300\nenable_control_api true\n")),(0,o.kt)("p",null,"where ",(0,o.kt)("inlineCode",{parentName:"p"},"plugin_opt_disconnected_clients_ttl 300")," is the time time to live of the disconnected clients in seconds."),(0,o.kt)("p",null,"Using this configuration, an initial dynamic security configuration will be\ncreated and the initial admin credentials stored at\n",(0,o.kt)("inlineCode",{parentName:"p"},"/var/opt/cedalo/mosquitto/dynamic-security.json.pw")," - this file should be\nremoved after the credentials are recorded elsewhere. The admin password should\nbe provided to the MMC."),(0,o.kt)("p",null,"After enabling and starting the broker in systemd, clients can connect to port\n8883 using the admin credentials, which can be used in the MMC to create\nfurther users."),(0,o.kt)("p",null,"Note that if you want to use streams plugin you should add the following lines to the config file:"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-aconf"}),"plugin /opt/cedalo/mosquitto/lib/cedalo_stream_processing.so\nplugin_opt_data_dir /mosquitto/data/stream\n")),(0,o.kt)("p",null,"but don't forget to create ",(0,o.kt)("inlineCode",{parentName:"p"},"/mosquitto/date/stream")," directory or ensure that it was created before."),(0,o.kt)("h3",p({},{id:"ha-cluster-configuration"}),"HA Cluster Configuration"),(0,o.kt)("p",null,"This section assumes you wish to configure three Mosquitto nodes to be\nconfigured as a High Availability cluster. We strongly recommend that for this\nsetup all Mosquitto nodes are placed on a private network and that a reverse\nproxy is placed in front of the three nodes, to direct the incoming clients to\nthe current cluster leader. In any case, the internal cluster communication\n",(0,o.kt)("em",{parentName:"p"},"must")," be on a private network or secured through a VPN."),(0,o.kt)("p",null,"If you are using a reverse proxy and carrying out TLS termination on the proxy,\nthen use the following configuration file:"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-aconf"}),"listener 1883 <private network address>\nglobal_plugin /opt/cedalo/mosquitto/lib/cedalo_mosquitto_ha.so\npersistence_location /var/opt/cedalo/mosquitto\n\nplugin /opt/cedalo/mosquitto/lib/cedalo_inspect.so\nplugin_opt_disconnected_clients_ttl 300\nenable_control_api true\n\nlistener 2883 <private network address>\nadmin_listener true\n")),(0,o.kt)("p",null,"where ",(0,o.kt)("inlineCode",{parentName:"p"},"plugin_opt_disconnected_clients_ttl 300")," is the time time to live of the disconnected clients in seconds."),(0,o.kt)("p",null,"If you are not carrying out TLS termination on the proxy,\nthen use the following configuration file:"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-aconf"}),"listener 8883\ncertfile /etc/opt/cedalo/mosquitto/certs/server.crt\nkeyfile /etc/opt/cedalo/mosquitto/certs/server.key\nglobal_plugin /opt/cedalo/mosquitto/lib/cedalo_mosquitto_ha.so\npersistence_location /var/opt/cedalo/mosquitto\n\nplugin /opt/cedalo/mosquitto/lib/cedalo_inspect.so\nplugin_opt_disconnected_clients_ttl 300\nenable_control_api true\n\nlistener 2883 <private network address>\nadmin_listener true\n")),(0,o.kt)("p",null,"Using these configurations, an initial dynamic security configuration will be\ncreated and the initial admin credentials stored at\n",(0,o.kt)("inlineCode",{parentName:"p"},"/var/opt/cedalo/mosquitto/ha/dynamic-security.json.pw")," - this file should be\nremoved after the credentials are recorded elsewhere. The admin password should\nbe provided to the MMC."),(0,o.kt)("p",null,"The listener at port 1883/8883 will only be active on the current cluster\nleader. The listener on port 2883 will always be available, but must ",(0,o.kt)("em",{parentName:"p"},"only")," be\nused with the MMC for cluster management and monitoring."),(0,o.kt)("p",null,"The initial password created on each node will be different. When the cluster\nis created via the MMC, the first node to be elected leader will duplicate its\nauthentication settings to the follower nodes, which means their credentials\nwill change. Which node will be elected leader cannot be predetermined, so it\nis suggested that a single node is started then the contents of\n",(0,o.kt)("inlineCode",{parentName:"p"},"/var/opt/cedalo/mosquitto/ha/")," duplicated to other nodes in order to have a\ndeterministic password once the cluster is created. Alternatively, the\nenvironment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"MOSQUITTO_DYNSEC_PASSWORD")," can be set prior to running\nthe broker manually and the contents of this variable will be used as the\ninitial password if no other credentials exist."),(0,o.kt)("h3",p({},{id:"example-ha-network-configuration"}),"Example HA network configuration"),(0,o.kt)("p",null,"This section describes how a network could be configured for use with the HA\nfeature. It uses an instance of HAProxy to direct the incoming clients to the\ncurrently active leader node, with all Mosquitto instances on the private\nnetwork only. For the best availability we would recommend multiple HAProxy\ninstances."),(0,o.kt)("p",null,"For HAProxy you need to combine the server cert and the server key into a\nsingle PEM file. e.g. using the command line tool cat:"),(0,o.kt)("pre",null,(0,o.kt)("code",p({parentName:"pre"},{className:"language-sh"}),"sudo cat /etc/opt/cedalo/mosquitto/certs/server.crt /etc/lib/cedalo/mosquitto/certs/server.key \\\n| sudo tee /etc/opt/cedalo/mosquitto/certs/server.pem\n")),(0,o.kt)("p",null,"In this example, the IP address range 192.0.2.0/24 is a private network, and\n203.0.113.0/24 is a publically accessible network."),(0,o.kt)("p",null,"Mosquitto node 1:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Listener 1883, bound to private IP address 192.0.2.1 - active when node is a leader"),(0,o.kt)("li",{parentName:"ul"},"Listener 2883, bound to private IP address 192.0.2.1 - always active, for MMC only"),(0,o.kt)("li",{parentName:"ul"},"Listener 7001, bound to private IP address 192.0.2.1 - internal cluster comms")),(0,o.kt)("p",null,"Mosquitto node 2:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Listener 1883, bound to private IP address 192.0.2.2 - active when node is a leader"),(0,o.kt)("li",{parentName:"ul"},"Listener 2883, bound to private IP address 192.0.2.2 - always active, for MMC only"),(0,o.kt)("li",{parentName:"ul"},"Listener 7001, bound to private IP address 192.0.2.2 - internal cluster comms")),(0,o.kt)("p",null,"Mosquitto node 3:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Listener 1883, bound to private IP address 192.0.2.3 - active when node is a leader"),(0,o.kt)("li",{parentName:"ul"},"Listener 2883, bound to private IP address 192.0.2.3 - always active, for MMC only"),(0,o.kt)("li",{parentName:"ul"},"Listener 7001, bound to private IP address 192.0.2.3 - internal cluster comms")),(0,o.kt)("p",null,"HAProxy instance:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Frontend 8883, bound to public address 203.0.113.1 with TLS termination"),(0,o.kt)("li",{parentName:"ul"},"Backend to connect to 192.0.2.1:1883"),(0,o.kt)("li",{parentName:"ul"},"Backend to connect to 192.0.2.2:1883"),(0,o.kt)("li",{parentName:"ul"},"Backend to connect to 192.0.2.3:1883")),(0,o.kt)("p",null,"Management Center:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Frontend 443, bound to public address 203.0.113.2"),(0,o.kt)("li",{parentName:"ul"},"Connection to 192.0.2.1:2883"),(0,o.kt)("li",{parentName:"ul"},"Connection to 192.0.2.2:2883"),(0,o.kt)("li",{parentName:"ul"},"Connection to 192.0.2.3:2883")),(0,o.kt)("p",null,"For this configuration, the connections are added to the Management Center as\nshown, then during the cluster creation the addresses e.g. 192.0.2.1:7001 are\nused, as described in the MMC documentation."),(0,o.kt)("h2",p({},{id:"setting-up-a-cluster"}),"Setting up a cluster"),(0,o.kt)("p",null,"The following link contains information Mosquitto cluster:"),(0,o.kt)("p",null,(0,o.kt)("a",p({parentName:"p"},{href:"/mosquitto/clustering/setting-up-ha-clusters"}),"Mosquitto High Availability Cluster")))}y.isMDXComponent=!0}}]);