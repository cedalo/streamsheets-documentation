"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[40925],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>c});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(r),c=i,h=u["".concat(l,".").concat(c)]||u[c]||m[c]||a;return r?n.createElement(h,o(o({ref:t},p),{},{components:r})):n.createElement(h,o({ref:t},p))}));function c(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var d=2;d<a;d++)o[d]=r[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},49664:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>f,contentTitle:()=>c,default:()=>k,frontMatter:()=>u,metadata:()=>h,toc:()=>g});var n=r(3905),i=Object.defineProperty,a=Object.defineProperties,o=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,p=(e,t,r)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,m=(e,t)=>{for(var r in t||(t={}))l.call(t,r)&&p(e,r,t[r]);if(s)for(var r of s(t))d.call(t,r)&&p(e,r,t[r]);return e};const u={id:"mosquitto-http-bridge",title:"HTTP Bridge",sidebar_label:"HTTP Bridge Plugin \u2b50"},c=void 0,h={unversionedId:"mosquitto-http-bridge",id:"version-2.5/mosquitto-http-bridge",title:"HTTP Bridge",description:"The purpose of the HTTP Bridge is to bridge data messages between the Mosquitto MQTT broker and a HTTP Webserver. With the current version the user may forward incoming MQTT messages to a HTTP Webserver using REST calls. Each webserver, which should be addressed by the HTTP Bridge, is configured using a remote definition. For each remote definition multiple mappings from a MQTT topic to a HTTP URL may be defined. For each message published to the configured topic the corresponding webservice will be invoked forwarding the MQTT messages as the Webservice body.",source:"@site/mosquitto_versioned_docs/version-2.5/HTTPbridge.md",sourceDirName:".",slug:"/mosquitto-http-bridge",permalink:"/mosquitto/2.5/mosquitto-http-bridge",draft:!1,tags:[],version:"2.5",frontMatter:{id:"mosquitto-http-bridge",title:"HTTP Bridge",sidebar_label:"HTTP Bridge Plugin \u2b50"},sidebar:"someSidebar",previous:{title:"Management Center",permalink:"/mosquitto/2.5/management-center"},next:{title:"Overview",permalink:"/mosquitto/2.5/mosquitto-man-pages"}},f={},g=[{value:"Activation and configuration options",id:"activation-and-configuration-options",level:2},{value:"Config file Format",id:"config-file-format",level:2},{value:"Remote definition",id:"remote-definition",level:2},{value:"Push definition",id:"push-definition",level:2},{value:"Variable substitution",id:"variable-substitution",level:2}],b={toc:g};function k(e){var t,r=e,{components:i}=r,p=((e,t)=>{var r={};for(var n in e)l.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&s)for(var n of s(e))t.indexOf(n)<0&&d.call(e,n)&&(r[n]=e[n]);return r})(r,["components"]);return(0,n.kt)("wrapper",(t=m(m({},b),p),a(t,o({components:i,mdxType:"MDXLayout"}))),(0,n.kt)("p",null,"The purpose of the HTTP Bridge is to bridge data messages between the Mosquitto MQTT broker and a HTTP Webserver. With the current version the user may forward incoming MQTT messages to a HTTP Webserver using REST calls. Each webserver, which should be addressed by the HTTP Bridge, is configured using a remote definition. For each remote definition multiple mappings from a MQTT topic to a HTTP URL may be defined. For each message published to the configured topic the corresponding webservice will be invoked forwarding the MQTT messages as the Webservice body."),(0,n.kt)("h2",m({},{id:"activation-and-configuration-options"}),"Activation and configuration options"),(0,n.kt)("p",null,"Like all other mosquitto plugins the HTTP Bridge plugin needs to be activated in the mosquitto configuration file (by default named mosquitto.conf). To activate the HTTP Bridge plugin you need to add an new ",(0,n.kt)("inlineCode",{parentName:"p"},"plugin")," entry to the mosquitto.conf pointing to the absolute path of the plugin shared object file. Additionally you have to specify a subsequent new entry ",(0,n.kt)("inlineCode",{parentName:"p"},"plugin_opt_config_file")," pointing to the name of the plugin configuration file path. The format of the config file is described in the next section.\nIf the config file does not exist the HTTP Bridge plugin will create a new file with an default configuration frame."),(0,n.kt)("p",null,"For the Cedalo Mosquitto premium dockerfile the additional entry most times looks like:"),(0,n.kt)("pre",null,(0,n.kt)("code",m({parentName:"pre"},{}),"plugin /usr/lib/cedalo_http_bridge.so\nplugin_opt_config_file /mosquitto/data/http-bridge.json\n")),(0,n.kt)("h2",m({},{id:"config-file-format"}),"Config file Format"),(0,n.kt)("p",null,"The config file contains a JSON dump of the HTTP Bridge configuration. The config is stored in a single JSON object."),(0,n.kt)("p",null,"The object must contain an element name remotes, which is of array type. This array contains one JSON object for each remote HTTP server to address. Minimal valid config file will look like:"),(0,n.kt)("pre",null,(0,n.kt)("code",m({parentName:"pre"},{}),'{"remotes": []}\n')),(0,n.kt)("h2",m({},{id:"remote-definition"}),"Remote definition"),(0,n.kt)("p",null,"Overview over all currently supported members:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:"center"}),(0,n.kt)("strong",{parentName:"th"},"member")),(0,n.kt)("th",m({parentName:"tr"},{align:"center"}),(0,n.kt)("strong",{parentName:"th"},"type")),(0,n.kt)("th",m({parentName:"tr"},{align:"center"}),(0,n.kt)("strong",{parentName:"th"},"description")),(0,n.kt)("th",m({parentName:"tr"},{align:"center"}),(0,n.kt)("strong",{parentName:"th"},"default")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"id"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"string"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"Unique id of the remote definition."),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"base_url"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"string"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"Base URL for the HTTP requests."),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"max_concurrent_requests"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"integer"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"Max number of concurrent requests."),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"100")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"max_queued_requests"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"integer"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"Max number of queued requests."),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"10000")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"push"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"array"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"Array of the push definitions."),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}))))),(0,n.kt)("p",null,"Each individual remote definition in the HTTP Bridge configuration is a JSON object and must* have a member id of string type to identify this remote definition. The value of this type has to be unique over all remote definitions."),(0,n.kt)("p",null,"The remote definition may have an member base_url of type string. The value of the base_url member will be used as the base URL for the HTTP requests. The base_url member may contain variables, which will be replaced for each request (see Variable substitution below)."),(0,n.kt)("p",null,"Each remote definiton may have a member max_concurrent_requests of intger type. This is the number of concurrent HTTP requests performed against this remote server at the same time. If the number of required requests starts exceeding the configured limit the HTTP Bridge will start queuing the requests. The limit may be disabled configuring a value lower than 1. But this may lead to inifite growing memory usage as the server, if the remote server cannot response fast enough. Therefor we highly recommend to configure a limit."),(0,n.kt)("p",null,"Each remote definiton may have a member max_queued_requests of intger type. This is the number of HTTP requests queued for processing. A HTTP request will pushed into the queue, if a max_concurrent_requests limit is configured. If the number of queued requests exceeds the configured limit the HTTP Birdge will drop the oldest queued request to keep the limit. For the dropped request and error with HTTP status code 400 will be created."),(0,n.kt)("p",null,"Each remote definition shall have a member push of array type. This array contains one JSON objects response to define which data should be pushed from a broker topic to the remote HTTP server."),(0,n.kt)("h2",m({},{id:"push-definition"}),"Push definition"),(0,n.kt)("p",null,"Each data push definition in the HTTP Bridge configuration is JSON object defining the topic to HTTP request mapping, which will be used to push data to the HTTP server."),(0,n.kt)("p",null,"Overview over all currently supported members:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:"center"}),(0,n.kt)("strong",{parentName:"th"},"member")),(0,n.kt)("th",m({parentName:"tr"},{align:"center"}),(0,n.kt)("strong",{parentName:"th"},"type")),(0,n.kt)("th",m({parentName:"tr"},{align:"center"}),(0,n.kt)("strong",{parentName:"th"},"description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"id"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"string"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"id of the push definition. Has to be unique inside the scope of the remote definition.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"topic"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"string"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"Topic to subscribe to.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"method"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"string"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"HTTP request method to be used.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"format"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"string"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"Format of the messages payload to be pushed.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"path"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"string"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"Path to be used for the HTTP requests on the server.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"query"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"string"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"HTTP query part of the URL to be used in the HTTP requests.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"error_topic"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"string"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"Topic to push error messages to")))),(0,n.kt)("p",null,"Each push definition must have a member id of string type. This identifier is used to identify the push definition inside the remote definition. Therefore this member must be unique inside the remote defition. push definitions inside different remote definitions may have the same identifier."),(0,n.kt)("p",null,"Each push definition must have a member topic of string type. The value of this member is the topic, which the HTTP bridge will to subscribe for incoming messages. The topic may contain wildcard(s) as they are supported by mosquitto. The topic is available in a variable topic, which may be used in the remote definition base_url member, in the push definition path member or the push definition query member."),(0,n.kt)("p",null,"Each push definition may contain a member method of string type. The value defines the HTTP request method to be used. In the current version only the request method type POST is supported."),(0,n.kt)("p",null,'Each push definition may contain a member format of string type. The value of this member defines the format of the HTTP request payload to be used in the HTTP request. In the current version for a HTTP POST request only the payload format "JSON" is supported. As the HTTP bridge does not perform any data transformation the message published to the mosquitto broker on the subscribed topic MUST be valid JSON formatted messages.'),(0,n.kt)("p",null,"Each push definition may contain a member path of string type. The value will appended to the base_url of the remote definition adding a slash between the base_url of the remote definition and the path of the push definition. If the remote defition does not specify a base_url the path member is mandatory. The path member may contain variables, which will be replaced for each HTTP request. (see Variable substitution below)."),(0,n.kt)("p",null,"Each push definition may contain a member query ot string type. The value will be appended to the URL build from remote definition base_url and the push definition path member. A question mark will be used to concatenate the URL and the query part of the URL. The query value may contain variables, which will be replaced for each request. Variable values in the query part of the URL will be URL encoded."),(0,n.kt)("p",null,"Each push definition may contain a member error_topic of string type. If the error_topic is specified the HTTP bridge will publish a message to the secified topic in case of a HTPP request error. The error message will be a JSON object containing the following members:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"topic Topic the message was subscribed from"),(0,n.kt)("li",{parentName:"ul"},"http_code HTTP response code from the server. If the request fails before being send a HTTP status code 400 will be set. If the server could no be reached HTTP status code 503 will be given."),(0,n.kt)("li",{parentName:"ul"},"error_op Description of the operation being not successfull during request execution."),(0,n.kt)("li",{parentName:"ul"},"error_text Error text describing the error condition preventing the request execution."),(0,n.kt)("li",{parentName:"ul"},"payload Original subscribed message serialized into a string field."),(0,n.kt)("li",{parentName:"ul"},"response The HTTP server response serialized into a single string field.")),(0,n.kt)("h2",m({},{id:"variable-substitution"}),"Variable substitution"),(0,n.kt)("p",null,"In some config members varialbes may be used, which will be replaced before performing the HTTP request. Each variable is identified by the dollar ($) sign. The HTTP Bridge Plugin supports the following variables:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:"center"}),(0,n.kt)("strong",{parentName:"th"},"variable")),(0,n.kt)("th",m({parentName:"tr"},{align:"center"}),(0,n.kt)("strong",{parentName:"th"},"description")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"topic"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"Contains the effective topic of the subscription.")))),(0,n.kt)("p",null,"Currently variables may be used in the following config members. And will be substituted with the listed encoding:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:"center"}),(0,n.kt)("strong",{parentName:"th"},"definition")),(0,n.kt)("th",m({parentName:"tr"},{align:"center"}),(0,n.kt)("strong",{parentName:"th"},"member")),(0,n.kt)("th",m({parentName:"tr"},{align:"center"}),(0,n.kt)("strong",{parentName:"th"},"encoding")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"remote"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"base_url"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"As is.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"push"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"path"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"As is")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"push"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"query"),(0,n.kt)("td",m({parentName:"tr"},{align:"center"}),"URL encoded")))))}k.isMDXComponent=!0}}]);