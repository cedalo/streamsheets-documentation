"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[34005],{83166:(e,t,n)=>{var i=n(64836);t.Z=void 0;var o=i(n(64938)),a=n(85893),r=(0,o.default)((0,a.jsx)("path",{d:"M12 2 4 5v6.09c0 5.05 3.41 9.76 8 10.91 4.59-1.15 8-5.86 8-10.91V5l-8-3zm-1.06 13.54L7.4 12l1.41-1.41 2.12 2.12 4.24-4.24 1.41 1.41-5.64 5.66z"}),"GppGood");t.Z=r},46583:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>g,default:()=>N,frontMatter:()=>c,metadata:()=>b,toc:()=>f});var i=n(3905),o=n(49044),a=Object.defineProperty,r=Object.defineProperties,s=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,d=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,m=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&d(e,n,t[n]);if(l)for(var n of l(t))u.call(t,n)&&d(e,n,t[n]);return e};const c={id:"google-pubsub-bridge",title:"Google Pub/Sub Bridge",sidebar_label:"Google Pub/Sub Bridge"},g=void 0,b={unversionedId:"bridges/google-pubsub-bridge",id:"version-3.1/bridges/google-pubsub-bridge",title:"Google Pub/Sub Bridge",description:"Coming soon: Configuring this plugin will soon be easier than ever before. Find more information about this here.",source:"@site/mosquitto_versioned_docs/version-3.1/bridges/google-pubsub-bridge.md",sourceDirName:"bridges",slug:"/bridges/google-pubsub-bridge",permalink:"/mosquitto/bridges/google-pubsub-bridge",draft:!1,tags:[],version:"3.1",frontMatter:{id:"google-pubsub-bridge",title:"Google Pub/Sub Bridge",sidebar_label:"Google Pub/Sub Bridge"},sidebar:"someSidebar",previous:{title:"Azure EventHubs Bridge",permalink:"/mosquitto/bridges/azure-bridge"},next:{title:"HTTP Bridge",permalink:"/mosquitto/bridges/http-bridge"}},h={},f=[{value:"Plugin state",id:"plugin-state",level:2},{value:"Plugin activation and configuration",id:"plugin-activation-and-configuration",level:2},{value:"Config file format",id:"config-file-format",level:2},{value:"JSON Schema",id:"json-schema",level:2}],k={toc:f};function N(e){var t,n=e,{components:a}=n,d=((e,t)=>{var n={};for(var i in e)p.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&l)for(var i of l(e))t.indexOf(i)<0&&u.call(e,i)&&(n[i]=e[i]);return n})(n,["components"]);return(0,i.kt)("wrapper",(t=m(m({},k),d),r(t,s({components:a,mdxType:"MDXLayout"}))),(0,i.kt)(o.Z,{mdxType:"PremiumFeature"}),(0,i.kt)("admonition",m({},{type:"info"}),(0,i.kt)("p",{parentName:"admonition"},"Coming soon: Configuring this plugin will soon be easier than ever before. Find more information about this ",(0,i.kt)("a",m({parentName:"p"},{href:"#INSERT_LINK"}),"here"),".")),(0,i.kt)("p",null,"The ",(0,i.kt)("strong",{parentName:"p"},"Google Pub/Sub Plugin")," actsj as a bridge between the ",(0,i.kt)("strong",{parentName:"p"},"Mosquitto broker")," and ",(0,i.kt)("strong",{parentName:"p"},"Google Pub/Sub service"),", facilitating the exchange of messages between MQTT and Google Pub/Sub. This interoperability supports various messaging patterns, including ",(0,i.kt)("strong",{parentName:"p"},"1:1"),", ",(0,i.kt)("strong",{parentName:"p"},"1:n"),", and ",(0,i.kt)("strong",{parentName:"p"},"n:1"),", as dictated by the designated topic mappings. For instance, a message that arrives at a Mosquitto broker can be relayed to one or multiple topics within the Google Pub/Sub service. Similarly, a Mosquitto broker can fetch messages from one or more Google Pub/Sub topics and distribute them to one or several MQTT topics. For further details, refer to the ",(0,i.kt)("a",m({parentName:"p"},{href:"#config-file-format"}),"configuration format and example"),"."),(0,i.kt)("admonition",m({},{type:"info"}),(0,i.kt)("p",{parentName:"admonition"},"The plugin cannot configure the Google-Pub/Sub service. This has to be done upfront.")),(0,i.kt)("admonition",m({},{type:"info"}),(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"push")," feature is currently not supported at all and the ",(0,i.kt)("inlineCode",{parentName:"p"},"pull")," feature is in the beta state and therefore subject to change!")),(0,i.kt)("h2",m({},{id:"plugin-state"}),"Plugin state"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"push")," feature is currently not supported at all and the ",(0,i.kt)("inlineCode",{parentName:"p"},"pull")," feature is in experimental state and therefore subject to change!"),(0,i.kt)("h2",m({},{id:"plugin-activation-and-configuration"}),"Plugin activation and configuration"),(0,i.kt)("p",null,"To enable the Google PubSub plugin in the broker add the following to the ",(0,i.kt)("inlineCode",{parentName:"p"},"mosquitto.conf")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",m({parentName:"pre"},{}),"plugin /usr/lib/cedalo_google_pubsub.so\n")),(0,i.kt)("p",null,"Configuration is done via two JSON files. One is a key file which contains the Pub/Sub project and credentials to use. This file is provided by Google. The other file configures the plugin itself (see ",(0,i.kt)("a",m({parentName:"p"},{href:"#config-file-format"}),"next section"),"). The filenames can be edited, but the path is resolved relative to the ",(0,i.kt)("inlineCode",{parentName:"p"},"persistence_location")," property.\nThe paths to both files are specified in ",(0,i.kt)("inlineCode",{parentName:"p"},"mosquitto.conf")," using following plugin options:"),(0,i.kt)("pre",null,(0,i.kt)("code",m({parentName:"pre"},{}),"plugin_opt_key_file path/to/pubsub-key.json\nplugin_opt_config_file path/to/pubsub-config.json\n")),(0,i.kt)("p",null,"Note: the name of the file does not matter, but the path is resolved relative to the ",(0,i.kt)("inlineCode",{parentName:"p"},"persistence_location")," property. So this property must be specified as well, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",m({parentName:"pre"},{}),"persistence_location /mosquitto/data\n")),(0,i.kt)("h2",m({},{id:"config-file-format"}),"Config file format"),(0,i.kt)("p",null,"The configuration is based on the Cedalo plugin config guidelines.\nA connection is defined for each Google PubSub feature, namely ",(0,i.kt)("inlineCode",{parentName:"p"},"publish"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"pull")," and (in a future version)",(0,i.kt)("inlineCode",{parentName:"p"},"push"),".\nThe core setting for each connection is the topic mapping defined by the ",(0,i.kt)("inlineCode",{parentName:"p"},"topicMappings")," property. For ",(0,i.kt)("inlineCode",{parentName:"p"},"publish")," this defines how messages are forwarded from Mosquitto broker to Google PubSub and for ",(0,i.kt)("inlineCode",{parentName:"p"},"pull"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"push")," it defines the other way round, i.e. how messages received by Google PubSub are forwarded via the Mosquitto broker."),(0,i.kt)("p",null,"Current connection options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"publish"),": Settings for the publish feature.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"topicMappings"),": The topic mapping which defines how messages received by Mosquitto broker are forwarded to Google PubSub topics  (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"array"),").",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mqttTargets"),": MQTT topics to subscribe to (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"array"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"target"),": Google PubSub topic to publish (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"targets"),": Several Google PubSub topics to publish (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"array"),")."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options"),": Currently contains only settings for internal message queue which is used to try to publish failed messges again (Optional, type: ",(0,i.kt)("inlineCode",{parentName:"li"},"object"),").",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"maxQueuedMessages"),": max. total number of queued messages. If ",(0,i.kt)("inlineCode",{parentName:"li"},"maxQueuedMessages")," is reached further received messages are dropped. (Optional, defaults to 100)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"retryDelayMs"),": Delay in milliseconds to wait before retrying to publish queued messages again. (Optional, defaults to 10000ms)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"maxRetries"),": Max. number of attempts before retry is stopped. Use -1 for unlimited retries. (Optional, defaults to -1)"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pull"),": ",(0,i.kt)("em",{parentName:"li"},"EXPREIMENTAL")," - Settings for the pull feature.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"topicMappings"),": The topic mapping which defines how messages received from Google PubSub are forwarded to MQTT topics  (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"array"),").",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mqttTargets"),": MQTT topics to publish to (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"array"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"source"),": Google PubSub topic to subscribe to (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sources"),": Several Google PubSub topics to subscribe to (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"array"),")."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pullTriggerTopic"),": The MQTT topic used to trigger message pull (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pullDurationMs"),": The duration in milliseconds for how long messages should be pulled from Google PubSub. (Optional, defaults to 30000ms)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"qos"),": The quality of service flag to use for MQTT publish (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"2"),"). (Optional, defaults to 0)"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"push"),": ",(0,i.kt)("em",{parentName:"li"},"Currently not supported.")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"object"),").")),(0,i.kt)("p",null,"For a more technical overview refer to the ",(0,i.kt)("a",m({parentName:"p"},{href:"#json-schema"}),"format schema")," at the bottom of this page as well."),(0,i.kt)("p",null,"Following is an example for a ",(0,i.kt)("inlineCode",{parentName:"p"},"pubsub-config.json"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",m({parentName:"pre"},{className:"language-json"}),'{\n    "connections": [\n        {\n            "name": "publish",\n            "topicMappings": [\n                {\n                    "mqttTopics": ["cedalo/test"],\n                    "targets": ["test_topic", "cedalo_test_topic"]\n                }\n            ],\n            "options": {\n                "maxQueuedMessages": 5,\n                "retryDelayMs": 10000,\n                "maxRetries": 5\n            }\n        },\n        {\n            "name": "pull",\n            "topicMappings": [\n                {\n                    "mqttTopics": ["cedalo/app"],\n                    "source": "cedalo_test_topic"\n                }\n            ],\n            "options": {\n                "pullDurationMs": 10000,\n                "pullTriggerTopic": "cedalo/test/pull"\n            }\n        }\n    ]\n}\n')),(0,i.kt)("p",null,"In this example two connections are defined, namely a ",(0,i.kt)("inlineCode",{parentName:"p"},"publish")," and a ",(0,i.kt)("inlineCode",{parentName:"p"},"pull")," connection. The ",(0,i.kt)("inlineCode",{parentName:"p"},"publish")," connection defines a ",(0,i.kt)("inlineCode",{parentName:"p"},"1:n")," topic mapping, i.e. each message which is send to the Mosquitto broker on topic ",(0,i.kt)("inlineCode",{parentName:"p"},"cedalo/test")," is published to two Google PubSub topics, namely ",(0,i.kt)("inlineCode",{parentName:"p"},"test_topic")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"cedalo_test_topic"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"publish")," options limits the size of the message queue to 5 failed messages and specifies that the queue should retry sending failed messages each 10 seconds but at max. 5 times. A second connection ",(0,i.kt)("inlineCode",{parentName:"p"},"pull")," defines a ",(0,i.kt)("inlineCode",{parentName:"p"},"1:1")," topic mapping and a pull duration of 10 seconds. That means after the broker has started to pull messages each message received on Google PubSub topic ",(0,i.kt)("inlineCode",{parentName:"p"},"cedalo_test_topic")," within the following 10 seconds will be published by Mosquitto broker on topic ",(0,i.kt)("inlineCode",{parentName:"p"},"cedalo/app"),". Message pull is started by sending an empty message to the specified trigger topic ",(0,i.kt)("inlineCode",{parentName:"p"},"cedalo/test/pull")," to the broker."),(0,i.kt)("admonition",m({},{type:"info"}),(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"pull")," feature is still experimental and subject to change!")),(0,i.kt)("h2",m({},{id:"json-schema"}),"JSON Schema"),(0,i.kt)("p",null,"Following are the connection schemata for ",(0,i.kt)("inlineCode",{parentName:"p"},"publish"),"and ",(0,i.kt)("inlineCode",{parentName:"p"},"pull"),". These schemata adjust the overall base plugin schema as defined in the Cedalo plugin guidelines."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"publish")," connection:")),(0,i.kt)("pre",null,(0,i.kt)("code",m({parentName:"pre"},{className:"language-json"}),'{\n    "name": { "type": "string", "const": "publish" },\n    "options": {\n        "type": "object",\n        "properties": {\n            "maxQueuedMessages": {\n                "type": "integer",\n                "description": "The max. number of queued messages. Use -1 for unlimited queue",\n                "minimum": 0,\n                "default": 100\n            },\n            "retryDelayMs": {\n                "type": "number",\n                "description": "Delay in milliseconds to wait before retrying to send queued messages.",\n                "minimum": 1000,\n                "default": 10000\n            },\n            "maxRetries": {\n                "type": "integer",\n                "description": "Max. number of attempts before retry is stopped. Use -1 for unlimited retries.",\n                "default": -1\n            }\n        },\n        "required": [],\n        "additionalProperties": false\n    },\n    "topicMappings": {\n        "description": "Topic mapping",\n        "type": "array",\n        "items": {\n            "type": "object",\n            "properties": {\n                "mqttTopics": {\n                    "description": "MQTT Topics which the plugin should gather messages to forwarded them to the target (e.g. Topic/Database/URI)",\n                    "type": "array",\n                    "items": {\n                        "type": "string"\n                    }\n                },\n                "target": {\n                    "description":\n"                       \'Describing the target (message sink), which can be a topic, DB table, URI, ..., depending on the use case. Note: either target or targets should be specified but not both",\n                    "type": "string"\n                },\n                "targets": {\n                    "description":\n"                       \'Describing the targets (message sinks), which can be topics, like DB table, URI, ..., depending on the use case. Note: either target or targets should be specified but not both",\n                    "type": "array",\n                    "items": {\n                        "type": "string"\n                    }\n                }\n            },\n            "oneOf": [{ "required": ["target"] }, { "required": ["targets"] }],\n            "required": ["mqttTopics"]\n        }\n    }\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pull"),"connection:")),(0,i.kt)("pre",null,(0,i.kt)("code",m({parentName:"pre"},{className:"language-json"}),'{\n    "name": {\n        "type": "string",\n        "const": "pull"\n    },\n    "options": {\n        "type": "object",\n        "properties": {\n            "pullDurationMs": {\n                "type": "number",\n                "description": "Specifies in milliseconds for how long incoming messages should be pulled.",\n                "minimum": 1000,\n                "default": 30000\n            },\n            "pullTriggerTopic": {\n                "type": "string",\n                "description": "The mqtt topic which triggers the pubsub pull.",\n                "minLength": 1\n            },\n            "qos": {\n                "type": "integer",\n                "enum": [0, 1, 2],\n                "description": "The quality of service value to use for publishing received messages to mqtt topic.",\n                "default": 0\n            }\n        },\n        "required": [],\n        "additionalProperties": false\n    },\n    "topicMappings": {\n        "items": {\n            "type": "object",\n            "properties": {\n                "mqttTopics": {\n                    "description": "MQTT Topics which the plugin should gather messages to forwarded them to the target (e.g. Topic/Database/URI)",\n                    "type": "array",\n                    "items": {\n                        "type": "string"\n                    }\n                },\n                "source": {\n                    "description": "Describing the source (message source), which can be a topic. Note: either source or sources should be specified but not both",\n                    "type": "string"\n                },\n                "sources": {\n                    "description": "Describing the sources (message sources), which can be topics. Note: either source or sources should be specified but not both",\n                    "type": "array",\n                    "items": {\n                        "type": "string"\n                    }\n                }\n            },\n            "oneOf": [{ "required": ["source"] },{ "required": ["sources"] }],\n            "required": ["mqttTopics"]\n        }\n    }\n}\n')))}N.isMDXComponent=!0},49044:(e,t,n)=>{n.d(t,{Z:()=>s});var i=n(67294),o=n(39082),a=n(62659),r=n(83166);function s({inline:e}){return i.createElement(o.Z,{sx:{margin:e?"0px 5px":"0px 5px 5px 10px",height:e?"22px":void 0,color:"#ffffff",backgroundColor:a.Z[500]},size:"small",icon:i.createElement(r.Z,{style:{color:"white"},size:"small"}),label:"Premium"})}}}]);