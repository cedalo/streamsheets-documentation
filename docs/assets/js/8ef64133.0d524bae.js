"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[10026],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(r),f=a,g=d["".concat(l,".").concat(f)]||d[f]||c[f]||o;return r?n.createElement(g,i(i({ref:t},u),{},{components:r})):n.createElement(g,i({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},23509:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>f,default:()=>k,frontMatter:()=>d,metadata:()=>g,toc:()=>b});var n=r(3905),a=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,u=(e,t,r)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,c=(e,t)=>{for(var r in t||(t={}))l.call(t,r)&&u(e,r,t[r]);if(p)for(var r of p(t))s.call(t,r)&&u(e,r,t[r]);return e};const d={id:"sparkplug-decode",title:"Sparkplug Decode",sidebar_label:"Sparkplug Decode"},f=void 0,g={unversionedId:"advanced-features/sparkplug/sparkplug-decode",id:"version-3.1/advanced-features/sparkplug/sparkplug-decode",title:"Sparkplug Decode",description:"The Sparkplug specification version 3.0 requires all payloads to be sent in a",source:"@site/mosquitto_versioned_docs/version-3.1/advanced-features/sparkplug/sparkplug-decode.md",sourceDirName:"advanced-features/sparkplug",slug:"/advanced-features/sparkplug/sparkplug-decode",permalink:"/mosquitto/advanced-features/sparkplug/sparkplug-decode",draft:!1,tags:[],version:"3.1",frontMatter:{id:"sparkplug-decode",title:"Sparkplug Decode",sidebar_label:"Sparkplug Decode"},sidebar:"someSidebar",previous:{title:"Sparkplug Awareness",permalink:"/mosquitto/advanced-features/sparkplug/sparkplug-awareness"},next:{title:"Proxy Protocol",permalink:"/mosquitto/advanced-features/proxy-protocol"}},m={},b=[{value:"Plugin Activation",id:"plugin-activation",level:2}],v={toc:b};function k(e){var t,r=e,{components:a}=r,u=((e,t)=>{var r={};for(var n in e)l.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&p)for(var n of p(e))t.indexOf(n)<0&&s.call(e,n)&&(r[n]=e[n]);return r})(r,["components"]);return(0,n.kt)("wrapper",(t=c(c({},v),u),o(t,i({components:a,mdxType:"MDXLayout"}))),(0,n.kt)("p",null,"The Sparkplug specification version 3.0 requires all payloads to be sent in a\nstandardised Protobuf format. This is very efficient in bandwidth use, but is\nnot human readable. The Sparkplug Decode plugin automatically decodes all\nSparkplug messages arriving on topics matching ",(0,n.kt)("inlineCode",{parentName:"p"},"spBv1.0/#"),", decodes them into\nJSON and republishes them to ",(0,n.kt)("inlineCode",{parentName:"p"},"spJv1.0/#"),".\nbroker to be usable for Sparkplug."),(0,n.kt)("p",null,"This provides a human readable version of each message, which is useful for\nobservation and debugging. Only valid Sparkplug messages will be forwarded and decoded to the ",(0,n.kt)("inlineCode",{parentName:"p"},"spJv1.0/#")," topic, while all others will be ignored."),(0,n.kt)("p",null,"The JSON schema used is from ",(0,n.kt)("a",c({parentName:"p"},{href:"https://github.com/Cirrus-Link/Sparkplug/blob/master/sparkplug_b/sparkplug_b.json"}),"First draft of Sparkplug B JSON\nschema"),",\nhowever it is important to note that this feature is not currently supported by\nSparkplug. It is possible that a standard JSON payload for Sparkplug may appear\nin the future, at which point the output of this plugin may be incompatible.\nFor this reason it is recommended that you do not build your device management\non the JSON output but use it only for observation and debugging."),(0,n.kt)("h2",c({},{id:"plugin-activation"}),"Plugin Activation"),(0,n.kt)("p",null,"To enable the plugin it must be loaded into the broker with, by adding the\nfollowing to your ",(0,n.kt)("inlineCode",{parentName:"p"},"mosquitto.conf"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",c({parentName:"pre"},{className:"language-aconf"}),"global_plugin /usr/lib/cedalo_sparkplug_decode.so\n")),(0,n.kt)("p",null,"There is no further configuration required."))}k.isMDXComponent=!0}}]);