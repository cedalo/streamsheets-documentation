"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[83232],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),s=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=s(n),d=r,m=f["".concat(c,".").concat(d)]||f[d]||p[d]||a;return n?i.createElement(m,o(o({ref:t},u),{},{components:n})):i.createElement(m,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},58138:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>y,frontMatter:()=>f,metadata:()=>m,toc:()=>g});var i=n(3905),r=Object.defineProperty,a=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,u=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,p=(e,t)=>{for(var n in t||(t={}))c.call(t,n)&&u(e,n,t[n]);if(l)for(var n of l(t))s.call(t,n)&&u(e,n,t[n]);return e};const f={id:"mtls",title:"mTLS",sidebar_label:"mTLS"},d=void 0,m={unversionedId:"security/certificates/mtls",id:"version-3.1/security/certificates/mtls",title:"mTLS",description:"Client certificates are a popular way of adding an extra layer of security to your client authentication.",source:"@site/mosquitto_versioned_docs/version-3.1/security/certificates/mtls.md",sourceDirName:"security/certificates",slug:"/security/certificates/mtls",permalink:"/mosquitto/security/certificates/mtls",draft:!1,tags:[],version:"3.1",frontMatter:{id:"mtls",title:"mTLS",sidebar_label:"mTLS"},sidebar:"someSidebar",previous:{title:"Server Certificates",permalink:"/mosquitto/security/certificates/server-certificates"},next:{title:"CA file management",permalink:"/mosquitto/security/certificates/ca-files"}},h={},g=[{value:"Listener configuration",id:"listener-configuration",level:2},{value:"Default Cloud configuration",id:"default-cloud-configuration",level:3},{value:"On-premises configuration",id:"on-premises-configuration",level:3},{value:"Certificate and Key Settings (Server-side)",id:"certificate-and-key-settings-server-side",level:4},{value:"Certificate and Key Settings (Client-side validation)",id:"certificate-and-key-settings-client-side-validation",level:4},{value:"Plugin configuration",id:"plugin-configuration",level:2},{value:"Control API",id:"control-api",level:3}],k={toc:g};function y(e){var t,n=e,{components:r}=n,u=((e,t)=>{var n={};for(var i in e)c.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&l)for(var i of l(e))t.indexOf(i)<0&&s.call(e,i)&&(n[i]=e[i]);return n})(n,["components"]);return(0,i.kt)("wrapper",(t=p(p({},k),u),a(t,o({components:r,mdxType:"MDXLayout"}))),(0,i.kt)("p",null,"Client certificates are a popular way of adding an extra layer of security to your client authentication.\nIt can either be added on top or instead of the regular authentication provided by\nthe role based authentication using username and password. While\nconnecting, a client identifies using a client certificate. The broker has stored a client certificate authority and\nallows a connection, if the client certificate gets validated, the connection is allowed."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",p({parentName:"p"},{href:"/mosquitto/security/certificates/ca-files"}),"CA Management")," allows the upload of client CAs to the broker via a UI."),(0,i.kt)("h2",p({},{id:"listener-configuration"}),"Listener configuration"),(0,i.kt)("p",null,"MTLS has to be activated on a port (listener) level. "),(0,i.kt)("h3",p({},{id:"default-cloud-configuration"}),"Default Cloud configuration"),(0,i.kt)("p",null,"The default broker configuration, when mTLS is selected in a cloud subscription for a port looks like this (shown with port 8883):"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-aconf"}),"# Listener for the application, MQTTS over TCP with client certs\nlistener 8883\ncertfile /mosquitto/config/certs/server.pem\nkeyfile /mosquitto/config/certs/server.key\ncapath /mosquitto/config/capath_mqtts\nrequire_certificate true\n\nenable_control_api true\n\nplugin /usr/lib/cedalo_certificate_management.so\n")),(0,i.kt)("p",null,"If you need any changes to this default please contact our support team. "),(0,i.kt)("h3",p({},{id:"on-premises-configuration"}),"On-premises configuration"),(0,i.kt)("p",null,"The following options can be used for mTLS configuration. "),(0,i.kt)("h4",p({},{id:"certificate-and-key-settings-server-side"}),"Certificate and Key Settings (Server-side)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"cafile <path>")),": Specifies the path to the Certificate Authority (CA) file that the broker will use to validate client certificates."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"capath <path>")),": Specifies the path to the Certificate Authority (CA) folder that the broker will use to validate client certificates. This is needed if more then one file is present. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"certfile <path>")),": The server's public certificate file that will be presented to clients during the TLS handshake."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"keyfile <path>")),": The server's private key file used to establish the TLS connection. The private key should remain secure and not be shared.")),(0,i.kt)("p",null,"The path of the ",(0,i.kt)("inlineCode",{parentName:"p"},"capath")," configuration should contain at least a root CA cert."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Note:"))," The ",(0,i.kt)("inlineCode",{parentName:"p"},"cafile")," configuration with a single PEM file containing the CA\nchain is currently not supported for this command."),(0,i.kt)("h4",p({},{id:"certificate-and-key-settings-client-side-validation"}),"Certificate and Key Settings (Client-side validation)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"require_certificate <true|false>")),": Determines whether clients are required to present a valid certificate for authentication. Set this to ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," to enforce mTLS."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"tls_version <version>")),": Specifies the minimum TLS version allowed for the connection. Common values include ",(0,i.kt)("inlineCode",{parentName:"li"},"tlsv1.2")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"tlsv1.3")," to ensure a secure connection."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"use_identity_as_username <true|false>")),": If set to ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),", the broker will use the client certificate's Common Name (CN) field as the client's username for authentication.")),(0,i.kt)("h2",p({},{id:"plugin-configuration"}),"Plugin configuration"),(0,i.kt)("p",null,"To enable the plugin it must be loaded into the broker with, by adding the\nfollowing to your ",(0,i.kt)("inlineCode",{parentName:"p"},"mosquitto.conf"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-aconf"}),"plugin /usr/lib/cedalo_certificate_management.so\n")),(0,i.kt)("h3",p({},{id:"control-api"}),"Control API"),(0,i.kt)("p",null,"In addition to enable the brokers internal ",(0,i.kt)("inlineCode",{parentName:"p"},"$CONTROL/broker/v1")," API we need to\nadd:"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-aconf"}),"enable_control_api true\n")),(0,i.kt)("p",null,"This is required to determine the listeners identifier, where the changes should be applied to."),(0,i.kt)("p",null,"This plugin provides a Mosquitto control API which manages client CA certificates for\ncertificate based authentication/validation.\nThe topic of the plugins control API is ",(0,i.kt)("inlineCode",{parentName:"p"},"$CONTROL/certificate-management/v1"),".\nCurrently, supported commands offered by the API are ",(0,i.kt)("inlineCode",{parentName:"p"},"insertCACertificate"),", which\ncan be used to extend the existing Certificate Authority (CA) Chain or just the\nRoot CA by an additional signing/validating certificate. To get rid of a\npreviously added CA cert, the ",(0,i.kt)("inlineCode",{parentName:"p"},"deleteCACertificate")," command can be used."))}y.isMDXComponent=!0}}]);