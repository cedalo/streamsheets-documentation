"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[71208],{83166:(e,t,s)=>{var o=s(64836);t.Z=void 0;var r=o(s(64938)),i=s(85893),n=(0,r.default)((0,i.jsx)("path",{d:"M12 2 4 5v6.09c0 5.05 3.41 9.76 8 10.91 4.59-1.15 8-5.86 8-10.91V5l-8-3zm-1.06 13.54L7.4 12l1.41-1.41 2.12 2.12 4.24-4.24 1.41 1.41-5.64 5.66z"}),"GppGood");t.Z=n},65842:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>g,contentTitle:()=>f,default:()=>q,frontMatter:()=>d,metadata:()=>h,toc:()=>b});var o=s(3905),r=s(49044),i=Object.defineProperty,n=Object.defineProperties,a=Object.getOwnPropertyDescriptors,u=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,c=(e,t,s)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s,p=(e,t)=>{for(var s in t||(t={}))l.call(t,s)&&c(e,s,t[s]);if(u)for(var s of u(t))m.call(t,s)&&c(e,s,t[s]);return e};const d={id:"mosquitto-persistent-queue",title:"Persistent Queue",sidebar_label:"Persistent Queue"},f=void 0,h={unversionedId:"broker/Mosquitto Manual/mosquitto-persistent-queue",id:"version-2.8/broker/Mosquitto Manual/mosquitto-persistent-queue",title:"Persistent Queue",description:"In several use cases of an MQTT Message Broker the broker has to deal with unstable or unreliable connectivity.",source:"@site/mosquitto_versioned_docs/version-2.8/broker/Mosquitto Manual/persistent-queue.md",sourceDirName:"broker/Mosquitto Manual",slug:"/broker/Mosquitto Manual/mosquitto-persistent-queue",permalink:"/mosquitto/broker/Mosquitto Manual/mosquitto-persistent-queue",draft:!1,tags:[],version:"2.8",frontMatter:{id:"mosquitto-persistent-queue",title:"Persistent Queue",sidebar_label:"Persistent Queue"},sidebar:"someSidebar",previous:{title:"Sparkplug Awareness",permalink:"/mosquitto/broker/Mosquitto Manual/mosquitto-sparkplug-aware"},next:{title:"Streams",permalink:"/mosquitto/broker/Mosquitto Manual/mosquitto-streams"}},g={},b=[{value:"Memory message queue",id:"memory-message-queue",level:2},{value:"Persistent message queue",id:"persistent-message-queue",level:2}],k={toc:b};function q(e){var t,s=e,{components:i}=s,c=((e,t)=>{var s={};for(var o in e)l.call(e,o)&&t.indexOf(o)<0&&(s[o]=e[o]);if(null!=e&&u)for(var o of u(e))t.indexOf(o)<0&&m.call(e,o)&&(s[o]=e[o]);return s})(s,["components"]);return(0,o.kt)("wrapper",(t=p(p({},k),c),n(t,a({components:i,mdxType:"MDXLayout"}))),(0,o.kt)(r.Z,{mdxType:"PremiumFeature"}),(0,o.kt)("h1",p({},{id:"cedalo-persistent-queue-for-eclipse-mosquitto"}),"Cedalo Persistent Queue for Eclipse Mosquitto"),(0,o.kt)("p",null,"In several use cases of an MQTT Message Broker the broker has to deal with unstable or unreliable connectivity.\nSometimes clients may get disconnected quite frequently and/or reconnect after a significant amount of time.\nThis very often happens with moving assets, which have an unreliable mobile network connectivity.\nOr especially in federated broker setups some broker maybe offline for a longer period of time.\nThe Cedalo Persistent Queue feature will help to deal with such scenarios when larger amount of messages need to be\nstored for either the persistent clients being offline or broker bridge connection not being able to send out\ndata."),(0,o.kt)("h2",p({},{id:"memory-message-queue"}),"Memory message queue"),(0,o.kt)("p",null,"The Eclipse Mosquitto broker supports the queuing of messages for clients that are persistently connected but temporarily offline. This functionality extends to outgoing MQTT bridge connections, holding messages in a queue until the target broker becomes available. These queued messages are stored in memory for all persistent connections that are offline. To ensure data integrity, messages are also backed up in a persistence store through the use of a persistence plugin, such as the Persist SQLite plugin. However, the capacity for queued messages is inherently constrained by the broker's available main memory. This limitation can become apparent in scenarios with high message volumes or prolonged network outages."),(0,o.kt)("p",null,"In Pro Mosquitto it is possible to avoid a crash of the broker due to memory exhaustion. The user may limit the number of messages, which will be queued for a single client or a single outgoing bridge connection by using the config entry ",(0,o.kt)("inlineCode",{parentName:"p"},"max_queued_messages"),"."),(0,o.kt)("p",null,"If the broker is stopped and restarted with queued messages for one of multiple connections all messages will be restored from the\npersistence store before the broker will start its operation. "),(0,o.kt)("h2",p({},{id:"persistent-message-queue"}),"Persistent message queue"),(0,o.kt)("p",null,"The introduction of the Cedalo Persistent Queue feature liberates users from the constraints of main memory for storing messages for offline connections. By configuring the ",(0,o.kt)("inlineCode",{parentName:"p"},"max_persist_queued_messages")," setting, users can specify the number of messages to be queued on disk per client, enabling a reduction in the ",(0,o.kt)("inlineCode",{parentName:"p"},"max_queued_messages")," setting and consequently, the memory footprint."),(0,o.kt)("p",null,"To leverage the persistent queue functionality, a compatible persistence plugin must be configured. Initially, only the Persistent SQLite store supports the Cedalo Persistent Queue feature."),(0,o.kt)("p",null,"Upon restarting, if the broker faces a large volume of queued messages for one or more clients, it will load only the necessary messages into memory and keep the remainder on disk. This approach significantly enhances the restart process for brokers managing extensive message queues."),(0,o.kt)("p",null,"The availability and capacity of the persistent queue may vary based on your license. License details, including features and expiration dates, can be found in the broker log, indicated by entries such as:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"License: Feature persist-queued-messages: 1000000 AVAILABLE until 2024-05-02T15:53:46.")))}q.isMDXComponent=!0},49044:(e,t,s)=>{s.d(t,{Z:()=>a});var o=s(67294),r=s(39082),i=s(62659),n=s(83166);function a({inline:e}){return o.createElement(r.Z,{sx:{margin:e?"0px 5px":"5px",height:e?"22px":void 0,color:"#ffffff",backgroundColor:i.Z[500]},size:"small",icon:o.createElement(n.Z,{style:{color:"white"},size:"small"}),label:"Premium"})}}}]);