"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[5934],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>u});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},h=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),d=c(n),u=o,m=d["".concat(l,".").concat(u)]||d[u]||p[u]||r;return n?a.createElement(m,s(s({ref:t},h),{},{components:n})):a.createElement(m,s({ref:t},h))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},18686:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>u,default:()=>y,frontMatter:()=>d,metadata:()=>m,toc:()=>f});var a=n(3905),o=Object.defineProperty,r=Object.defineProperties,s=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,h=(e,t,n)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,p=(e,t)=>{for(var n in t||(t={}))l.call(t,n)&&h(e,n,t[n]);if(i)for(var n of i(t))c.call(t,n)&&h(e,n,t[n]);return e};const d={id:"getting-started",title:"Getting Started",sidebar_label:"Getting Started"},u=void 0,m={unversionedId:"getting-started",id:"version-2.5/getting-started",title:"Getting Started",description:"If you are new to Eclipse Streamsheets, this section offers a",source:"@site/streamsheets_versioned_docs/version-2.5/gettingstarted.md",sourceDirName:".",slug:"/getting-started",permalink:"/streamsheets/2.5/getting-started",draft:!1,tags:[],version:"2.5",frontMatter:{id:"getting-started",title:"Getting Started",sidebar_label:"Getting Started"},sidebar:"version-2.5/someSidebar",previous:{title:"Streamsheet",permalink:"/streamsheets/2.5/maincomponents/components-streamsheet"},next:{title:"AXIS",permalink:"/streamsheets/2.5/functions/chart/axis"}},g={},f=[{value:"|",id:"",level:2}],b={toc:f};function y(e){var t,o=e,{components:h}=o,d=((e,t)=>{var n={};for(var a in e)l.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&i)for(var a of i(e))t.indexOf(a)<0&&c.call(e,a)&&(n[a]=e[a]);return n})(o,["components"]);return(0,a.kt)("wrapper",(t=p(p({},b),d),r(t,s({components:h,mdxType:"MDXLayout"}))),(0,a.kt)("p",null,"If you are new to ",(0,a.kt)("a",p({parentName:"p"},{href:"./maincomponents/components-streamsheet"}),"Eclipse Streamsheets"),", this section offers a\nquick introduction to help you understand some basic principles.\nIn this step-by-step guide we will build an App, which is meant to\nquickly illustrate how to generate, send and receive data with\nStreamsheets. More specifically, we will create data in one Streamsheet,\ncontinuously send it to the internal MQTT Broker and this way\nproduce a data stream which we will then receive in another\nStreamsheet.  "),(0,a.kt)("p",null,"Let\xb4s get started!"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 1: Create an App"),"  "),(0,a.kt)("p",null,"After logging in, you are taken to the App Dashboard which lists all\nApps you have access to. To create your first App, look to the\nbottom-right corner and identify the \u201cAdd\u201d button (it is the \u201cplus\u201d).\nClick it and choose a meaningful name for your App, e.g. \u201cGreat Start\u201d\nor \u201cCats and Dogs\u201d. The option \u201cNo Consumer\u201d is pre-selected and means\nthat we will create an App which does not have an input data stream\nconnected to it. This is fine for now because, first, we have to create\nsome data."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 2: Generate Data"),"  "),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Step2",src:n(48921).Z,width:"1280",height:"720"}),"  "),(0,a.kt)("p",null,"Since we do not have a real data streams connected to our application\nyet, we simulate some to work with. A simple way to do this is to use\nthe function ",(0,a.kt)("a",p({parentName:"p"},{href:"./functions/math/randbetween"}),"RANDBETWEEN"),". It creates random values between a\nminimum and a maximum. Let\xb4s create two values, one beneath the other\nand name them. Write the names left of the values, e.g. \u201cCats\u201d and\n\u201cDogs\u201d. Then, select all four cells, right-click and define them as a\nJSON Range. A JSON is essentially a number of key-value pairs in which\nthe keys can be thought of as the names for the respective values"),(0,a.kt)("p",null,"Now, this cell range is not only a range in the sheet but also a JSON\nobject which is continuously built with every calculation step of the\nsheet.",(0,a.kt)("br",{parentName:"p"}),"\n","To send these JSON objects and this way create an outgoing data stream,\nwe need Step 3."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 3: Create a Consumer and Producer"),"  "),(0,a.kt)("p",null,"At this point a small theoretical lesson about Streamsheets is\nhelpful:  "),(0,a.kt)("p",null,"To get data into a sheet or send data from a sheet, connections need to\nbe defined. We call these connections Streams.",(0,a.kt)("br",{parentName:"p"}),"\n","Streams always consist of two parts, a Connector and Consumer or a\nConnector and a Producer. You can also think of them as two layers in\nwhich Connectors form the foundation that Consumers and Producers are\nbased on.",(0,a.kt)("br",{parentName:"p"}),"\n","Connectors hold the general information, such as the Host URL, to\nconnect Streamsheets to the outside world. Consumers and Producers, on\nthe other hand, further specify the input (Consumer) and output streams\n(Producer).",(0,a.kt)("br",{parentName:"p"}),"\n",'All three Stream resources are defined in the "Stream" Dashboard.  '),(0,a.kt)("p",null,'This step is optional. Default streams for the internal MQTT Broker are\nalready set. We still encourage you to try and set up your own streams.\nPlease go back to the "Apps" Dashboard and select the "Streams" Tab.  '),(0,a.kt)("p",null,"You can either use the existing MQTT Connector or create a new one. To\nsend the simulated data via MQTT we need an outgoing Stream, thus we\nhave to set up a Producer. Select the MQTT","_",'Connector and add a new\nProducer by clicking on the "+"" button next to "Producer". Further\nsettings are optional.'),(0,a.kt)("p",null,'As we are already in the Streams menu, let\xb4s quickly create a Consumer.\nAgain, click the "+"" button (this time next to "Consumers"). This time\nwe have to specify a topic as an additional parameter, e.g.\n\u201ccatsanddogs\u201d.  '),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Step3",src:n(2573).Z,width:"1280",height:"720"}),"  "),(0,a.kt)("admonition",p({},{type:"info"}),(0,a.kt)("p",{parentName:"admonition"},'The "base topic" in the MQTT Connector defines the top level of the\ntopic structure you are working with. E.g. a Consumer listening to the\ntopic "catsanddogs" really listens to ',"<","basetopic",">",'/catsanddogs. The\n"base topic" is optional.')),(0,a.kt)("h2",p({},{id:""}),"|"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 4: Produce a Message stream"),"  "),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Step4",src:n(38599).Z,width:"1280",height:"720"}),"  "),(0,a.kt)("p",null,"Now, we switch back to our App. Should you have closed the tab, just go\nto the dashboard and open it again.",(0,a.kt)("br",{parentName:"p"}),"\n","To send the created JSON Range, we select an empty cell beneath the\nrange and click \u201cInsert Stream Function\u201d in the toolbar. Choose\n",(0,a.kt)("a",p({parentName:"p"},{href:"./functions/streams/mqttpublish"}),"MQTT.PUBLISH")," and as Stream the Producer you just\ncreated. The message parameter should already be prefilled referencing\nto the JSON Range above. If that is not the case, select the JSON range.\nTo complete ",(0,a.kt)("a",p({parentName:"p"},{href:"./functions/streams/mqttpublish"}),"MQTT.PUBLISH")," enter the MQTT topic you listed in the\nConsumer, possibly \u201ccatsanddogs\u201d, and click OK. Then, start the App by\nclicking \u201cPlay\u201d in the blue bar on the top."),(0,a.kt)("admonition",p({},{type:"tip"}),(0,a.kt)("p",{parentName:"admonition"},"Streamsheets calculate from ",(0,a.kt)("strong",{parentName:"p"},"left to right")," and from ",(0,a.kt)("strong",{parentName:"p"},"top to\nbottom"),". This means, first, row 1 is calculated from left to right,\nthen, row 2 followed by row 3 \u2026 until the end of the sheet is reached.\nAs a consequence, you typically ",(0,a.kt)("strong",{parentName:"p"},"place a stream function behind the\ncells you want to send/produce"),". Placing the stream function before\nthese cells will send the values of the previous calculation step.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Step 5: Consume a data stream"),"  "),(0,a.kt)("p",null,"The easiest way to link an input data stream to a Streamsheet is to\nconnect a Consumer to its Inbox. Let\xb4s take this last step! Create\nanother Streamsheet in this App by clicking the \u201cplus\u201d icon in the\nbottom-right corner. In the new Streamsheet look to the top-left where\nit says \u201cInbox\u201d. Next to it is a cogwheel which takes you to the Inbox\nSettings. Select the Consumer you created before and change the\ncalculation mode to \u201cOn Message Arrival\u201d. In this mode a Streamsheet is\nonly calculated when messages arrive in its Inbox and not in certain\nintervals.  "),(0,a.kt)("p",null,"Done?  "),(0,a.kt)("p",null,"Great! You just set up connections to the local MQTT broker and created\nan App which produces as well as consumes MQTT data streams.  "),(0,a.kt)("p",null,"Messages should be arriving in the Inbox of the second Streamsheet. If\nthat is not the case, check whether your App is running (on \u201cPlay\u201d),\nthat your first Streamsheet has the calculation mode \u201cContinuously\u201d and\nthat the topic in MQTT.PUBLISH() is the same as in the Consumer.  "),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Step5",src:n(22735).Z,width:"1280",height:"720"}),"  "),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Optional Step: Ideas on what to do next"),"  "),(0,a.kt)("p",null,"As mentioned in the beginning, this example serves as a quick\nintroduction.",(0,a.kt)("br",{parentName:"p"}),"\n","Hence, why not extend this Streamsheet model a little? By dragging and\ndropping data points which you receive in the Inbox into the grid, you\ncreate a direct link between data stream and the spreadsheet world.\nConsequently, you can start processing data and build logic with\nspreadsheet formulas, e.g. to calculate KPIs, create dynamic dashboards\nand build decision engines.  "),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"optionalstep",src:n(16060).Z,width:"1280",height:"720"}),"  "),(0,a.kt)("p",null,"You will notice that you are working \u201clive\u201d on the message stream as\nincoming data is immediately transferred to the grid and formulas change\ntheir results accordingly. Additionally, you always see what the current\nresult in each cell is. Remember: with every calculation step the whole\nlogic is recalculated and, therefore, all conditions are reconsidered\nand based upon these, decisions can be taken. For instance, you could\nsend messages to an additional MQTT topic or a slack channel but only if\na certain threshold is met.  "),(0,a.kt)("p",null,"Further, sending data from one Streamsheet or App to another is useful\nwhen building larger models, however, typically you want to set up\nconnections (Streams) to something outside of Streamsheets, too. Hence,\nwhy not set up a new Connector to get your Streamsheets communicating\nwith the outside world?"))}y.isMDXComponent=!0},48921:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Cats-and-Dogs-7ac8ece0a812c5253ecc90ff012cd262.gif"},22735:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Consume-1b9b4e7cc4d1d88b8858c1cd503ba815.gif"},38599:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Publish-0da35e364ac57fe498df0d202039235a.gif"},2573:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/SetupStreams-c3bf051224be253c3b5ba751fc874490.gif"},16060:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/optionalstep-883bd3e5854be506edb40f225981dad8.gif"}}]);