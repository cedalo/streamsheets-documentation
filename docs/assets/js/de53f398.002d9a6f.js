"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[63654],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>d});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},l=Object.keys(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var u=r.createContext({}),p=function(t){var e=r.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},m=function(t){var e=p(t.components);return r.createElement(u.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},s=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,l=t.originalType,u=t.parentName,m=i(t,["components","mdxType","originalType","parentName"]),s=p(n),d=a,k=s["".concat(u,".").concat(d)]||s[d]||c[d]||l;return n?r.createElement(k,o(o({ref:e},m),{},{components:n})):r.createElement(k,o({ref:e},m))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=n.length,o=new Array(l);o[0]=s;var i={};for(var u in e)hasOwnProperty.call(e,u)&&(i[u]=e[u]);i.originalType=t,i.mdxType="string"==typeof t?t:a,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},4226:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>N,contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>k,toc:()=>b});var r=n(3905),a=Object.defineProperty,l=Object.defineProperties,o=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,m=(t,e,n)=>e in t?a(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,c=(t,e)=>{for(var n in e||(e={}))u.call(e,n)&&m(t,n,e[n]);if(i)for(var n of i(e))p.call(e,n)&&m(t,n,e[n]);return t};const s={id:"counter",title:"COUNTER",hide_title:!0},d=void 0,k={unversionedId:"functions/Streamsheet/counter",id:"version-3.0/functions/Streamsheet/counter",title:"COUNTER",description:"COUNTER",source:"@site/streamsheets_versioned_docs/version-3.0/functions/Streamsheet/counter.md",sourceDirName:"functions/Streamsheet",slug:"/functions/Streamsheet/counter",permalink:"/streamsheets/functions/Streamsheet/counter",draft:!1,tags:[],version:"3.0",frontMatter:{id:"counter",title:"COUNTER",hide_title:!0},sidebar:"someSidebar",previous:{title:"CONTINUE",permalink:"/streamsheets/functions/Streamsheet/continue"},next:{title:"CYCLE.GET",permalink:"/streamsheets/functions/Streamsheet/cycleget"}},N={},b=[],f={toc:b};function g(t){var e,n=t,{components:a}=n,m=((t,e)=>{var n={};for(var r in t)u.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&i)for(var r of i(t))e.indexOf(r)<0&&p.call(t,r)&&(n[r]=t[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(e=c(c({},f),m),l(e,o({components:a,mdxType:"MDXLayout"}))),(0,r.kt)("h1",null,"COUNTER"),(0,r.kt)("p",null,'Increments or decrements a cell value by specified step amount. The initial value is defined by "Start" parameter. An optional "End" parameter can be set to define a lower or upper bound. Furthermore an optional "Reset" flag can be used to restart counter if its value evaluates to TRUE.'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("p",null,"=COUNTER(Start, Step, ","[","End","]",", ","[","Reset","]",")"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Start"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Number"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"A number to initialize the counter with.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Step"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Number"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Number which specifies the increment (positive number) or decrement (negative number) steps.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),"End (optional)"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Number"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Number or Condition which defines upper or lower bound.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Reset (optional)"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Boolean"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"If it evaluates to TRUE the counter is reset to Start. Since immediately resets if TRUE, mostly used as a condition or reference on a condition. ",(0,r.kt)("br",null),(0,r.kt)("br",null),"Default value: FALSE")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Number"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Returns the updated counter value.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Formula"),(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Result"),(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Comment"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("pre",null,(0,r.kt)("code",null,"=COUNTER(2, 2)"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"2"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Will initialize counter with 2 and increment by 2 on each step, i.e.: 2, 4, 6,...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("pre",null,(0,r.kt)("code",null,"=COUNTER(10, -2)"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"10"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Will initialize counter with 10 and decrement by -2 on each step, i.e.: 10, 8, 6,...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("pre",null,(0,r.kt)("code",null,"=COUNTER(2, 1, ,STEP.GET() % 2 ","<",">"," 0)"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"2"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Will initialize counter with 2 and resets it on each even step count, i.e.: 2, 3, 2, 3,...")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("pre",null,(0,r.kt)("code",null,"=COUNTER(2, 2, 10)"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"2"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Will count from 2 to 10 in steps of 2, i.e. 2, 4, 6, 8, 10")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("pre",null,(0,r.kt)("code",null,"=COUNTER(10, -2, 0)"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"10"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Will count from 10 down to 0 in steps of -2, i.e. 10, 8, ..., 0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("pre",null,(0,r.kt)("code",null,"=COUNTER(10, -2, 26)"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"10"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Will not decrement since lower bound is greater then start value.")))))}g.isMDXComponent=!0}}]);