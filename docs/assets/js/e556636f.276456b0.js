"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[33033],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),u=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),h=r,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||i;return n?o.createElement(m,a(a({ref:t},c),{},{components:n})):o.createElement(m,a({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},66627:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>h,default:()=>g,frontMatter:()=>p,metadata:()=>m,toc:()=>y});var o=n(3905),r=Object.defineProperty,i=Object.defineProperties,a=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,c=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,d=(e,t)=>{for(var n in t||(t={}))l.call(t,n)&&c(e,n,t[n]);if(s)for(var n of s(t))u.call(t,n)&&c(e,n,t[n]);return e};const p={id:"setting-up-ha-clusters",title:"Setting Up HA Clusters",sidebar_label:"Setting Up HA Clusters"},h=void 0,m={unversionedId:"clustering/setting-up-ha-clusters",id:"version-3.0/clustering/setting-up-ha-clusters",title:"Setting Up HA Clusters",description:"In the following, it is explained how to reconfigure the default cluster installer to run on three separate nodes. The following assumes that you have successfully created a private network with three servers, which have IP addresses available internally and externally.",source:"@site/mosquitto_versioned_docs/version-3.0/clustering/setting-up-clusters.md",sourceDirName:"clustering",slug:"/clustering/setting-up-ha-clusters",permalink:"/mosquitto/3.0/clustering/setting-up-ha-clusters",draft:!1,tags:[],version:"3.0",frontMatter:{id:"setting-up-ha-clusters",title:"Setting Up HA Clusters",sidebar_label:"Setting Up HA Clusters"},sidebar:"someSidebar",previous:{title:"Cluster Overview",permalink:"/mosquitto/3.0/clustering/overview-clusters"},next:{title:"Client Accounts",permalink:"/mosquitto/3.0/security/clients/"}},f={},y=[{value:"Remove via UI",id:"remove-via-ui",level:2},{value:"Remove in the file system",id:"remove-in-the-file-system",level:2},{value:"Mosquitto configuration",id:"mosquitto-configuration",level:2},{value:"HAProxy configuration",id:"haproxy-configuration",level:2},{value:"Docker-compose configuration",id:"docker-compose-configuration",level:2},{value:"DNS",id:"dns",level:2},{value:"Virtual IPs",id:"virtual-ips",level:2}],v={toc:y};function g(e){var t,n=e,{components:r}=n,c=((e,t)=>{var n={};for(var o in e)l.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&s)for(var o of s(e))t.indexOf(o)<0&&u.call(e,o)&&(n[o]=e[o]);return n})(n,["components"]);return(0,o.kt)("wrapper",(t=d(d({},v),c),i(t,a({components:r,mdxType:"MDXLayout"}))),(0,o.kt)("p",null,"In the following, it is explained how to reconfigure the default cluster installer to run on three separate nodes. The following assumes that you have successfully created a private network with three servers, which have IP addresses available internally and externally."),(0,o.kt)("p",null,"It is assumed that you have placed the individual server folder on each node and that the ",(0,o.kt)("inlineCode",{parentName:"p"},"mosquitto")," user is the owner of the folder and its contents. This step can be done later if you choose to ",(0,o.kt)("a",d({parentName:"p"},{href:"#remove-via-ui"}),"remove the cluster via the UI"),"."),(0,o.kt)("p",null,"Also, make sure the needed ports are opened. In the private network, ports 1885, 1883, and 7000 must be open on each server. For the external network, by default, we will use port 1883. If you want to use a different port (e.g., 8883 or 9001, usually used for MQTTs and WSS), please also open these."),(0,o.kt)("p",null,"Follow the next steps for the reconfiguration."),(0,o.kt)("admonition",d({},{type:"note"}),(0,o.kt)("p",{parentName:"admonition"},"This document covers a general approach applicable for all deployment methods. It is written from a docker deployment perspective. Other deployment methods will varey. Please also check out the descriptions for ",(0,o.kt)("a",d({parentName:"p"},{href:"/mosquitto/3.0/deployment/on-premises/deployment/installation/rpm/mosquitto-rpm"}),"RPM"),", ",(0,o.kt)("a",d({parentName:"p"},{href:"/mosquitto/3.0/deployment/on-premises/deployment/installation/kubernetes/high-availability"}),"Kubernetes")," or ",(0,o.kt)("a",d({parentName:"p"},{href:"/mosquitto/3.0/deployment/on-premises/deployment/installation/openshift/high-availability-openshift"}),"Openshift")," if you are using a different deployment. ")),(0,o.kt)("h1",d({},{id:"remove-the-existing-cluster"}),"Remove the existing cluster"),(0,o.kt)("p",null,"There are two ways to delete the existing cluster of the default setup."),(0,o.kt)("h2",d({},{id:"remove-via-ui"}),"Remove via UI"),(0,o.kt)("p",null,"If you have already started the default setup successfully, you can simply go into the UI and delete the cluster. This completely resets the nodes into a ready-to-join status for a new cluster, which will be created after reconfiguring your setup details on the three nodes you have already set up."),(0,o.kt)("p",null,'To do so open the UI and "Edit" the current cluster connection details.\nDelete the cluster by clicking the bin icon und "Public Cluster connection".\nThis deletes the existing cluster. Now all nodes are ready to be deployed. '),(0,o.kt)("h2",d({},{id:"remove-in-the-file-system"}),"Remove in the file system"),(0,o.kt)("p",null,"It is possible to remove the nodes from the cluster manually by deleting the ",(0,o.kt)("inlineCode",{parentName:"p"},"ha-config.json")," file and the contents of the sync folder manually."),(0,o.kt)("p",null,"You can find these files in each server folder in ",(0,o.kt)("inlineCode",{parentName:"p"},"mosquitto/data"),"."),(0,o.kt)("p",null,"When starting the UI for the first time, we will adjust/delete the saved settings from the UI and start fresh in the cluster creation."),(0,o.kt)("h1",d({},{id:"reconfigure-files"}),"Reconfigure files"),(0,o.kt)("h2",d({},{id:"mosquitto-configuration"}),"Mosquitto configuration"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"mosquitto.conf")," file will not need any changes at this moment unless you are looking to add/configure ports."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",d({parentName:"li"},{href:"/mosquitto/3.0/security/certificates/server-certificates"}),"Server certificate configuration")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",d({parentName:"li"},{href:"/mosquitto/3.0/security/certificates/mtls"}),"Client certificate configuration"))),(0,o.kt)("h2",d({},{id:"haproxy-configuration"}),"HAProxy configuration"),(0,o.kt)("p",null,"The HAProxy configuration by default looks like this: "),(0,o.kt)("pre",null,(0,o.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"global\n    daemon\n    maxconn 4096\n\nfrontend mqtt_frontend\n    bind *:1883\n    mode tcp\n    default_backend mqtt_backend\n    timeout client 10m\n\nbackend mqtt_backend\n    timeout connect 5000\n    timeout server 10m\n    mode tcp\n    option redispatch\n    server m1 172.20.1.1:1888 check on-marked-down shutdown-sessions\n    server m2 172.20.1.2:1888 check on-marked-down shutdown-sessions\n    server m3 172.20.1.3:1888 check on-marked-down shutdown-sessions\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"mqtt_frontend")," maps incoming traffic from port 1883 to either one of the three endpoints given in the ",(0,o.kt)("inlineCode",{parentName:"p"},"mqtt_backend")," section. These are the three addresses for the cluster nodes in the ip:port format. Replace the IP addresses with the internal IP addresses from the private network of each node. To avoid port allocation problems, by default, port 1883 is mapped to port 1888 on Mosquitto."),(0,o.kt)("pre",null,(0,o.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"    server m1 <privateip.server1>:1888 check on-marked-down shutdown-sessions\n    server m2 <privateip.server2>:1888 check on-marked-down shutdown-sessions\n    server m3 <privateip.server3>:1888 check on-marked-down shutdown-sessions\n")),(0,o.kt)("p",null,"In a single node setup HAProxy is not used. It is neccessary in a cluster to map incoming traffic from clients to the cluster leader and is further used for TLS termination in case of certificate usage. If you have followed the configuration advice from the certificate configuration mentioned above, you will already have set the TLS termination the way you need it. "),(0,o.kt)("p",null,":::Note\nIf HAProxy is running via docker, make sure to disable the userland proxy in the docker ",(0,o.kt)("inlineCode",{parentName:"p"},"daemon.json")," file. Make sure to add ",(0,o.kt)("inlineCode",{parentName:"p"},'"userland-proxy": false')," and restart docker. Verify the configuration using ",(0,o.kt)("inlineCode",{parentName:"p"},'docker info | grep -i "userland"'),"\n:::"),(0,o.kt)("h2",d({},{id:"docker-compose-configuration"}),"Docker-compose configuration"),(0,o.kt)("p",null,"If you are using a Docker setup, you will need to change some entries in the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," file."),(0,o.kt)("p",null,"The default file looks something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"services:\n    mosquitto:\n        image: registry.cedalo.com/mosquitto/mosquitto:<version>\n        volumes:\n            - ./mosquitto/config:/mosquitto/config\n            - ./mosquitto/data:/mosquitto/data\n            - ./license:/mosquitto/license:ro\n        hostname: mosquitto2\n        networks:\n            mosquitto:\n              ipv4_address: 172.20.1.2\n        environment:\n            CEDALO_LICENSE_FILE: /mosquitto/license/license.lic\n            MOSQUITTO_DYNSEC_PASSWORD: 1LD1RGNgFu1u4tfasOh1j7vOrCLhMVq0\n        restart: unless-stopped\n    haproxy:\n        image: haproxy:2.7\n        ports:\n            - 127.0.0.1:1884:1883 \n        volumes:\n            - ./haproxy:/usr/local/etc/haproxy:ro\n        restart: unless-stopped\n        networks:\n            mosquitto:\n              ipv4_address: 172.20.2.2\nnetworks:\n    mosquitto:\n      name: mosquitto\n      ipam:\n        driver: default\n        config:\n          - subnet: 172.20.0.0/16\n")),(0,o.kt)("p",null,"In the default setup, all communication was done within the local Docker network. Now the private network is used for that communication."),(0,o.kt)("p",null,"Therefore, the Mosquitto broker needs to also map its port to the local network by adding:"),(0,o.kt)("pre",null,(0,o.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"services:\n    mosquitto:\n        ports:\n            - <privateip>:1888:1888 \n")),(0,o.kt)("p",null,"This way, the HAProxy instances from all nodes can redirect traffic to each node in the network."),(0,o.kt)("p",null,"Additionally, we need to update the port mapping of the HAProxy configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"        ports:\n            - 1883:1883 \n")),(0,o.kt)("p",null,"Remove the bind to the localhost (127.0.0.1). This allows access to that port via all interfaces. For servers 2 and 3, you will need to adjust the 1884:1883 and 1885:1883 bindings to 1883:1883 for each of them. This was a temporary measure to avoid port conflicts in the default setup."),(0,o.kt)("h1",d({},{id:"recreate-cluster"}),"Recreate Cluster"),(0,o.kt)("p",null,"Now you can start the setup again and access the UI via ",(0,o.kt)("inlineCode",{parentName:"p"},"localhost:3000"),'\nReconfigure your cluster via the UI. Add the new IP adresses to the nodes and create the new cluster. After adding the first node the UI will use inputs like credentials from node 1 in the next nodes you connect. This speeds up the process. Change only things needed.\nAt least three accessible nodes are needed for the creation of the cluster. After the creation enter the public IP/DNS configured in the next step and finish the process.\nThis should point to the HAProxies or a DNS which redirects to the HAProxies. Click "Done" to finish the setup. '),(0,o.kt)("h1",d({},{id:"cluster-access-for-high-availability"}),"Cluster Access for High Availability"),(0,o.kt)("p",null,"Now your cluster is available via each HAProxy IP address."),(0,o.kt)("p",null,"For a client to access the cluster, it should only know one entry point for the connection. Using the direct IP address of a node is not sufficient."),(0,o.kt)("p",null,"There are multiple ways to make the cluster available:"),(0,o.kt)("h2",d({},{id:"dns"}),"DNS"),(0,o.kt)("p",null,'One way to ensure that your clients connect to the Mosquitto cluster seamlessly is to use DNS (Domain Name System) to provide a single endpoint. With DNS, you can map a domain name to multiple IP addresses (the IPs of your three Mosquitto nodes). This technique is often referred to as "round-robin DNS."'),(0,o.kt)("p",null,"When a client attempts to connect to the domain name, the DNS server provides one of the IP addresses in a rotating sequence. This makes sure the client connections can reach all HA Proxies across all the nodes in the cluster. If one node goes down, the client can automatically reconnect to another node when the DNS query returns a different IP address."),(0,o.kt)("h2",d({},{id:"virtual-ips"}),"Virtual IPs"),(0,o.kt)("p",null,"Another approach to ensure high availability and seamless failover in your Mosquitto cluster setup is to use Virtual IPs (VIPs). A Virtual IP is a single IP address that can be dynamically mapped to one of the nodes in your cluster. "),(0,o.kt)("p",null,"In a three-node setup, a VIP can be configured to move between nodes based on their availability or health status. If the node currently hosting the VIP fails, the VIP can automatically transfer to another healthy node in the cluster, ensuring that clients always have a consistent endpoint to connect to."),(0,o.kt)("p",null,"VIPs are typically managed using failover protocols like VRRP (Virtual Router Redundancy Protocol) or keepalived, which handle the logic of switching the IP address from one node to another based on predefined conditions."),(0,o.kt)("p",null,"By combining VIPs with your Mosquitto cluster, you ensure that your clients have a single, reliable point of entry, even if individual nodes within the cluster become unavailable."))}g.isMDXComponent=!0}}]);