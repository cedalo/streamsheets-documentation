"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[43050],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,f=m["".concat(i,".").concat(d)]||m[d]||c[d]||l;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},66284:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>O,contentTitle:()=>d,default:()=>N,frontMatter:()=>m,metadata:()=>f,toc:()=>h});var r=n(3905),a=Object.defineProperty,l=Object.defineProperties,o=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,u=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,c=(e,t)=>{for(var n in t||(t={}))i.call(t,n)&&u(e,n,t[n]);if(s)for(var n of s(t))p.call(t,n)&&u(e,n,t[n]);return e};const m={id:"json",title:"JSON",sidebar_label:"JSON"},d=void 0,f={unversionedId:"functions/streamsheet/json",id:"version-2.3/functions/streamsheet/json",title:"JSON",description:"A Streamsheet has the possibility to process, generate and accumulate",source:"@site/streamsheets_versioned_docs/version-2.3/functions/streamsheet/json.md",sourceDirName:"functions/streamsheet",slug:"/functions/streamsheet/json",permalink:"/streamsheets/2.3/functions/streamsheet/json",draft:!1,tags:[],version:"2.3",frontMatter:{id:"json",title:"JSON",sidebar_label:"JSON"},sidebar:"version-2.3/someSidebar",previous:{title:"INBOXMETADATA",permalink:"/streamsheets/2.3/functions/streamsheet/inboxmetadata"},next:{title:"JSON.PROCESS",permalink:"/streamsheets/2.3/functions/streamsheet/jsonprocess"}},O={},h=[],b={toc:h};function N(e){var t,a=e,{components:u}=a,m=((e,t)=>{var n={};for(var r in e)i.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&s)for(var r of s(e))t.indexOf(r)<0&&p.call(e,r)&&(n[r]=e[r]);return n})(a,["components"]);return(0,r.kt)("wrapper",(t=c(c({},b),m),l(t,o({components:u,mdxType:"MDXLayout"}))),(0,r.kt)("p",null,'A Streamsheet has the possibility to process, generate and accumulate\ndata. Before sending this data, the cells from a data range have to be\nstructured, in order for an App to interpret them correctly. JSON() is\nparing two columns together to a key and value pair using the JSON\nSyntax. Alternatively it is possible to specify a text which will be\nparsed to JSON or use one of the various INBOX/OUTBOX functions to\nreference an element from a message stored in inbox or outbox\nrespectively. The optional second parameter can be used to convert the\nresulting JSON object to a textual representation. This function is\nmostly used within publish functions like: MQTTPUBLISH. The JSON\nstructure supports quotes "". eg. {"Key":"value"}'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("p",null,"=JSON(DataRangeOrTextOrInboxOutboxFunction,ResultAsText)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),"DataRangeOrTextOrInboxOutboxFunction"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"A data range over at least two columns, only interpreting the first and last column into the JSON object. Or a text which will be evaluated to JSON. Or an INBOX/OUTBOX function to reference an element of a message.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),"ResultAsText"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Optional. Set to TRUE to return a textual representation of resulting JSON object. Defaults to FALSE.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Value")),(0,r.kt)("p",null,"{ JSON } as a placeholder for JSON object or a textual representation,\nif successful."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Function"),(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Result"),(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Comment"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),"=JSON(B6:C8)"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"{ JSON }"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"This is the representation of a cell filled with JSON data.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),"=JSON(B6:C8, TRUE)"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),'{"values":{"temperature":16918,"CO2":49}}'),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"The textual representation of resulting JSON data.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),'=JSON(C4) with following text in C4: {"values":{"temperature":16918,"CO2":49}}'),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"{ JSON }"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"This is the representation of a cell filled with JSON data.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),'=JSON(OUTBOXDATA("MessageId","Customer"))'),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"{ JSON }"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),'This is the representation of a cell filled with JSON data. Internally the cell has a JSON object which represents the "Customer" value from specified outbox message.')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),'=FEEDINBOX(B11,"S1") with B11 JSON(B6:C8)'),(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("img",{alt:"JSON",src:n(99082).Z,width:"458",height:"400"})),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"In Streamsheet S1 the Inbox will be  filled with the JSON gathered by B11")))))}N.isMDXComponent=!0},99082:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/JSON-e6b30192fa1ec871b726a118122382e0.png"}}]);