(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[14409],{83166:(e,n,t)=>{"use strict";var i=t(64836);n.Z=void 0;var a=i(t(64938)),o=t(85893),r=(0,a.default)((0,o.jsx)("path",{d:"M12 2 4 5v6.09c0 5.05 3.41 9.76 8 10.91 4.59-1.15 8-5.86 8-10.91V5l-8-3zm-1.06 13.54L7.4 12l1.41-1.41 2.12 2.12 4.24-4.24 1.41 1.41-5.64 5.66z"}),"GppGood");n.Z=r},64938:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"default",{enumerable:!0,get:function(){return i.createSvgIcon}});var i=t(22236)},22236:(e,n,t)=>{"use strict";t.r(n),t.d(n,{capitalize:()=>a.Z,createChainedFunction:()=>o,createSvgIcon:()=>r.Z,debounce:()=>s,deprecatedPropType:()=>l,isMuiElement:()=>c,ownerDocument:()=>m,ownerWindow:()=>f,requirePropFactory:()=>h,setRef:()=>k,unstable_ClassNameGenerator:()=>q,unstable_useEnhancedEffect:()=>b,unstable_useId:()=>N,unsupportedProp:()=>C,useControlled:()=>w,useEventCallback:()=>v.Z,useForkRef:()=>T.Z,useIsFocusVisible:()=>M.Z});var i=t(37078),a=t(36622);const o=function(...e){return e.reduce(((e,n)=>null==n?e:function(...t){e.apply(this,t),n.apply(this,t)}),(()=>{}))};var r=t(58175);const s=function(e,n=166){let t;function i(...i){clearTimeout(t),t=setTimeout((()=>{e.apply(this,i)}),n)}return i.clear=()=>{clearTimeout(t)},i};const l=function(e,n){return()=>null};var p=t(67294),u=t.t(p,2);const c=function(e,n){return p.isValidElement(e)&&-1!==n.indexOf(e.type.muiName)};function d(e){return e&&e.ownerDocument||document}const m=d;const f=function(e){return d(e).defaultView||window};t(87462);const h=function(e,n){return()=>null};const k=t(7960).Z;const b=t(16600).Z;let g=0;const y=u.useId;const N=function(e){if(void 0!==y){const n=y();return null!=e?e:n}return function(e){const[n,t]=p.useState(e),i=e||n;return p.useEffect((()=>{null==n&&(g+=1,t(`mui-${g}`))}),[n]),i}(e)};const C=function(e,n,t,i,a){return null};const w=function({controlled:e,default:n,name:t,state:i="value"}){const{current:a}=p.useRef(void 0!==e),[o,r]=p.useState(n);return[a?e:o,p.useCallback((e=>{a||r(e)}),[])]};var v=t(66875),T=t(78155),M=t(51625);const q={configure:e=>{console.warn(["MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.","","You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead","","The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401","","The updated documentation: https://mui.com/guides/classname-generator/"].join("\n")),i.Z.configure(e)}}},6121:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>k,contentTitle:()=>f,default:()=>y,frontMatter:()=>m,metadata:()=>h,toc:()=>b});var i=t(3905),a=t(49044),o=Object.defineProperty,r=Object.defineProperties,s=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,c=(e,n,t)=>n in e?o(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,d=(e,n)=>{for(var t in n||(n={}))p.call(n,t)&&c(e,t,n[t]);if(l)for(var t of l(n))u.call(n,t)&&c(e,t,n[t]);return e};const m={id:"mosquitto-kafka-bridge",title:"Kafka Bridge",sidebar_label:"Kafka Bridge"},f=void 0,h={unversionedId:"broker/Mosquitto Manual/Bridges/mosquitto-kafka-bridge",id:"version-2.8/broker/Mosquitto Manual/Bridges/mosquitto-kafka-bridge",title:"Kafka Bridge",description:"The Kafka Bridge plugin can be used to publish data published to the Mosquitto",source:"@site/mosquitto_versioned_docs/version-2.8/broker/Mosquitto Manual/Bridges/Kafka-bridge.md",sourceDirName:"broker/Mosquitto Manual/Bridges",slug:"/broker/Mosquitto Manual/Bridges/mosquitto-kafka-bridge",permalink:"/mosquitto/2.8/broker/Mosquitto Manual/Bridges/mosquitto-kafka-bridge",draft:!1,tags:[],version:"2.8",frontMatter:{id:"mosquitto-kafka-bridge",title:"Kafka Bridge",sidebar_label:"Kafka Bridge"},sidebar:"someSidebar",previous:{title:"MongoDB Bridge",permalink:"/mosquitto/2.8/broker/Mosquitto Manual/Bridges/mosquitto-mongodb-bridge"},next:{title:"Google Pub/Sub Bridge",permalink:"/mosquitto/2.8/broker/Mosquitto Manual/Bridges/mosquitto-google-pubsub-bridge"}},k={},b=[{value:"Plugin activation",id:"plugin-activation",level:2},{value:"Config file format",id:"config-file-format",level:2},{value:"JSON Schema",id:"json-schema",level:2}],g={toc:b};function y(e){var n,t=e,{components:o}=t,c=((e,n)=>{var t={};for(var i in e)p.call(e,i)&&n.indexOf(i)<0&&(t[i]=e[i]);if(null!=e&&l)for(var i of l(e))n.indexOf(i)<0&&u.call(e,i)&&(t[i]=e[i]);return t})(t,["components"]);return(0,i.kt)("wrapper",(n=d(d({},g),c),r(n,s({components:o,mdxType:"MDXLayout"}))),(0,i.kt)(a.Z,{mdxType:"PremiumFeature"}),(0,i.kt)("p",null,"The Kafka Bridge plugin can be used to publish data published to the Mosquitto\nbroker to a Kafka broker. The plugin can handle multiple Kafka broker connections. To define which MQTT topics should be bridged to the Kafka broker multiple topping mappings can be specified (see ",(0,i.kt)("a",d({parentName:"p"},{href:"#kafka-bridgejson"}),"example configuration"),"). The implemented Kafka client additionally allowes ",(0,i.kt)("em",{parentName:"p"},"basic authentication")," (username, password) with ",(0,i.kt)("inlineCode",{parentName:"p"},"SASL")," (included mechanisms: ",(0,i.kt)("inlineCode",{parentName:"p"},"plain"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"scram-sha-256"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"scram-sha-512"),").\nShould the Kafka Bridge be unable to establish a connection to the Kafka broker, incoming messages will be stored in a ",(0,i.kt)("inlineCode",{parentName:"p"},"queue"),". The size of the queue can be set with the ",(0,i.kt)("inlineCode",{parentName:"p"},"queueSize")," parameter and is valid for each Kafka topic specified in the topic mappings. This is due to the type of queue we use (",(0,i.kt)("inlineCode",{parentName:"p"},"QueueMap"),"). This type of queue allows a higher throughput because messages of all topics get merged into so called ",(0,i.kt)("inlineCode",{parentName:"p"},"ProducerBatches")," before they are sent to Kafka."),(0,i.kt)("h2",d({},{id:"plugin-activation"}),"Plugin activation"),(0,i.kt)("p",null,"To enable the NodeJS Kafka Bridge plugin in the broker add the following to the\nmosquitto.conf file:"),(0,i.kt)("pre",null,(0,i.kt)("code",d({parentName:"pre"},{}),"plugin /usr/lib/cedalo_kafka_bridge.so\n\npersistence_location /mosquitto/data\n")),(0,i.kt)("p",null,"This is an example configuration snipped, which applies to the docker container\nsetup. For installation not running in a container the above configuration needs\nto be adjusted accordingly."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"persistence_location")," is used as the search path for the plugins config file."),(0,i.kt)("h2",d({},{id:"config-file-format"}),"Config file format"),(0,i.kt)("p",null,"The config is stored in a single JSON file (named ",(0,i.kt)("inlineCode",{parentName:"p"},"kafka-bridge.json"),") located inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"persistence_location")," which is defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"mosquitto.conf"),". There is also a ",(0,i.kt)("a",d({parentName:"p"},{href:"#json-schema"}),"schema")," at the bottom of this page which contains all possible field. The following fields of the config are mandatory:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name"),": Name of the Kafka Bridge config (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"brokers"),": List of the Kafka broker's adresses (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"array")," of type ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"clientId"),": ID of the Kafka client that published the message. The ",(0,i.kt)("inlineCode",{parentName:"li"},"clientId")," can be set arbitrarily. The purpose of this ID is to provide more data about the source of requests than IP address and port (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"allowAutoTopicCreation"),": If set to true, topics will be automatically created in the Kafka broker in case the topic does not exist (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"queueSize"),": Size of the internal queue that is valid for each Kafka topic. The queue is used to store messages in case that the plugin cannot establish a connection to the Kafka broker. If the ",(0,i.kt)("inlineCode",{parentName:"li"},"queueSize")," is reached incoming messages will be dropped. The plugin will produce log messages in those cases (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", minimum: ",(0,i.kt)("inlineCode",{parentName:"li"},"1"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"topicMappings"),": List of topic mappings where (multiple) MQTT topics can be mapped to one Kafka topic (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"array")," of type ",(0,i.kt)("inlineCode",{parentName:"li"},"object"),").")),(0,i.kt)("p",null,"Optional fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sasl"),": Used to configure ",(0,i.kt)("em",{parentName:"li"},"basic authentication")," (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"object"),") (see more detailed information below the example ",(0,i.kt)("inlineCode",{parentName:"li"},"kafka-bridge.json"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"retryPublishMinDelay"),": Defines the minimum delay in milliseconds before the plugin tries to resend a message, once the first publish failed. If not specified there will be no retry after first failed publish. (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),", minimum: ",(0,i.kt)("inlineCode",{parentName:"li"},"1"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"retryPublishMaxDelay"),": Defines the maximum delay in milliseconds before the plugin tries to publish a message again, once the first publish failed. If not specified there will be no retry after first failed publish. (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ssl"),": If set to true, SSL will be enabled for the connection between the Kafka client and Kafka broker. Use an object with ",(0,i.kt)("inlineCode",{parentName:"li"},"keyFile"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"certFile")," and/or ",(0,i.kt)("inlineCode",{parentName:"li"},"caFile")," to enable SSL and use certificates when connecting to Kafka (type: ",(0,i.kt)("inlineCode",{parentName:"li"},"bool"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),") or (type ",(0,i.kt)("inlineCode",{parentName:"li"},"object"),").")),(0,i.kt)("p",null,"An example for the ",(0,i.kt)("inlineCode",{parentName:"p"},"kafka-bridge.json")," is (see all available options ",(0,i.kt)("a",d({parentName:"p"},{href:"#json-schema"}),"here"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",d({parentName:"pre"},{className:"language-json"}),'[\n    {\n        "name": "sensorData",\n        "connection": {\n            "brokers": [\n                "127.0.0.1:29092"\n            ],\n            "clientId": "mosquitto-broker",\n            "allowAutoTopicCreation": true,\n            "queueSize": 10,\n            "sasl": {\n                "mechanism": "plain",\n                "username": "user",\n                "password": "secret_password"\n            },\n            "retryPublishMinDelay": 250,\n            "retryPublishMaxDelay": 2500\n        },\n        "topicMappings": [\n            {\n                "name": "sensorAll",\n                "kafkaTopic": "sensorAll",\n                "mqttTopics": [\n                    "sensor/#"\n                ]\n            }\n        ]\n    }\n]\n')),(0,i.kt)("p",null,"In this example config named ",(0,i.kt)("inlineCode",{parentName:"p"},'"sensorData"')," it is expected that a Kafka broker is already running on localhost listening on port 29092. In general there could be more than one broker in the ",(0,i.kt)("inlineCode",{parentName:"p"},"brokers")," array."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"queueSize")," parameter is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"10"),". That means that each Kafka topic mapped in the ",(0,i.kt)("inlineCode",{parentName:"p"},"topicMappings")," has a queue that stores up to 10 messages in case that the Kafka client cannot establish a connection to the Kafka broker."),(0,i.kt)("p",null,"To configure ",(0,i.kt)("em",{parentName:"p"},"basic authentication")," (username, password) with ",(0,i.kt)("inlineCode",{parentName:"p"},"SASL")," assign the fields ",(0,i.kt)("inlineCode",{parentName:"p"},"mechanism"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"username")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"password")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"sasl")," block (available mechanisms for SASL: ",(0,i.kt)("inlineCode",{parentName:"p"},"plain"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"scram-sha-256"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"scram-sha-512"),"). The mechanism and credentials in the config file must match to those in the Kafka broker."),(0,i.kt)("p",null,"In case that the client failed to publish a message (e.g., Kafka broker returned an error) the plugin will wait at least 250 milliseconds and at most 2500 milliseconds until it retries to publish the message again. This behavior is defined by the ",(0,i.kt)("inlineCode",{parentName:"p"},"retryPublishMinDelay")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"retryPublishMaxDelay")," values in the plugin's config file. These values are passed to the implemented Kafka client, which automatically manages the retry mechanism."),(0,i.kt)("p",null,"In this config each MQTT topic payload published to ",(0,i.kt)("inlineCode",{parentName:"p"},"sensor/#")," will be published to the Kafka ",(0,i.kt)("inlineCode",{parentName:"p"},"sensorAll")," topic. This is achieved by defining a topic mapping in the ",(0,i.kt)("inlineCode",{parentName:"p"},"topicMappings")," section of the configuration file. So, for all topics that should be bridged to the Kafka broker there has to be a topic mapping configured. Each topic mapping defines a list of MQTT topic filters, and the Kafka topic where matching messages will be written. If there is no topic mapping, no messages of the respective MQTT topic will be forwarded."),(0,i.kt)("h2",d({},{id:"json-schema"}),"JSON Schema"),(0,i.kt)("p",null,"Overview over all possible parameters for the ",(0,i.kt)("inlineCode",{parentName:"p"},"kafka-bridge.json"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",d({parentName:"pre"},{className:"language-json"}),'{\n    "type": "array",\n    "description": "List of sub-configurations per Kafka connection.",\n    "items": {\n        "type": "object",\n        "description": "Sub-configurations per Kafka connection.",\n        "properties": {\n            "name": {\n                "type": "string",\n                "description": "Textual identifier of this configuration."\n            },\n            "connection": {\n                "type": "object",\n                "description": "Kafka connection specific configurations.",\n                "properties": {\n                    "brokers": {\n                        "type": "array",\n                        "description": "List of brokers, e.g. \\"localhost:9092\\"",\n                        "items": {\n                            "type": "string"\n                        }\n                    },\n                    "clientId": {\n                        "type": "string"\n                    },\n                    "ssl": {\n                        "oneOf": [\n                            {\n                                "type": "boolean",\n                                "nullable": true\n                            },\n                            {\n                                "type": "object",\n                                "properties": {\n                                    "certFile": {\n                                        "type": "string",\n                                        "nullable": true\n                                    },\n                                    "keyFile": {\n                                        "type": "string",\n                                        "nullable": true\n                                    },\n                                    "caFile": {\n                                        "type": "string",\n                                        "nullable": true\n                                    }\n                                },\n                                "nullable": true\n                            }\n                        ]\n                    },\n                    "sasl": {\n                        "type": "object",\n                        "description": "SASL Configuration.",\n                        "properties": {\n                            "mechanism": {\n                                "type": "string",\n                                "enum": [\n                                    "plain",\n                                    "scram-sha-256",\n                                    "scram-sha-512"\n                                ]\n                            },\n                            "username": {\n                                "type": "string"\n                            },\n                            "password": {\n                                "type": "string"\n                            }\n                        },\n                        "nullable": true,\n                        "required": [\n                            "username",\n                            "password",\n                            "mechanism"\n                        ]\n                    },\n                    "allowAutoTopicCreation": {\n                        "type": "boolean"\n                    },\n                    "queueSize": {\n                        "type": "integer",\n                        "description": "Specifies the limit of not-yet-processed/published MQTT messages, before the plugin starts to drop them.",\n                        "minimum": 1\n                    },\n                    "retryPublishMinDelay": {\n                        "type": "integer",\n                        "description": "Initial delay in milliseconds before the plugin tries to publish a message again, once the server returned an error or was not available. The increment follows a pattern of double growth, where each increase is doubled compared to the previous increment. If not specified, the plugin won\'t try to resend messages again after the first try.",\n                        "minimum": 1,\n                        "nullable": true\n                    },\n                    "retryPublishMaxDelay": {\n                        "type": "integer",\n                        "description": "Maximum delay in milliseconds before the plugin tries to publish a message again, once the server returned an error or was not available. If not specified, the plugin won\'t try to resend messages again after the first try.",\n                        "minimum": 1,\n                        "nullable": true\n                    }\n                },\n                "required": [\n                    "brokers",\n                    "clientId",\n                    "queueSize"\n                ]\n            },\n            "topicMappings": {\n                "type": "array",\n                "items": {\n                    "type": "object",\n                    "properties": {\n                        "name": {\n                            "type": "string",\n                            "description": "Textual identifier of this topic mapping."\n                        },\n                        "kafkaTopic": {\n                            "type": "string",\n                            "description": "Name of the topic, the MQTT data should published to."\n                        },\n                        "mqttTopics": {\n                            "type": "array",\n                            "description": "List of topic filters the plugin forwards messages from.",\n                            "items": {\n                                "type": "string"\n                            },\n                            "minItems": 1\n                        }\n                    },\n                    "required": [\n                        "name",\n                        "kafkaTopic",\n                        "mqttTopics"\n                    ]\n                }\n            }\n        },\n        "required": [\n            "name",\n            "connection",\n            "topicMappings"\n        ]\n    }\n}\n')))}y.isMDXComponent=!0},49044:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});var i=t(67294),a=t(39082),o=t(62659),r=t(83166);function s({inline:e}){return i.createElement(a.Z,{sx:{margin:e?"0px 5px":"0px 5px 5px 10px",height:e?"22px":void 0,color:"#ffffff",backgroundColor:o.Z[500]},size:"small",icon:i.createElement(r.Z,{style:{color:"white"},size:"small"}),label:"Premium"})}},64836:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports}}]);