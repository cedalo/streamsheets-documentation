"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[72610],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=c(t),g=o,u=l["".concat(p,".").concat(g)]||l[g]||m[g]||i;return t?r.createElement(u,a(a({ref:n},d),{},{components:t})):r.createElement(u,a({ref:n},d))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=l;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}l.displayName="MDXCreateElement"},46070:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>f,contentTitle:()=>g,default:()=>h,frontMatter:()=>l,metadata:()=>u,toc:()=>y});var r=t(3905),o=Object.defineProperty,i=Object.defineProperties,a=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,d=(e,n,t)=>n in e?o(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,m=(e,n)=>{for(var t in n||(n={}))p.call(n,t)&&d(e,t,n[t]);if(s)for(var t of s(n))c.call(n,t)&&d(e,t,n[t]);return e};const l={},g=void 0,u={unversionedId:"bridges/mongodb-bridge-schema",id:"version-3.1/bridges/mongodb-bridge-schema",title:"mongodb-bridge-schema",description:"Schema for the MongoDB\xae Bridge, which describes all configuration options for the bridge.",source:"@site/mosquitto_versioned_docs/version-3.1/bridges/mongodb-bridge-schema.md",sourceDirName:"bridges",slug:"/bridges/mongodb-bridge-schema",permalink:"/mosquitto/bridges/mongodb-bridge-schema",draft:!1,tags:[],version:"3.1",frontMatter:{}},f={},y=[],b={toc:y};function h(e){var n,t=e,{components:o}=t,d=((e,n)=>{var t={};for(var r in e)p.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&s)for(var r of s(e))n.indexOf(r)<0&&c.call(e,r)&&(t[r]=e[r]);return t})(t,["components"]);return(0,r.kt)("wrapper",(n=m(m({},b),d),i(n,a({components:o,mdxType:"MDXLayout"}))),(0,r.kt)("p",null,"Schema for the MongoDB\xae Bridge, which describes all configuration options for the bridge. "),(0,r.kt)("pre",null,(0,r.kt)("code",m({parentName:"pre"},{className:"language-json"}),'{\n    "type": "object",\n    "description": "Config object representing the MongoDB-Bridge configuration.",\n    "properties": {\n        "version": {\n            "description": "Version of the configuration schema",\n            "type": "string"\n        },\n        "connections": {\n            "type": "array",\n            "description": "Array of sub-configurations per MongoDB connection/database.",\n            "items": {\n                "properties": {\n                    "name": {\n                        "type": "string",\n                        "description": "Textual identifier of this configuration."\n                    },\n                    "connection": {\n                        "type": "object",\n                        "description": "MongoDB server specific configurations.1",\n                        "properties": {\n                            "connectionURI": {\n                                "type": "string",\n                                "description": "MongoDB connection string that contains protocol, hostname, port, database name, optional credentials and options."\n                            },\n                            "connectionParameters": {\n                                "type": "object",\n                                "description": "Object that holds connection parameters to connect to the MongoDB server.",\n                                "properties": {\n                                    "hostname": {\n                                        "type": "string",\n                                        "description": "Hostname or IP address of the MongoDB server."\n                                    },\n                                    "port": {\n                                        "type": "integer",\n                                        "description": "Port the MongoDB server is listening on."\n                                    },\n                                    "database": {\n                                        "type": "string",\n                                        "description": "Name of the database, the data should be inserted to."\n                                    },\n                                    "credentials": {\n                                        "type": "object",\n                                        "description": "Basic authentication configuration.",\n                                        "properties": {\n                                            "username": {\n                                                "type": "string"\n                                            },\n                                            "password": {\n                                                "type": "string"\n                                            }\n                                        }\n                                    }\n                                },\n                                "required": [\n                                    "hostname",\n                                    "port",\n                                    "database"\n                                ]\n                            }\n                        },\n                        "oneOf": [\n                            {\n                                "required": [\n                                    "connectionURI"\n                                ]\n                            },\n                            {\n                                "required": [\n                                    "connectionParameters"\n                                ]\n                            }\n                        ]\n                    },\n                    "options": {\n                        "type": "object",\n                        "description": "Options to configure queueing and publish retry mechanism.",\n                        "properties": {\n                            "maxQueuedMessages": {\n                                "type": "integer",\n                                "minimum": 1,\n                                "description": "Specifies the limit of not-yet-processed/inserted MQTT messages, before the plugin starts to drop them."\n                            },\n                            "retryInsertMinDelay": {\n                                "type": "integer",\n                                "default": 0,\n                                "minimum": 1,\n                                "description": "Initial delay in milliseconds before the plugin tries to insert a message again, once the server returned an error or was not available. The increment follows a pattern of double growth, where each increase is doubled compared to the previous increment. If not specified, the plugin won\'t try to resend messages again after the first try."\n                            },\n                            "retryInsertMaxDelay": {\n                                "type": "integer",\n                                "default": 0,\n                                "minimum": 1,\n                                "description": "Maximum delay in milliseconds before the plugin tries to insert a message again, once the server returned an error or was not available. If not specified, the plugin won\'t try to resend messages again after the first try."\n                            }\n                        },\n                        "required": [\n                            "maxQueuedMessages"\n                        ]\n                    },\n                    "topicMappings": {\n                        "type": "array",\n                        "items": {\n                            "type": "object",\n                            "properties": {\n                                "name": {\n                                    "type": "string",\n                                    "description": "Textual identifier of this topic mapping."\n                                },\n                                "target": {\n                                    "type": "string",\n                                    "description": "Name of the collection, the MQTT data should inserted to."\n                                },\n                                "schemaMapping": {\n                                    "type": "string",\n                                    "description": "Name of a schema mapping, which should be applied to this topic mapping. If not specified the default schema mapping including all fields will be used."\n                                },\n                                "mqttTopics": {\n                                    "type": "array",\n                                    "description": "List of topic filters the plugin forwards messages from, separated by a comma.",\n                                    "items": {\n                                        "type": "string"\n                                    }\n                                }\n                            },\n                            "required": [\n                                "name",\n                                "target",\n                                "mqttTopics"\n                            ]\n                        }\n                    }\n                },\n                "required": [\n                    "name",\n                    "connection",\n                    "options",\n                    "topicMappings"\n                ]\n            }\n        },\n        "schemaMappings": {\n            "type": "array",\n            "items": {\n                "type": "object",\n                "properties": {\n                    "name": {\n                        "type": "string",\n                        "description": "Textual identifier of this schema mapping."\n                    },\n                    "mapping": {\n                        "description": "Array of mapped MQTT message properties.",\n                        "type": "array",\n                        "items": {\n                            "type": "object",\n                            "description": "Mapping object where \\"target\\" is the column name and \\"source\\" is the MQTT message information field.",\n                            "properties": {\n                                "source": {\n                                    "description": "MQTT message property",\n                                    "type": "string",\n                                    "enum": [\n                                        "hostname",\n                                        "payload",\n                                        "jsonPayload",\n                                        "topic",\n                                        "qos",\n                                        "client_id",\n                                        "retain",\n                                        "timestamp"\n                                    ]\n                                },\n                                "target": {\n                                    "description": "Target name (e.g. DB column, destination JSON document property, etc)",\n                                    "type": "string"\n                                }\n                            },\n                            "required": [\n                                "source",\n                                "target"\n                            ]\n                        }\n                    }\n                }\n            }\n        }\n    },\n    "required": [\n        "connections",\n        "schemaMappings"\n    ]\n}\n')))}h.isMDXComponent=!0}}]);