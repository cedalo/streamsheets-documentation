"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[21244],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>d});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},l=Object.keys(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=r.createContext({}),s=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=s(t.components);return r.createElement(p.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},c=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,l=t.originalType,p=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),c=s(n),d=a,N=c["".concat(p,".").concat(d)]||c[d]||m[d]||l;return n?r.createElement(N,o(o({ref:e},u),{},{components:n})):r.createElement(N,o({ref:e},u))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i.mdxType="string"==typeof t?t:a,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},41582:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>k,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>N,toc:()=>g});var r=n(3905),a=Object.defineProperty,l=Object.defineProperties,o=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,u=(t,e,n)=>e in t?a(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,m=(t,e)=>{for(var n in e||(e={}))p.call(e,n)&&u(t,n,e[n]);if(i)for(var n of i(e))s.call(e,n)&&u(t,n,e[n]);return t};const c={id:"json",title:"JSON",hide_title:!0},d=void 0,N={unversionedId:"functions/Streamsheet/json",id:"version-3.0/functions/Streamsheet/json",title:"JSON",description:"JSON",source:"@site/streamsheets_versioned_docs/version-3.0/functions/Streamsheet/json.md",sourceDirName:"functions/Streamsheet",slug:"/functions/Streamsheet/json",permalink:"/streamsheets/functions/Streamsheet/json",draft:!1,tags:[],version:"3.0",frontMatter:{id:"json",title:"JSON",hide_title:!0},sidebar:"someSidebar",previous:{title:"INTERVAL.SET",permalink:"/streamsheets/functions/Streamsheet/intervalset"},next:{title:"JSON.PROCESS",permalink:"/streamsheets/functions/Streamsheet/jsonprocess"}},k={},g=[],f={toc:g};function h(t){var e,a=t,{components:u}=a,c=((t,e)=>{var n={};for(var r in t)p.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&i)for(var r of i(t))e.indexOf(r)<0&&s.call(t,r)&&(n[r]=t[r]);return n})(a,["components"]);return(0,r.kt)("wrapper",(e=m(m({},f),c),l(e,o({components:u,mdxType:"MDXLayout"}))),(0,r.kt)("h1",null,"JSON"),(0,r.kt)("p",null,'A Streamsheet has the possibility to process, generate and accumulate data. Before sending this data, the cells from a data range have to be structured, in order for an App to interpret them correctly. JSON() is paring two columns together to a key and value pair using the JSON Syntax. Alternatively it is possible to specify a text which will be parsed to JSON or use one of the various INBOX/OUTBOX functions to reference an element from a message stored in inbox or outbox respectively. The optional second parameter can be used to convert the resulting JSON object to a textual representation. This function is mostly used within publish functions like: MQTTPUBLISH. The JSON structure supports quotes "". eg. {"Key":"value"}'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("p",null,"=JSON(DataRangeOrTextOrInboxOutboxFunction, ","[","ResultAsText","]",")"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),"DataRangeOrTextOrInboxOutboxFunction"),(0,r.kt)("td",m({parentName:"tr"},{align:null})),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"A data range over at least two columns, only interpreting the first and last column into the JSON object. Or a text which will be evaluated to JSON. Or an INBOX/OUTBOX function to reference an element of a message.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),"ResultAsText (optional)"),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"Boolean"),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"Set to TRUE to return a textual representation of resulting JSON object. ",(0,r.kt)("br",null),(0,r.kt)("br",null),"Default value: FALSE")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),"JSON"),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"{ JSON } as a placeholder for JSON object or a textual representation, if successful.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",m({parentName:"tr"},{align:null})),(0,r.kt)("th",m({parentName:"tr"},{align:null}),"A"),(0,r.kt)("th",m({parentName:"tr"},{align:null}),"B"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),"1"),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"values"),(0,r.kt)("td",m({parentName:"tr"},{align:null}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),"2"),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"temperature"),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"16918")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),"3"),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"CO2"),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"49")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),"4"),(0,r.kt)("td",m({parentName:"tr"},{align:null})),(0,r.kt)("td",m({parentName:"tr"},{align:null}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),"5"),(0,r.kt)("td",m({parentName:"tr"},{align:null}),'{"values":{"temperature":16918,"CO2":49}}'),(0,r.kt)("td",m({parentName:"tr"},{align:null}))))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Formula"),(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Result"),(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Comment"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),(0,r.kt)("pre",null,(0,r.kt)("code",null,"=JSON(A1:B3)"))),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"{ JSON }"),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"This is the representation of a cell filled with JSON data.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),(0,r.kt)("pre",null,(0,r.kt)("code",null,"=JSON(A1:B3, TRUE)"))),(0,r.kt)("td",m({parentName:"tr"},{align:null}),'{"values":{"temperature":16918,"CO2":49}}'),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"The textual representation of resulting JSON data.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),(0,r.kt)("pre",null,(0,r.kt)("code",null,"=JSON(A5)"))),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"{ JSON }"),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"This is the representation of a cell filled with JSON data.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),(0,r.kt)("pre",null,(0,r.kt)("code",null,'=JSON(OUTBOXDATA("MessageId","Customer"))'))),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"{ JSON }"),(0,r.kt)("td",m({parentName:"tr"},{align:null}),'This is the representation of a cell filled with JSON data. Internally the cell has a JSON object which represents the "Customer" value from specified outbox message.')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),(0,r.kt)("pre",null,(0,r.kt)("code",null,"=FEEDINBOX(JSON(A1:B3),Sheet1!)"))),(0,r.kt)("td",m({parentName:"tr"},{align:null}),(0,r.kt)("img",{alt:"JSON",src:n(28849).Z,width:"458",height:"400"})),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"In Streamsheet Sheet1 the Inbox will be filled with the JSON")))))}h.isMDXComponent=!0},28849:(t,e,n)=>{n.d(e,{Z:()=>r});const r=n.p+"assets/images/JSON-e6b30192fa1ec871b726a118122382e0.png"}}]);