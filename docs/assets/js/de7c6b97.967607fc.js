"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[60944],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>u});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=o.createContext({}),c=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return o.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=c(t),u=a,g=m["".concat(p,".").concat(u)]||m[u]||d[u]||r;return t?o.createElement(g,i(i({ref:n},l),{},{components:t})):o.createElement(g,i({ref:n},l))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=m;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},78403:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>f,contentTitle:()=>u,default:()=>y,frontMatter:()=>m,metadata:()=>g,toc:()=>h});var o=t(3905),a=Object.defineProperty,r=Object.defineProperties,i=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,l=(e,n,t)=>n in e?a(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,d=(e,n)=>{for(var t in n||(n={}))p.call(n,t)&&l(e,t,n[t]);if(s)for(var t of s(n))c.call(n,t)&&l(e,t,n[t]);return e};const m={},u=void 0,g={unversionedId:"bridges/mongodb-bridge-examples",id:"version-3.1/bridges/mongodb-bridge-examples",title:"mongodb-bridge-examples",description:"An example for the plugin configuration (mongodb-bridge.json) is:",source:"@site/mosquitto_versioned_docs/version-3.1/bridges/mongodb-bridge-examples.md",sourceDirName:"bridges",slug:"/bridges/mongodb-bridge-examples",permalink:"/mosquitto/bridges/mongodb-bridge-examples",draft:!1,tags:[],version:"3.1",frontMatter:{}},f={},h=[],b={toc:h};function y(e){var n,t=e,{components:a}=t,l=((e,n)=>{var t={};for(var o in e)p.call(e,o)&&n.indexOf(o)<0&&(t[o]=e[o]);if(null!=e&&s)for(var o of s(e))n.indexOf(o)<0&&c.call(e,o)&&(t[o]=e[o]);return t})(t,["components"]);return(0,o.kt)("wrapper",(n=d(d({},b),l),r(n,i({components:a,mdxType:"MDXLayout"}))),(0,o.kt)("p",null,"An example for the plugin configuration (",(0,o.kt)("inlineCode",{parentName:"p"},"mongodb-bridge.json"),") is:"),(0,o.kt)("pre",null,(0,o.kt)("code",d({parentName:"pre"},{className:"language-json"}),'{\n    "connections": [\n        {\n            "name": "connection-to-db1",\n            "connection": {\n                "connectionParameters": {\n                    "hostname": "mongodb",\n                    "port": 27017,\n                    "database": "db1",\n                    "credentials": {\n                        "username": "user1",\n                        "password": "secret123"\n                    }\n                }\n            },\n            "options": {\n                "maxQueuedMessages": 100000,\n                "retryInsertMinDelay": 5,\n                "retryInsertMaxDelay": 25000\n            },\n            "topicMappings": [\n                {\n                    "name": "topic-mapping",\n                    "target": "sensorData",\n                    "schemaMapping": "reduced-mapping",\n                    "mqttTopics": [\n                        "sensor_data/#"\n                    ]\n                }\n            ]\n        }\n    ],\n    "schemaMappings": [\n        {\n            "name": "reduced-mapping",\n            "mapping": [\n                {\n                    "source": "payload",\n                    "target": "data"\n                },\n                {\n                    "source": "hostname",\n                    "target": "nodeId"\n                }\n            ]\n        }\n    ]\n}\n')),(0,o.kt)("p",null,"With this example the plugin will create a single client to connect to a MongoDB instance with the URI: ",(0,o.kt)("inlineCode",{parentName:"p"},"mongodb://user1:secret123@mongodb:27017"),"."),(0,o.kt)("p",null,"All data received on ",(0,o.kt)("inlineCode",{parentName:"p"},"sensor_data/#")," topics will be published to the collection ",(0,o.kt)("inlineCode",{parentName:"p"},"sensorData")," of the database ",(0,o.kt)("inlineCode",{parentName:"p"},"db1"),". This is configured using topic mappings, which define the MQTT topics inserted to MongoDB. Without a topic mapping, no messages will be written to MongoDB. Each topic mapping defines a list of MQTT topic filters, and the MongoDB collectio nwhere matching messages will be written."),(0,o.kt)("p",null,"A topic mapping can also reference a custom schema, or use the default schema. In the example above the data is reduced to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"payload")," of the MQTT message stored in a ",(0,o.kt)("inlineCode",{parentName:"li"},"data")," column of the collection"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"hostname")," stored into the ",(0,o.kt)("inlineCode",{parentName:"li"},"nodeId")," column of the collection")),(0,o.kt)("p",null,"Instead of using the default schema mapping containing all information of the default schema."),(0,o.kt)("admonition",d({},{type:"info"}),(0,o.kt)("p",{parentName:"admonition"},"This is an example configuration snippet, which applies to the docker container setup. For installation not running in a container the above configuration needs to be adjusted accordingly."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"persistence_location")," is used as the search path for the plugins' config file.")),(0,o.kt)("p",null,"In case the plugin should connect to a MongoDB Atlas cluster or custom options should be used the original connection string can be provided as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",d({parentName:"pre"},{className:"language-json"}),'{\n    "connections": [\n        {\n            "name": "connection-to-db-cluster",\n            "connection": {\n                "connectionURI": "mongodb+srv://user1:secret123@mongodb/db_name"\n            },\n            "options": {\n                "maxQueuedMessages": 100000\n            },\n            "topicMappings": [\n                {\n                    "name": "topic-mapping",\n                    "target": "sensorData",\n                    "schemaMapping": "reduced-mapping",\n                    "mqttTopics": [\n                        "sensor_data/#"\n                    ]\n                }\n            ]\n        }\n    ],\n    "schemaMappings": [\n        {\n            "name": "reduced-mapping",\n            "mapping": [\n                {\n                    "source": "payload",\n                    "target": "data"\n                },\n                {\n                    "source": "hostname",\n                    "target": "nodeId"\n                }\n            ]\n        }\n    ]\n}\n')),(0,o.kt)("p",null,"In this example the plugin takes the connection string as a whole. The plugin will automatically resolve the host from the connection string provided as the ",(0,o.kt)("inlineCode",{parentName:"p"},"connectionURI")," parameter and parse the parameters ",(0,o.kt)("inlineCode",{parentName:"p"},"hostname"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"port"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"database"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"credentials"),". Therefore, those have to be omitted in the config. The ",(0,o.kt)("inlineCode",{parentName:"p"},"password"),"in the connection string always has to be URL encoded (percent-encoded). Additionally, standard MongoDB connection strings can also be provided as in the previous snippet."))}y.isMDXComponent=!0}}]);