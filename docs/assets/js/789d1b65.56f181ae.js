"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[1153],{3905:(n,e,t)=>{t.d(e,{Zo:()=>d,kt:()=>m});var r=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var l=r.createContext({}),c=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},d=function(n){var e=c(n.components);return r.createElement(l.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,o=n.originalType,l=n.parentName,d=s(n,["components","mdxType","originalType","parentName"]),u=c(t),m=i,k=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return t?r.createElement(k,a(a({ref:e},d),{},{components:t})):r.createElement(k,a({ref:e},d))}));function m(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=t.length,a=new Array(o);a[0]=u;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s.mdxType="string"==typeof n?n:i,a[1]=s;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},53733:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>g,contentTitle:()=>m,default:()=>b,frontMatter:()=>u,metadata:()=>k,toc:()=>y});var r=t(3905),i=Object.defineProperty,o=Object.defineProperties,a=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,d=(n,e,t)=>e in n?i(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t,p=(n,e)=>{for(var t in e||(e={}))l.call(e,t)&&d(n,t,e[t]);if(s)for(var t of s(e))c.call(e,t)&&d(n,t,e[t]);return n};const u={id:"restapi-connections",title:"Connections",sidebar_label:"Connections"},m=void 0,k={unversionedId:"api/restapis/restapi-connections",id:"version-2.6/api/restapis/restapi-connections",title:"Connections",description:"Connections API",source:"@site/mosquitto_versioned_docs/version-2.6/api/restapis/connections.md",sourceDirName:"api/restapis",slug:"/api/restapis/restapi-connections",permalink:"/mosquitto/api/restapis/restapi-connections",draft:!1,tags:[],version:"2.6",frontMatter:{id:"restapi-connections",title:"Connections",sidebar_label:"Connections"},sidebar:"someSidebar",previous:{title:"MMC Rest APIs",permalink:"/mosquitto/api/restapis/"},next:{title:"Dynamic Security",permalink:"/mosquitto/api/restapis/restapi-dynamic-security"}},g={},y=[{value:"Available API Paths",id:"available-api-paths",level:2},{value:"Path: /api/connections",id:"path-apiconnections",level:2},{value:"Methods",id:"methods",level:3},{value:"GET",id:"get",level:4},{value:"POST",id:"post",level:4},{value:"Path: /api/connections/{connectionId}",id:"path-apiconnectionsconnectionid",level:2},{value:"Methods",id:"methods-1",level:3},{value:"DELETE",id:"delete",level:4}],f={toc:y};function b(n){var e,t=n,{components:i}=t,d=((n,e)=>{var t={};for(var r in n)l.call(n,r)&&e.indexOf(r)<0&&(t[r]=n[r]);if(null!=n&&s)for(var r of s(n))e.indexOf(r)<0&&c.call(n,r)&&(t[r]=n[r]);return t})(t,["components"]);return(0,r.kt)("wrapper",(e=p(p({},f),d),o(e,a({components:i,mdxType:"MDXLayout"}))),(0,r.kt)("p",null,"Connections API"),(0,r.kt)("h2",p({},{id:"available-api-paths"}),"Available API Paths"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",p({parentName:"li"},{href:"#apiconnections"}),"/api/connections"),(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",p({parentName:"li"},{href:"#apiconnectionsconnectionid"}),"/api/connections/{connectionId}"),(0,r.kt)("br",null))),(0,r.kt)("hr",null),(0,r.kt)("h2",p({},{id:"path-apiconnections"}),"Path: /api/connections"),(0,r.kt)("h3",p({},{id:"methods"}),"Methods"),(0,r.kt)("h4",p({},{id:"get"}),"GET"),(0,r.kt)("p",null,"Returns a list of active connections"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Responses")),(0,r.kt)("table",null,(0,r.kt)("colgroup",null,(0,r.kt)("col",null),(0,r.kt)("col",{style:{minWidth:"250px"}})),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null," Status "),(0,r.kt)("td",null," Description "),(0,r.kt)("td",null," Response Content or Scheme")),(0,r.kt)("tr",null,(0,r.kt)("td",null," 200 "),(0,r.kt)("td",null," List of active connections "),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "id": {\n    "type": "string",\n    "description": "Connection id (must be unique)"\n  },\n  "name": {\n    "type": "string",\n    "description": "Connection text name (must be unique)"\n  },\n  "url": {\n    "type": "string"\n  },\n  "credentials": {\n    "type": "object",\n    "properties": {\n      "username": {\n        "type": "string"\n      },\n      "password": {\n        "type": "string"\n      }\n    }\n  },\n  "rejectUnauthorized": {\n    "type": "boolean",\n    "description": "If true will validate broker\'s certificate (property is considered only if TLS plugins is enabled)"\n  },\n  "ca": {\n    "type": "object",\n    "description": "CA certificate (property is considered only if TLS plugins is enabled)",\n    "properties": {\n      "data": {\n        "description": "Encoded CA certificate",\n        "type": "string"\n      },\n      "encoding": {\n        "description": "Specifies encoding of the data property",\n        "type": "string",\n        "enum": [\n          "base64"\n        ]\n      }\n    }\n  },\n  "cert": {\n    "type": "object",\n    "description": "Client TLS certificate (property is considered only if TLS plugins is enabled)",\n    "properties": {\n      "data": {\n        "description": "Encoded client certificate",\n        "type": "string"\n      },\n      "encoding": {\n        "description": "Specifies encoding of the data property",\n        "type": "string",\n        "enum": [\n          "base64"\n        ]\n      }\n    }\n  },\n  "key": {\n    "type": "object",\n    "description": "Client private key (property is considered only if TLS plugins is enabled)",\n    "properties": {\n      "data": {\n        "description": "Encoded client private key",\n        "type": "string"\n      },\n      "encoding": {\n        "description": "Specifies encoding of the data property",\n        "type": "string",\n        "enum": [\n          "base64"\n        ]\n      }\n    }\n  },\n  "status": {\n    "type": "object",\n    "description": "Connection status of the broker",\n    "required": [\n      "connected",\n      "timestamp"\n    ],\n    "properties": {\n      "connected": {\n        "type": "boolean",\n        "description": "Specifies if the broker is currently connected"\n      },\n      "timestamp": {\n        "type": "integer",\n        "description": "Time when broker was connected to MMC"\n      },\n      "error": {\n        "type": "object",\n        "description": "Error that occured during connecting, if occured (Field is present only in case of an error)",\n        "required": [\n          "code"\n        ],\n        "properties": {\n          "code": {\n            "type": "string",\n            "description": "Error name"\n          },\n          "errno": {\n            "type": "integer",\n            "description": "Numerical id of the error"\n          },\n          "syscall": {\n            "type": "string",\n            "description": "Command that failed"\n          },\n          "address": {\n            "type": "string",\n            "description": "IP address of the broker"\n          },\n          "port": {\n            "type": "integer",\n            "description": "Port of the broker connection"\n          }\n        }\n      }\n    }\n  }\n} \n')))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{}),'{\n  "id": "mosquitto-dev",\n  "name": "Development Server",\n  "url": "mqtts://url.com:1883",\n  "credentials": {\n    "username": "admin",\n    "password": "adminpassword"\n  },\n  "ca": {\n    "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVBekNDQXV1Z0F3SUJBZ0lVQlkxaGxDR3ZkajROaEJYa1ovd...",\n    "endoding": "base64"\n  },\n  "cert": {\n    "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVBekNDQXV1Z0F3SUJBZ0lVQlkxaGxDR3ZkajROaEJYa1ovd...",\n    "endoding": "base64"\n  },\n  "key": {\n    "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVBekNDQXV1Z0F3SUJBZ0lVQlkxaGxDR3ZkajROaEJYa1ovd...",\n    "endoding": "base64"\n  },\n  "rejectUnauthorized": "true",\n  "status": {\n    "connected": "false",\n    "error": {\n      "code": "UNABLE_TO_VERIFY_LEAF_SIGNATURE"\n    }\n  }\n}\n')),(0,r.kt)("table",null,(0,r.kt)("colgroup",null,(0,r.kt)("col",null),(0,r.kt)("col",{style:{minWidth:"250px"}})),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null," Status "),(0,r.kt)("td",null," Description "),(0,r.kt)("td",null," Response Content or Scheme")),(0,r.kt)("tr",null,(0,r.kt)("td",null," 401 "),(0,r.kt)("td",null," Access to resource is denied. User not authenticated (logged in) or session expired "),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "code": {\n    "type": "string",\n    "enum": [\n      "UNAUTHORIZED"\n    ],\n    "description": "Name of the error"\n  },\n  "message": {\n    "type": "string",\n    "enum": [\n      "Unauthorized"\n    ],\n    "description": "Message of the error"\n  }\n} \n')))),(0,r.kt)("tr",null,(0,r.kt)("td",null," 403 "),(0,r.kt)("td",null," Forbidden (Connection with the same name/id already exists | Maximum number of connections reached) | User does not have access permissions "),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "code": {\n    "type": "string",\n    "enum": [\n      "NOT_ALLOWED"\n    ],\n    "description": "Name of the error"\n  },\n  "message": {\n    "type": "string",\n    "enum": [\n      "Not allowed",\n      "Connection with the same name/id already exists",\n      "Maximum number of connections reached",\n      "Connection with either the same name or id already exists"\n    ],\n    "description": "Message of the error"\n  }\n} \n')))),(0,r.kt)("tr",null,(0,r.kt)("td",null," 404 "),(0,r.kt)("td",null," Plugin is not enabled or not found "),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "code": {\n    "type": "string",\n    "enum": [\n      "NOT_FOUND"\n    ],\n    "description": "Name of the error"\n  },\n  "message": {\n    "type": "string",\n    "enum": [\n      "Plugin not found"\n    ],\n    "description": "Message of the error"\n  }\n} \n')))),(0,r.kt)("tr",null,(0,r.kt)("td",null," 500 "),(0,r.kt)("td",null," An internal server error occured "),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "code": {\n    "type": "string",\n    "enum": [\n      "NOT_ALLOWED"\n    ],\n    "description": "Name of the error"\n  },\n  "message": {\n    "type": "string",\n    "enum": [\n      "An internal server error occurred",\n      "Connection already exists but status of the connection not found. Config file might be malformed",\n      "Any other error message"\n    ],\n    "description": "Message of the error"\n  }\n} \n')))))),(0,r.kt)("hr",null),(0,r.kt)("h4",p({},{id:"post"}),"POST"),(0,r.kt)("p",null,"Creates a connection. Can be used by connectionManager or Admin roles. If a connection error occured on connection creation which is due to a misconfiguartion, a subsequent request with updated information might fix it"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null," Name "),(0,r.kt)("td",null," Required "),(0,r.kt)("td",null," Type "),(0,r.kt)("td",null," Request Properties or Schema")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("b",null," body ")),(0,r.kt)("td",null," true "),(0,r.kt)("td",null," object "),(0,r.kt)("td",null," A connection object.",(0,r.kt)("p",null," Properties:"),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "id": {\n    "type": "string",\n    "description": "Connection id (must be unique)"\n  },\n  "name": {\n    "type": "string",\n    "description": "Connection text name (must be unique)"\n  },\n  "url": {\n    "type": "string"\n  },\n  "credentials": {\n    "type": "object",\n    "properties": {\n      "username": {\n        "type": "string"\n      },\n      "password": {\n        "type": "string"\n      }\n    }\n  },\n  "rejectUnauthorized": {\n    "type": "boolean",\n    "description": "If true will validate broker\'s certificate (property is considered only if TLS plugins is enabled)"\n  },\n  "ca": {\n    "type": "object",\n    "description": "CA certificate (property is considered only if TLS plugins is enabled)",\n    "properties": {\n      "data": {\n        "description": "Encoded CA certificate",\n        "type": "string"\n      },\n      "encoding": {\n        "description": "Specifies encoding of the data property",\n        "type": "string",\n        "enum": [\n          "base64"\n        ]\n      }\n    }\n  },\n  "cert": {\n    "type": "object",\n    "description": "Client TLS certificate (property is considered only if TLS plugins is enabled)",\n    "properties": {\n      "data": {\n        "description": "Encoded client certificate",\n        "type": "string"\n      },\n      "encoding": {\n        "description": "Specifies encoding of the data property",\n        "type": "string",\n        "enum": [\n          "base64"\n        ]\n      }\n    }\n  },\n  "key": {\n    "type": "object",\n    "description": "Client private key (property is considered only if TLS plugins is enabled)",\n    "properties": {\n      "data": {\n        "description": "Encoded client private key",\n        "type": "string"\n      },\n      "encoding": {\n        "description": "Specifies encoding of the data property",\n        "type": "string",\n        "enum": [\n          "base64"\n        ]\n      }\n    }\n  }\n} \n')))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{}),'{\n  "id": "mosquitto-dev",\n  "name": "Development Server",\n  "url": "mqtts://url.com:1883",\n  "credentials": {\n    "username": "admin",\n    "password": "adminpassword"\n  },\n  "ca": {\n    "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVBekNDQXV1Z0F3SUJBZ0lVQlkxaGxDR3ZkajROaEJYa1ovd...",\n    "endoding": "base64"\n  },\n  "cert": {\n    "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVBekNDQXV1Z0F3SUJBZ0lVQlkxaGxDR3ZkajROaEJYa1ovd...",\n    "endoding": "base64"\n  },\n  "key": {\n    "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVBekNDQXV1Z0F3SUJBZ0lVQlkxaGxDR3ZkajROaEJYa1ovd...",\n    "endoding": "base64"\n  },\n  "rejectUnauthorized": "true"\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Responses")),(0,r.kt)("table",null,(0,r.kt)("colgroup",null,(0,r.kt)("col",null),(0,r.kt)("col",{style:{minWidth:"250px"}})),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null," Status "),(0,r.kt)("td",null," Description "),(0,r.kt)("td",null," Response Content or Scheme")),(0,r.kt)("tr",null,(0,r.kt)("td",null," 200 "),(0,r.kt)("td",null," List of all connections (active or inactive) "),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "id": {\n    "type": "string",\n    "description": "Connection id (must be unique)"\n  },\n  "name": {\n    "type": "string",\n    "description": "Connection text name (must be unique)"\n  },\n  "url": {\n    "type": "string"\n  },\n  "credentials": {\n    "type": "object",\n    "properties": {\n      "username": {\n        "type": "string"\n      },\n      "password": {\n        "type": "string"\n      }\n    }\n  },\n  "rejectUnauthorized": {\n    "type": "boolean",\n    "description": "If true will validate broker\'s certificate (property is considered only if TLS plugins is enabled)"\n  },\n  "ca": {\n    "type": "object",\n    "description": "CA certificate (property is considered only if TLS plugins is enabled)",\n    "properties": {\n      "data": {\n        "description": "Encoded CA certificate",\n        "type": "string"\n      },\n      "encoding": {\n        "description": "Specifies encoding of the data property",\n        "type": "string",\n        "enum": [\n          "base64"\n        ]\n      }\n    }\n  },\n  "cert": {\n    "type": "object",\n    "description": "Client TLS certificate (property is considered only if TLS plugins is enabled)",\n    "properties": {\n      "data": {\n        "description": "Encoded client certificate",\n        "type": "string"\n      },\n      "encoding": {\n        "description": "Specifies encoding of the data property",\n        "type": "string",\n        "enum": [\n          "base64"\n        ]\n      }\n    }\n  },\n  "key": {\n    "type": "object",\n    "description": "Client private key (property is considered only if TLS plugins is enabled)",\n    "properties": {\n      "data": {\n        "description": "Encoded client private key",\n        "type": "string"\n      },\n      "encoding": {\n        "description": "Specifies encoding of the data property",\n        "type": "string",\n        "enum": [\n          "base64"\n        ]\n      }\n    }\n  },\n  "status": {\n    "type": "object",\n    "description": "Connection status of the broker",\n    "required": [\n      "connected",\n      "timestamp"\n    ],\n    "properties": {\n      "connected": {\n        "type": "boolean",\n        "description": "Specifies if the broker is currently connected"\n      },\n      "timestamp": {\n        "type": "integer",\n        "description": "Time when broker was connected to MMC"\n      },\n      "error": {\n        "type": "object",\n        "description": "Error that occured during connecting, if occured (Field is present only in case of an error)",\n        "required": [\n          "code"\n        ],\n        "properties": {\n          "code": {\n            "type": "string",\n            "description": "Error name"\n          },\n          "errno": {\n            "type": "integer",\n            "description": "Numerical id of the error"\n          },\n          "syscall": {\n            "type": "string",\n            "description": "Command that failed"\n          },\n          "address": {\n            "type": "string",\n            "description": "IP address of the broker"\n          },\n          "port": {\n            "type": "integer",\n            "description": "Port of the broker connection"\n          }\n        }\n      }\n    }\n  }\n} \n')))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{}),'{\n  "id": "mosquitto-dev",\n  "name": "Development Server",\n  "url": "mqtts://url.com:1883",\n  "credentials": {\n    "username": "admin",\n    "password": "adminpassword"\n  },\n  "ca": {\n    "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVBekNDQXV1Z0F3SUJBZ0lVQlkxaGxDR3ZkajROaEJYa1ovd...",\n    "endoding": "base64"\n  },\n  "cert": {\n    "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVBekNDQXV1Z0F3SUJBZ0lVQlkxaGxDR3ZkajROaEJYa1ovd...",\n    "endoding": "base64"\n  },\n  "key": {\n    "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVBekNDQXV1Z0F3SUJBZ0lVQlkxaGxDR3ZkajROaEJYa1ovd...",\n    "endoding": "base64"\n  },\n  "rejectUnauthorized": "true",\n  "status": {\n    "connected": "false",\n    "error": {\n      "code": "UNABLE_TO_VERIFY_LEAF_SIGNATURE"\n    }\n  }\n}\n')),(0,r.kt)("table",null,(0,r.kt)("colgroup",null,(0,r.kt)("col",null),(0,r.kt)("col",{style:{minWidth:"250px"}})),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null," Status "),(0,r.kt)("td",null," Description "),(0,r.kt)("td",null," Response Content or Scheme")),(0,r.kt)("tr",null,(0,r.kt)("td",null," 401 "),(0,r.kt)("td",null," Access to resource is denied. User not authenticated (logged in) or session expired "),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "code": {\n    "type": "string",\n    "enum": [\n      "UNAUTHORIZED"\n    ],\n    "description": "Name of the error"\n  },\n  "message": {\n    "type": "string",\n    "enum": [\n      "Unauthorized"\n    ],\n    "description": "Message of the error"\n  }\n} \n')))),(0,r.kt)("tr",null,(0,r.kt)("td",null," 403 "),(0,r.kt)("td",null," Forbidden (Connection with the same name/id already exists | Maximum number of connections reached) | User does not have access permissions "),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "code": {\n    "type": "string",\n    "enum": [\n      "NOT_ALLOWED"\n    ],\n    "description": "Name of the error"\n  },\n  "message": {\n    "type": "string",\n    "enum": [\n      "Not allowed",\n      "Connection with the same name/id already exists",\n      "Maximum number of connections reached",\n      "Connection with either the same name or id already exists"\n    ],\n    "description": "Message of the error"\n  }\n} \n')))),(0,r.kt)("tr",null,(0,r.kt)("td",null," 404 "),(0,r.kt)("td",null," Plugin is not enabled or not found "),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "code": {\n    "type": "string",\n    "enum": [\n      "NOT_FOUND"\n    ],\n    "description": "Name of the error"\n  },\n  "message": {\n    "type": "string",\n    "enum": [\n      "Plugin not found"\n    ],\n    "description": "Message of the error"\n  }\n} \n')))),(0,r.kt)("tr",null,(0,r.kt)("td",null," 500 "),(0,r.kt)("td",null," An internal server error occured "),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "code": {\n    "type": "string",\n    "enum": [\n      "NOT_ALLOWED"\n    ],\n    "description": "Name of the error"\n  },\n  "message": {\n    "type": "string",\n    "enum": [\n      "An internal server error occurred",\n      "Connection already exists but status of the connection not found. Config file might be malformed",\n      "Any other error message"\n    ],\n    "description": "Message of the error"\n  }\n} \n')))))),(0,r.kt)("hr",null),(0,r.kt)("h2",p({},{id:"path-apiconnectionsconnectionid"}),"Path: /api/connections/{connectionId}"),(0,r.kt)("h3",p({},{id:"methods-1"}),"Methods"),(0,r.kt)("h4",p({},{id:"delete"}),"DELETE"),(0,r.kt)("p",null,"Deletes a specified connection and returns a list of remaining ones. Can be used by connectionManager or Admin roles"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",p({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",p({parentName:"tr"},{align:null}),"Location"),(0,r.kt)("th",p({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",p({parentName:"tr"},{align:null}),"Required"),(0,r.kt)("th",p({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",p({parentName:"tr"},{align:null}),(0,r.kt)("strong",{parentName:"td"},"connectionId")),(0,r.kt)("td",p({parentName:"tr"},{align:null}),"path"),(0,r.kt)("td",p({parentName:"tr"},{align:null}),"string"),(0,r.kt)("td",p({parentName:"tr"},{align:null}),"true"),(0,r.kt)("td",p({parentName:"tr"},{align:null}),"Id of the connection to be deleted")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Responses")),(0,r.kt)("table",null,(0,r.kt)("colgroup",null,(0,r.kt)("col",null),(0,r.kt)("col",{style:{minWidth:"250px"}})),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null," Status "),(0,r.kt)("td",null," Description "),(0,r.kt)("td",null," Response Content or Scheme")),(0,r.kt)("tr",null,(0,r.kt)("td",null," 200 "),(0,r.kt)("td",null," List of remaining connections (active or inactive) "),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "id": {\n    "type": "string",\n    "description": "Connection id (must be unique)"\n  },\n  "name": {\n    "type": "string",\n    "description": "Connection text name (must be unique)"\n  },\n  "url": {\n    "type": "string"\n  },\n  "credentials": {\n    "type": "object",\n    "properties": {\n      "username": {\n        "type": "string"\n      },\n      "password": {\n        "type": "string"\n      }\n    }\n  },\n  "rejectUnauthorized": {\n    "type": "boolean",\n    "description": "If true will validate broker\'s certificate (property is considered only if TLS plugins is enabled)"\n  },\n  "ca": {\n    "type": "object",\n    "description": "CA certificate (property is considered only if TLS plugins is enabled)",\n    "properties": {\n      "data": {\n        "description": "Encoded CA certificate",\n        "type": "string"\n      },\n      "encoding": {\n        "description": "Specifies encoding of the data property",\n        "type": "string",\n        "enum": [\n          "base64"\n        ]\n      }\n    }\n  },\n  "cert": {\n    "type": "object",\n    "description": "Client TLS certificate (property is considered only if TLS plugins is enabled)",\n    "properties": {\n      "data": {\n        "description": "Encoded client certificate",\n        "type": "string"\n      },\n      "encoding": {\n        "description": "Specifies encoding of the data property",\n        "type": "string",\n        "enum": [\n          "base64"\n        ]\n      }\n    }\n  },\n  "key": {\n    "type": "object",\n    "description": "Client private key (property is considered only if TLS plugins is enabled)",\n    "properties": {\n      "data": {\n        "description": "Encoded client private key",\n        "type": "string"\n      },\n      "encoding": {\n        "description": "Specifies encoding of the data property",\n        "type": "string",\n        "enum": [\n          "base64"\n        ]\n      }\n    }\n  },\n  "status": {\n    "type": "object",\n    "description": "Connection status of the broker",\n    "required": [\n      "connected",\n      "timestamp"\n    ],\n    "properties": {\n      "connected": {\n        "type": "boolean",\n        "description": "Specifies if the broker is currently connected"\n      },\n      "timestamp": {\n        "type": "integer",\n        "description": "Time when broker was connected to MMC"\n      },\n      "error": {\n        "type": "object",\n        "description": "Error that occured during connecting, if occured (Field is present only in case of an error)",\n        "required": [\n          "code"\n        ],\n        "properties": {\n          "code": {\n            "type": "string",\n            "description": "Error name"\n          },\n          "errno": {\n            "type": "integer",\n            "description": "Numerical id of the error"\n          },\n          "syscall": {\n            "type": "string",\n            "description": "Command that failed"\n          },\n          "address": {\n            "type": "string",\n            "description": "IP address of the broker"\n          },\n          "port": {\n            "type": "integer",\n            "description": "Port of the broker connection"\n          }\n        }\n      }\n    }\n  }\n} \n')))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{}),'{\n  "id": "mosquitto-dev",\n  "name": "Development Server",\n  "url": "mqtts://url.com:1883",\n  "credentials": {\n    "username": "admin",\n    "password": "adminpassword"\n  },\n  "ca": {\n    "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVBekNDQXV1Z0F3SUJBZ0lVQlkxaGxDR3ZkajROaEJYa1ovd...",\n    "endoding": "base64"\n  },\n  "cert": {\n    "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVBekNDQXV1Z0F3SUJBZ0lVQlkxaGxDR3ZkajROaEJYa1ovd...",\n    "endoding": "base64"\n  },\n  "key": {\n    "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVBekNDQXV1Z0F3SUJBZ0lVQlkxaGxDR3ZkajROaEJYa1ovd...",\n    "endoding": "base64"\n  },\n  "rejectUnauthorized": "true",\n  "status": {\n    "connected": "false",\n    "error": {\n      "code": "UNABLE_TO_VERIFY_LEAF_SIGNATURE"\n    }\n  }\n}\n')),(0,r.kt)("table",null,(0,r.kt)("colgroup",null,(0,r.kt)("col",null),(0,r.kt)("col",{style:{minWidth:"250px"}})),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null," Status "),(0,r.kt)("td",null," Description "),(0,r.kt)("td",null," Response Content or Scheme")),(0,r.kt)("tr",null,(0,r.kt)("td",null," 202 "),(0,r.kt)("td",null," Connection was successfully created but when attempting to connect, an error occured "),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "code": {\n    "type": "string",\n    "enum": [\n      "ACCEPTED"\n    ],\n    "description": "Name of the error"\n  },\n  "message": {\n    "type": "string",\n    "enum": [\n      "Connection created but could not connect. Reason \\"<error message>\\""\n    ],\n    "description": "Message of the error"\n  }\n} \n')))),(0,r.kt)("tr",null,(0,r.kt)("td",null," 401 "),(0,r.kt)("td",null," Access to resource is denied. User not authenticated (logged in) or session expired "),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "code": {\n    "type": "string",\n    "enum": [\n      "UNAUTHORIZED"\n    ],\n    "description": "Name of the error"\n  },\n  "message": {\n    "type": "string",\n    "enum": [\n      "Unauthorized"\n    ],\n    "description": "Message of the error"\n  }\n} \n')))),(0,r.kt)("tr",null,(0,r.kt)("td",null," 403 "),(0,r.kt)("td",null," Forbidden (Connection with the same name/id already exists | Maximum number of connections reached) | User does not have access permissions "),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "code": {\n    "type": "string",\n    "enum": [\n      "NOT_ALLOWED"\n    ],\n    "description": "Name of the error"\n  },\n  "message": {\n    "type": "string",\n    "enum": [\n      "Not allowed",\n      "Connection with the same name/id already exists",\n      "Maximum number of connections reached",\n      "Connection with either the same name or id already exists"\n    ],\n    "description": "Message of the error"\n  }\n} \n')))),(0,r.kt)("tr",null,(0,r.kt)("td",null," 404 "),(0,r.kt)("td",null," Plugin is not enabled or not found "),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "code": {\n    "type": "string",\n    "enum": [\n      "NOT_FOUND"\n    ],\n    "description": "Name of the error"\n  },\n  "message": {\n    "type": "string",\n    "enum": [\n      "Plugin not found"\n    ],\n    "description": "Message of the error"\n  }\n} \n')))),(0,r.kt)("tr",null,(0,r.kt)("td",null," 500 "),(0,r.kt)("td",null," An internal server error occured "),(0,r.kt)("td",null,(0,r.kt)("pre",null,(0,r.kt)("code",p({parentName:"pre"},{className:"language-json"}),'{\n  "code": {\n    "type": "string",\n    "enum": [\n      "NOT_ALLOWED"\n    ],\n    "description": "Name of the error"\n  },\n  "message": {\n    "type": "string",\n    "enum": [\n      "An internal server error occurred",\n      "Connection already exists but status of the connection not found. Config file might be malformed",\n      "Any other error message"\n    ],\n    "description": "Message of the error"\n  }\n} \n')))))),(0,r.kt)("hr",null))}b.isMDXComponent=!0}}]);