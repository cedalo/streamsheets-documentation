"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[77653],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(a),u=o,m=p["".concat(l,".").concat(u)]||p[u]||h[u]||s;return a?n.createElement(m,r(r({ref:t},d),{},{components:a})):n.createElement(m,r({ref:t},d))}));function u(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=a.length,r=new Array(s);r[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var c=2;c<s;c++)r[c]=a[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},27837:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>f,contentTitle:()=>u,default:()=>y,frontMatter:()=>p,metadata:()=>m,toc:()=>g});var n=a(3905),o=Object.defineProperty,s=Object.defineProperties,r=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,d=(e,t,a)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,h=(e,t)=>{for(var a in t||(t={}))l.call(t,a)&&d(e,a,t[a]);if(i)for(var a of i(t))c.call(t,a)&&d(e,a,t[a]);return e};const p={id:"getting-started",title:"Streamsheets",sidebar_label:"First Steps"},u=void 0,m={unversionedId:"getting-started/getting-started",id:"version-3.0/getting-started/getting-started",title:"Streamsheets",description:"Streamsheets is a powerful application used to build data driven applications. Streamsheets allow you to send, publish, store or provide data. Hence, they not only consume data streams but produce",source:"@site/streamsheets_versioned_docs/version-3.0/getting-started/getting-started.md",sourceDirName:"getting-started",slug:"/getting-started/",permalink:"/streamsheets/getting-started/",draft:!1,tags:[],version:"3.0",frontMatter:{id:"getting-started",title:"Streamsheets",sidebar_label:"First Steps"},sidebar:"someSidebar",previous:{title:"Installation",permalink:"/streamsheets/getting-started/installation"},next:{title:"Overview",permalink:"/streamsheets/overview/"}},f={},g=[{value:"Key Features",id:"key-features",level:2},{value:"Connectivity",id:"connectivity",level:3},{value:"Persistence and database access",id:"persistence-and-database-access",level:3},{value:"Inbox",id:"inbox",level:3},{value:"Sheet",id:"sheet",level:3},{value:"Streamsheets Application",id:"streamsheets-application",level:2},{value:"First Steps",id:"first-steps",level:2},{value:"Step 1: Create an App",id:"step-1-create-an-app",level:3},{value:"Step 2: Generate Data",id:"step-2-generate-data",level:3},{value:"Step 3: Create a Connection",id:"step-3-create-a-connection",level:3},{value:"Step 4: Produce a Message stream",id:"step-4-produce-a-message-stream",level:3},{value:"Step 5: Subscribe to a data stream",id:"step-5-subscribe-to-a-data-stream",level:3},{value:"Optional Step: Ideas on what to do next",id:"optional-step-ideas-on-what-to-do-next",level:3}],b={toc:g};function y(e){var t,o=e,{components:d}=o,p=((e,t)=>{var a={};for(var n in e)l.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&i)for(var n of i(e))t.indexOf(n)<0&&c.call(e,n)&&(a[n]=e[n]);return a})(o,["components"]);return(0,n.kt)("wrapper",(t=h(h({},b),p),s(t,r({components:d,mdxType:"MDXLayout"}))),(0,n.kt)("p",null,"Streamsheets is a powerful application used to build data driven applications. Streamsheets allow you to send, publish, store or provide data. Hence, they not only consume data streams but produce\nthem as well. Similarly, as Excel worksheets form part of a workbook, Streamsheets sheets form an App."),(0,n.kt)("p",null,"Streamsheets can be used in all sorts of use cases. Combine different transport protocols, APIs, and databases to create\nyour applications. Create applications that run in the background, add user interfaces, and create dashboards."),(0,n.kt)("p",null,"If you are new to Eclipse Streamsheets, this section offers a quick introduction to help you understand some basic\nprinciples. In a step-by-step guide, we then will build an App, which is meant to quickly illustrate how to generate,\nsend and receive data with Streamsheets. More specifically, we will create data in one Streamsheet, continuously send it to\nthe internal MQTT Broker and this way publish a data stream, which we will then receive in another Streamsheet."),(0,n.kt)("h2",h({},{id:"key-features"}),"Key Features"),(0,n.kt)("h3",h({},{id:"connectivity"}),"Connectivity"),(0,n.kt)("p",null,"Streamsheets supports a number of protocols that you need to connect to sensors, databases, APIs and machines like MQTT,\nREST, MongoDB, Web sockets, and OPC UA. Create ",(0,n.kt)("a",h({parentName:"p"},{href:"/streamsheets/guides/connections/"}),"Connections")," in your Apps to and define\nyour connection details. After the creation, use the connection in your inbox or reference them in dedicated functions\non the sheet."),(0,n.kt)("h3",h({},{id:"persistence-and-database-access"}),"Persistence and database access"),(0,n.kt)("p",null,"You can store any value pair or more extensive data array in different databases. Streamsheets come with integrated\ntime-series databases ",(0,n.kt)("a",h({parentName:"p"},{href:"/streamsheets/guides/connections/timescale"}),"TimescaleDB"),", but also, the connection\nto ",(0,n.kt)("a",h({parentName:"p"},{href:"/streamsheets/guides/connections/mongodb"}),"MongoDB")," or other DBs is possible. You can also use HTTP requests to persist data."),(0,n.kt)("h3",h({},{id:"inbox"}),"Inbox"),(0,n.kt)("p",null,"The inbox receives and buffers incoming data. Each incoming message contains a payload, that can be used within Streamsheets.\nYou can directly link into the inbox message and analyze the content of a message (payload). When ever a message comes in\nor defined intervals the incoming data is updated as the Streamsheet is recalculated from bottom top."),(0,n.kt)("h3",h({},{id:"sheet"}),"Sheet"),(0,n.kt)("p",null,"The sheet allows using a large set of formulas to analyze and visualize the incoming data. It also allows to transfer\nthe data to other recipients like another app, a mqtt broker or other target using REST APIs. The sheet provides\nspecial stream related formulas to intermediately store and retrieve data. Besides recalculating, filtering and transforming data\nyou can visualize data using various chart types and shapes. A dashboard allows to present data like a web page would."),(0,n.kt)("h2",h({},{id:"streamsheets-application"}),"Streamsheets Application"),(0,n.kt)("p",null,"Have a look at the ",(0,n.kt)("a",h({parentName:"p"},{href:"/streamsheets/overview/"}),"Overview")," or the ",(0,n.kt)("a",h({parentName:"p"},{href:"/streamsheets/guides/"}),"Guides")," to get a deeper understanding of\nall the different components that make up Streamsheets. They give an overview, how to manage, import or export Apps, organize\nuser, groups and security and manage accounts to preconfigure data access."),(0,n.kt)("p",null,"But now let\xb4s get started with a first real app!"),(0,n.kt)("h2",h({},{id:"first-steps"}),"First Steps"),(0,n.kt)("h3",h({},{id:"step-1-create-an-app"}),"Step 1: Create an App"),(0,n.kt)("p",null,"After logging in, go to the App Dashboard which lists all your Apps (you have access to). To create your first App, look\nto the top-right corner and identify the \u201cAdd\u201d button (it is the \u201cplus\u201d).\nClick it and choose a meaningful name for your App, e.g. \u201cGetting Started\u201d. If you are working with Streamsheets Pro and\nhave access to more than one workspace, you can also select in which the App should be placed."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Step1",src:a(55321).Z,width:"1270",height:"886"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"This is how a blank application looks like")),(0,n.kt)("h3",h({},{id:"step-2-generate-data"}),"Step 2: Generate Data"),(0,n.kt)("p",null,"Since we do not have real data streams connected to our application yet, we simulate one to work with. A simple way to\ndo this is to use the function RANDBETWEEN. It creates random values between a minimum and a maximum. Let\xb4s create two\nvalues, one beneath the other, and name them. Write the names left off the values, e.g. \u201cTemperature\u201d and \u201cHumidity\u201d.\nThen, select all four cells, right-click and define them as a ",(0,n.kt)("a",h({parentName:"p"},{href:"/streamsheets/guides/sheets/jsonrange"}),"JSON Range"),". JSON is a\ndata\nformat, which allows to organize several key-value pairs in which the keys can be thought of as the parameter names for\nthe respective values.\n",(0,n.kt)("img",{alt:"Step2",src:a(23786).Z,width:"995",height:"255"})),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Add RANDBETWEEN() functions for data simulation")),(0,n.kt)("p",null,"Now, this cell range is not only a range in the sheet but also a JSON object which is continuously built with every\ncalculation step of the sheet. Many protocols require the JSON format for their messages, but it is also good for\nstructuring your message."),(0,n.kt)("p",null,"You can start the calculation process, by pressing the play button in the top bar.\n",(0,n.kt)("img",{alt:"Step2",src:a(52658).Z,width:"1271",height:"888"})),(0,n.kt)("p",null,"To create a data stream out of the created data simulation, we have to set up a connection."),(0,n.kt)("h3",h({},{id:"step-3-create-a-connection"}),"Step 3: Create a Connection"),(0,n.kt)("p",null,"To allow data to either be streamed to or from the App it is necessary to define which connection details for each App.\nWithout a connection an App only exits by its own (with the exception of HTTP functions)."),(0,n.kt)("p",null,"The Connection menu can be found in the top right corner. Click the add icon to see a list of possible connection types.\nIn our example, we will choose MQTT."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Step2",src:a(85051).Z,width:"1272",height:"888"})),(0,n.kt)("p",null,"Here you can configure details for the connection to an MQTT Broker. Streamsheets comes with an integrated Mosquitto\nMQTT Broker, which we will use. In Streamsheets Professional you can use the existing account for the Internal Broker.\nThe OS version does not come with accounts."),(0,n.kt)("p",null,"A connection can either be used as a reference in sheet functions, or used to assign an Inbox of a sheet as a target (or\nboth)."),(0,n.kt)("h3",h({},{id:"step-4-produce-a-message-stream"}),"Step 4: Produce a Message stream"),(0,n.kt)("p",null,'Now, we switch back to our sheet.\nTo send the created JSON, we select an empty cell beneath the range and enter =MQTT.PUBLISH() in a cell. Choose the just\ncreated connection from the inline help. As message parameter select the JSON Range above. To complete the MQTT.PUBLISH\nfunction enter a MQTT topic. A topic in MQTT can be either published or subscribed to. We want to add information to\nthis topic, so we use a MQTT.PUBLISH() function. The topic name can be any kind of UTF-8 string like "gettingstarted"\nor "example".'),(0,n.kt)("admonition",h({},{type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"Streamsheets calculate from left to right and from top to bottom. This means, first, row 1 is calculated from left to\nright, then, row 2 followed by row 3 \u2026 until the end of the sheet is reached. As a consequence, you typically place a\nstream function behind the cells you want to send/produce. Placing the stream function before these cells will send the\nvalues of the previous calculation step.")),(0,n.kt)("iframe",{title:"vimeo-player",src:"https://player.vimeo.com/video/759136332?h=41176b2cf1",width:"640",height:"449",frameborder:"0",allowfullscreen:!0}),(0,n.kt)("h3",h({},{id:"step-5-subscribe-to-a-data-stream"}),"Step 5: Subscribe to a data stream"),(0,n.kt)("p",null,"As described above, a Connection can not only be used to send, but also to receive messages. In MQTT Connections, it is\npossible to assign topics to inboxes of different sheets (Every sheet is assigned its own inbox)."),(0,n.kt)("p",null,'First, create another Streamsheet in this App by clicking the \u201cplus\u201d icon in the bottom-left corner of the grid and\nselect "add Streamsheet". In the new Streamsheet look to the top-left where it says \u201cInbox\u201d and click it.'),(0,n.kt)("p",null,'The inbox configuration opens on your right-hand side. Switch from the "Settings" tab to the "Connections" tab. Select\nyour Connection and type in the topic name you chose to publish to above.'),(0,n.kt)("iframe",{title:"vimeo-player",src:"https://player.vimeo.com/video/759155015?h=962ef9e20b",width:"640",height:"448",frameborder:"0",allowfullscreen:!0}),(0,n.kt)("p",null,"Done?"),(0,n.kt)("p",null,"Great! You just set up connections to the local MQTT broker and created an App that produces as well as consumes MQTT\ndata streams.\nMessages should be arriving in the Inbox of the second Streamsheet. If that is not the case, check whether your App is\nrunning (on \u201cPlay\u201d), that your first Streamsheet has the calculation mode \u201cContinuously\u201d and that the topic is in\nMQTT.PUBLISH() is the same as in the Consumer."),(0,n.kt)("h3",h({},{id:"optional-step-ideas-on-what-to-do-next"}),"Optional Step: Ideas on what to do next"),(0,n.kt)("p",null,"As mentioned in the beginning, this example serves as a quick introduction."),(0,n.kt)("p",null,"Hence, why not extend this Streamsheet model a little? By dragging and dropping data points that you receive in the\nInbox into the grid, you create a direct link between the data stream and the spreadsheet world. Consequently, you can\nstart processing data and build logic with spreadsheet formulas, e.g. to calculate KPIs, create dynamic dashboards and\nbuild decision engines."),(0,n.kt)("iframe",{title:"vimeo-player",src:"https://player.vimeo.com/video/759138589?h=49ee5061bc",width:"640",height:"448",frameborder:"0",allowfullscreen:!0}),(0,n.kt)("p",null,"In the example, we calculate the sum of the two values."),(0,n.kt)("p",null,"You will notice that you are working \u201clive\u201d on the message stream as incoming data is immediately transferred to the\ngrid and formulas change their results accordingly. Additionally, you always see what the current result in each cell\nis. Remember: with every calculation step the whole logic is recalculated and, therefore, all conditions are\nreconsidered, and based upon these, decisions can be taken. For instance, you could send messages to an additional MQTT\ntopic or a Slack channel but only if a certain threshold is met."),(0,n.kt)("p",null,"Further, sending data from one Streamsheet or App to another is useful when building larger models, however, typically\nyou want to set up connections (Streams) to something outside of Streamsheets, too. Hence, why not set up a new\nConnection to get your Streamsheets communicating with the outside world?"))}y.isMDXComponent=!0},55321:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/GettingStarted1-8f453c8cc9ddd8091f7bc4220e19600f.png"},23786:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/GettingStarted2_1-657435e60db073bf6e919cef2974b3d8.png"},52658:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/GettingStarted2_2-27fad9f23fa5e34103dd1cb16ce2e27b.png"},85051:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/GettingStarted3-09c4c898a0828d35454b3a219dd0e58f.png"}}]);