"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[9725],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var s=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,s,i=function(e,t){if(null==e)return{};var n,s,i={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=s.createContext({}),c=function(e){var t=s.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return s.createElement(r.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},p=s.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,r=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=i,m=p["".concat(r,".").concat(d)]||p[d]||h[d]||a;return n?s.createElement(m,o(o({ref:t},u),{},{components:n})):s.createElement(m,o({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1528:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>k,contentTitle:()=>d,default:()=>f,frontMatter:()=>p,metadata:()=>m,toc:()=>b});var s=n(3905),i=Object.defineProperty,a=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,u=(e,t,n)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,h=(e,t)=>{for(var n in t||(t={}))r.call(t,n)&&u(e,n,t[n]);if(l)for(var n of l(t))c.call(t,n)&&u(e,n,t[n]);return e};const p={id:"mqtt",title:"MQTT in a nutshell",sidebar_label:"MQTT in a nutshell"},d=void 0,m={unversionedId:"mqtt",id:"version-2.5/mqtt",title:"MQTT in a nutshell",description:"The setup consists of two basic concepts:",source:"@site/mosquitto_versioned_docs/version-2.5/NEW_MQTT.md",sourceDirName:".",slug:"/mqtt",permalink:"/mosquitto/mqtt",draft:!1,tags:[],version:"2.5",frontMatter:{id:"mqtt",title:"MQTT in a nutshell",sidebar_label:"MQTT in a nutshell"},sidebar:"someSidebar",previous:{title:"System Requirements",permalink:"/mosquitto/system-requirements"},next:{title:"Mosquitto Broker",permalink:"/mosquitto/mosquitto-broker"}},k={},b=[{value:"The broker is the central entity.",id:"the-broker-is-the-central-entity",level:3},{value:"Pro Mosquitto",id:"pro-mosquitto",level:3},{value:"MQTT Model",id:"mqtt-model",level:2},{value:"Broker-client connection",id:"broker-client-connection",level:3},{value:"Connect",id:"connect",level:3},{value:"clientId",id:"clientid",level:4},{value:"cleanSession",id:"cleansession",level:4},{value:"Persistent sessions:",id:"persistent-sessions",level:4},{value:"Persistent or Clean Session - What kind of session do you need:",id:"persistent-or-clean-session---what-kind-of-session-do-you-need",level:4},{value:"username/password",id:"usernamepassword",level:4},{value:"lastWill",id:"lastwill",level:4},{value:"keepAlive",id:"keepalive",level:4},{value:"CONNECT packet MQTT v.5.0",id:"connect-packet-mqtt-v50",level:4},{value:"Publish / Subscribe model",id:"publish--subscribe-model",level:3},{value:"Client-Server Model",id:"client-server-model",level:4},{value:"Decpupling",id:"decpupling",level:4},{value:"Decoupling impacts",id:"decoupling-impacts",level:4},{value:"MQTT can process messages event-driven.",id:"mqtt-can-process-messages-event-driven",level:4},{value:"Central Hub",id:"central-hub",level:2},{value:"MQTT pub/sub model",id:"mqtt-pubsub-model",level:2},{value:"Publish",id:"publish",level:3},{value:"packetId",id:"packetid",level:4},{value:"topicName",id:"topicname",level:4},{value:"QoS",id:"qos",level:4},{value:"QoS 0 - At Most Once",id:"qos-0---at-most-once",level:4},{value:"QoS 1 - At Least Once",id:"qos-1---at-least-once",level:4},{value:"QoS 2 - Exactly Once",id:"qos-2---exactly-once",level:4},{value:"retainFlag",id:"retainflag",level:4},{value:"Payload",id:"payload",level:4},{value:"dupFlag",id:"dupflag",level:4},{value:"PUBLISH packet MQTT v.5.0",id:"publish-packet-mqtt-v50",level:4},{value:"Subscribe",id:"subscribe",level:3},{value:"packetId",id:"packetid-1",level:4},{value:"subscriptions",id:"subscriptions",level:4},{value:"There are two kinds of wildcards:",id:"there-are-two-kinds-of-wildcards",level:4},{value:"Single level",id:"single-level",level:5},{value:"Multi level",id:"multi-level",level:5},{value:"Unsubscribe",id:"unsubscribe",level:5},{value:"packetId",id:"packetid-2",level:6},{value:"List of topics",id:"list-of-topics",level:5},{value:"$ Symbol",id:"-symbol",level:5}],g={toc:b};function f(e){var t,i=e,{components:u}=i,p=((e,t)=>{var n={};for(var s in e)r.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&l)for(var s of l(e))t.indexOf(s)<0&&c.call(e,s)&&(n[s]=e[s]);return n})(i,["components"]);return(0,s.kt)("wrapper",(t=h(h({},g),p),a(t,o({components:u,mdxType:"MDXLayout"}))),(0,s.kt)("p",null,"The setup consists of two basic concepts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"PUBLISH / SUBSCRIBE")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"CLIENT / BROKER"))),(0,s.kt)("p",null,"And three basic functionalities:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"CONNECT")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"PUBLISH")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"SUBSCRIBE"))),(0,s.kt)("p",null,"Also, several features help you to configure the messages.\nFor example:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"QoS (Quality of Service)"),(0,s.kt)("li",{parentName:"ul"},"Retained Messages"),(0,s.kt)("li",{parentName:"ul"},"Persistent Sessions"),(0,s.kt)("li",{parentName:"ul"},"Last Will and Testament (LWT)"),(0,s.kt)("li",{parentName:"ul"},"Keep Alive"),(0,s.kt)("li",{parentName:"ul"},"and many more.")),(0,s.kt)("p",null,"These features will be explained and dealt with subsequently."),(0,s.kt)("p",null,"Read more about Quality of Service:\n",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/quality-of-service"}),"Here"),".\nAnd ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/mqtt-brief-description"}),"here"),".\nAnd ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/publishing"}),"here"),".\nAnd ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/subscribing"}),"here"),".\nAnd ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/broker-introduction"}),"here"),"."),(0,s.kt)("p",null,"Read more about Retained Messages:\n",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/mqtt-brief-description"}),"Here"),".\nAnd ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/publishing"}),"here"),".\nAnd ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/subscribing"}),"here"),".\nAnd ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/broker-introduction"}),"here"),"."),(0,s.kt)("p",null,"Read more about Persistent Sessions:\n",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/broker-introduction"}),"Here"),".\nAnd ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/mosquitto-configuration"}),"here"),".\nAnd ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/supported-mqtt-versions"}),"here"),"."),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/publishing"}),"Last Will and Testament"),"."),(0,s.kt)("p",null,"Read more about Keep Alive:\n",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/security"}),"Here"),".\nAnd ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/mosquitto-configuration"}),"here"),".\nAnd ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/publishing"}),"here"),".\nAnd ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/subscribing"}),"here"),"."),(0,s.kt)("h3",h({},{id:"the-broker-is-the-central-entity"}),"The broker is the central entity."),(0,s.kt)("p",null,"There is no alternative for clients (publisher and subscribers) than to connect to a broker when you are using MQTT protocol architecture."),(0,s.kt)("p",null,"All packets must pass the broker. Each getting checked for specific properties, also the broker filters the package in order to figure out whom (subscribers) to forward the package to."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"brokerHandlingSubscriptions",src:n(18584).Z,width:"800",height:"300"})),(0,s.kt)("p",null,"The broker covers most of the workload. So the client device only has to do minimal processing, using minimal bandwidth."),(0,s.kt)("p",null,"A typical setup could look like this:\n",(0,s.kt)("img",{alt:"CONNECT",src:n(69081).Z,width:"3000",height:"1688"})),(0,s.kt)("h3",h({},{id:"pro-mosquitto"}),"Pro Mosquitto"),(0,s.kt)("p",null,'Brokers are being offered as so-called "Managed brokers", or "Self-hosted brokers".'),(0,s.kt)("p",null,"The difference is whether a broker is operated/hosted by someone else, or the user is installing, hosting, and looking after the broker on its own server - on its own."),(0,s.kt)("p",null,"Cedalo is offering ",(0,s.kt)("a",h({parentName:"p"},{href:"https://cedalo.com/mqtt-broker-pro-mosquitto/"}),"professional support")," to meet the customers expectations."),(0,s.kt)("p",null,'As usual, a "Managed broker" needs no server setup, as it runs on a cloud service.\nBut as setups differ, a "Managed broker" might need a special server setup/configuration.'),(0,s.kt)("p",null,"Self-hosted brokers require a VPS- or server-sided installation."),(0,s.kt)("h2",h({},{id:"mqtt-model"}),"MQTT Model"),(0,s.kt)("h3",h({},{id:"broker-client-connection"}),"Broker-client connection"),(0,s.kt)("p",null,"If you look at the system without any security measurements, it's very simple."),(0,s.kt)("p",null,"To publish messages you must only know the hostname/IP and port of the broker."),(0,s.kt)("p",null,"To establish a connection there is always a client-initiated CONNECT packet needed, that is sent by the client to the broker."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"CONNECT",src:n(73413).Z,width:"600",height:"400"})),(0,s.kt)("p",null,"The broker in return responds by sending a so-called CONNACK packet (Acknowledge connection request) and a status code."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"CONNACK",src:n(44528).Z,width:"600",height:"280"})),(0,s.kt)("p",null,"After the CONNECT and CONNACK packet are exchanged, the connection is enabled."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"connect",src:n(64360).Z,width:"800",height:"300"})),(0,s.kt)("h3",h({},{id:"connect"}),"Connect"),(0,s.kt)("p",null,"To connect, the client sends a CONNECT MQTT-Packet to the broker."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"CONNECT",src:n(73413).Z,width:"600",height:"400"})),(0,s.kt)("h4",h({},{id:"clientid"}),"clientId"),(0,s.kt)("p",null,"The clientId identifies each MQTT client that is connecting to an MQTT broker."),(0,s.kt)("p",null,"The clientId can come from the client, but it does not always have to."),(0,s.kt)("p",null,"If permitted, a clientId can be blank."),(0,s.kt)("p",null,"Whenever the client does not set a clientId, the broker sets one on behalf of the client."),(0,s.kt)("p",null,"Still, each client must have a unique clientId."),(0,s.kt)("p",null,"If a client connects to the broker and another client session already exists with the clientId that the new client has chosen, the old session will be kicked out and taken over."),(0,s.kt)("p",null,"The permission to be able to do so must be set in the configurations previously."),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/mosquitto-configuration"}),"Mosquitto Configuration"),"."),(0,s.kt)("p",null,"In this case, a clientId will be generated automatically by the broker."),(0,s.kt)("p",null,"For clients that are not persistent, there is no need to generate their clientId because they will not be using it. Unless it is used for authentication."),(0,s.kt)("p",null,"In that case, the client sends a blank clientId to the broker, and the broker generates a unique id for it whilst the session is open."),(0,s.kt)("p",null,"Automatically generated clientIds should not be used in combination with persistent sessions!"),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/mosquitto-configuration"}),"Mosquitto Configuration"),"."),(0,s.kt)("p",null,"Whenever clientIds are used by different applications or users multiple times, each connection will have different conduct.\nEnsure that you request a new session whenever you connect with deviant operation matters."),(0,s.kt)("h4",h({},{id:"cleansession"}),"cleanSession"),(0,s.kt)("p",null,"If the cleanSession is set true ( = true), the client does not want to store messages.\nAlso, if set true, previous persistent sessions are dismissed."),(0,s.kt)("h4",h({},{id:"persistent-sessions"}),"Persistent sessions:"),(0,s.kt)("p",null,"Whenever the Persistent session is active (cleanSession flag=false):"),(0,s.kt)("p",null,"All information a client has not been received from the broker since the last connection, will be saved on the broker, to ensure the client does not miss out on any messages whilst without connection."),(0,s.kt)("p",null,"The client must request a persistent session when connecting to the broker."),(0,s.kt)("p",null,'To tell the broker to create a persistent session you must set the clean Sessiom flag  to "false" (cleanSession flag = false).'),(0,s.kt)("p",null,'In return, whenever you wish a non-persistent session, you must set the clean Session flag to "true" (cleanSession flag = true).'),(0,s.kt)("p",null,"An active MQTT persistent session (with the cleanSession having the \u201cfalse\u201d value) is activated whenever the client disconnects ungracefully. All information that the client did not receive from the broker since the last active connection will be preserved on the broker and delivered to the client once the connection is restored. The broker resumes the client in the existing session if the clientId is the same as the disconnected client. A client will not have to resubscribe to all topics again."),(0,s.kt)("p",null,"Persistent sessions store following informations:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Whether the session exists. Even though a topic has no subscriptions and therefore the session would be without real use.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"All subscriptions.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"All QoS1 or QoS2 messages that haven't been confirmed by the client yet."))),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/quality-of-service"}),"Quality of Service"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"All new QoS1 or QoS2 messages the client missed whilst being offline.")),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/quality-of-service"}),"Quality of Service"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"All QoS2 messages the client has not completely acknowledged.")),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/quality-of-service"}),"Quality of Service"),"."),(0,s.kt)("p",null,"All clients must store a persistent session too, including:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Yet not confirmed messages by a broker in a QoS1 or QoS2 flow.")),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/quality-of-service"}),"Quality of Service"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Not acknowledged QoS2 messages by the broker.")),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/quality-of-service"}),"Quality of Service"),"."),(0,s.kt)("p",null,"Whenever a connection between a broker and the client is disconnected, and the session is set as non-persistent, the client can not recreate the subscriptions to all topics it has described to."),(0,s.kt)("p",null,"A worst case scenario would be when the client can't remember all of its subscribtions."),(0,s.kt)("p",null,"The subscriber must manually subscribe to all topics again."),(0,s.kt)("p",null,"Whenever a persistent session is created by the client, and the broker already queued messages of an earlier persistent session, the broker delivers the queued messages using the same old session."),(0,s.kt)("p",null,"With MQTT 3.1.1 the CONNACK message contains a session present flag, telling the client whether a previously established session is still open."),(0,s.kt)("h4",h({},{id:"persistent-or-clean-session---what-kind-of-session-do-you-need"}),"Persistent or Clean Session - What kind of session do you need:"),(0,s.kt)("p",null,"\u2003Persistent session:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The client must receive all messages.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The broker must queue the missed messages.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The client must resume all QoS1 and QoS2 messages after reconnecting to the broker."))),(0,s.kt)("p",null,"Read more about Quality of Service:\n",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/quality-of-service"}),"Quality of Service"),"."),(0,s.kt)("p",null,"Clean Session:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The client only needs to publish messages to topics.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The client doesn't need to subscribe to topics.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The client must not resume with messages it missed."))),(0,s.kt)("h4",h({},{id:"usernamepassword"}),"username/password"),(0,s.kt)("p",null,"MQTT can forward and handle username and password within a sent packet."),(0,s.kt)("p",null,"It's important that whenever a packet is not encrypted or hashed (either by implementation or TSL), the password is sent as plain text."),(0,s.kt)("p",null,"Read more about Security:\n",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/security"}),"Security"),"."),(0,s.kt)("h4",h({},{id:"lastwill"}),"lastWill"),(0,s.kt)("p",null,"The willMessage is a message the client (both subscriber and publisher) has to set when connecting to the broker. It's intention is that any connected client (either publisher or subscriber) receives a message informing about connection-loss when the connection is terminated or even not given during a specific time (keepAlive).\nIn short: you set up a message that is sent to all connected clients (publishers and subscribers) for the case of connection loss."),(0,s.kt)("p",null,"The lastWill can be configured by:\n",(0,s.kt)("strong",{parentName:"p"},"lastWillTopic")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The MQTT topic that clients subscribed to, who will receive the lastWill message.")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"lastWillMessage")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Simply the payload of the lastWill message."),(0,s.kt)("li",{parentName:"ul"},"The broker distributes the lastWillMessage when one of these events happens:"),(0,s.kt)("li",{parentName:"ul"},"There is no communication between client and broker within the defined keepAlive period.\nRead more about Keep Alive:\n",(0,s.kt)("a",h({parentName:"li"},{href:"/mosquitto/security"}),"Here"),".\nAnd ",(0,s.kt)("a",h({parentName:"li"},{href:"/mosquitto/mosquitto-configuration"}),"here"),".\nAnd ",(0,s.kt)("a",h({parentName:"li"},{href:"/mosquitto/publishing"}),"here"),".\nAnd ",(0,s.kt)("a",h({parentName:"li"},{href:"/mosquitto/subscribing"}),"here"),".")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The client breaks off without sending a DISCONNECT packet."),(0,s.kt)("li",{parentName:"ul"},"The broker shuts down the network connection when an error occurs.")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"lastWeillRetain")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Indicates whether the message will be a retained one or not."),(0,s.kt)("li",{parentName:"ul"},"lastWillRetain = true, the message will be retained. All consumers subscribing to the topic after on will get the retained messages.")),(0,s.kt)("p",null,'Retained messages should be considered to be a "last known good" value.\nThe canonical example is a sensor that publishes when a door is opened/closed. If we didn\'t have retained messages, a subscriber would have to wait until the door was opened or closed, and hence a message published, before it knew the state of the door.\nThis could happen very infrequently. With a retained message, the subscriber gets to know the state of the door as soon as it subscribes - but it also knows that this is not a "fresh" message.'),(0,s.kt)("p",null,"As the client reconnects and publishes a message all subscribers will know that the client is connected again."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"lastWillQoS"),": If the lastWillQoS is set to 1 or 2, the message will be sent with the QoS Level."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"QoS1: Every subscriber subscribing to the topic with QoS=1 will get the message at least once."),(0,s.kt)("li",{parentName:"ul"},"QoS2: Every subscriber subscribing to the topic with QoS=2 will get the message exactly once.")),(0,s.kt)("p",null,'lastWill flag=1/true\nThe lastWillMessage will be sent whenever the connection breaks down."'),(0,s.kt)("p",null,"lastWill flag=0/false\nThere is no lastWillMessage set, so there is nothing that could be sent as a retained message (= A message every new subscriber receives right after subscribing)."),(0,s.kt)("p",null,"lastWil flag=1/true, lastWillRetain=0/false\nA message should be sent after the connection breaks down. But the message will not be sent as a retained message (= A message every new subscriber receives right after subscribing)."),(0,s.kt)("p",null,"lastWillflag=1/true, lastWillRetain=1/true\nSend the message straight to all new subscribers. Also when the connection breaks down."),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/quality-of-service"}),"Quality of Service"),"."),(0,s.kt)("h4",h({},{id:"keepalive"}),"keepAlive"),(0,s.kt)("p",null,"The MQTT keepAlive parameter identifies the maximum interval in seconds (e.g., 120, as I show in this article\u2019s example) when a client maintains the MQTT connection but without communication (sending an MQTT packet)."),(0,s.kt)("p",null,"After the specified keepAlive parameter period is over, a client sends a PING request (PINGREQ), and a broker has to respond with a PING Response (PINGRESP). If no response follows the PING request, the client can assume the connection has disconnected. Also, the broker is waiting for the PING request. It\u2019s the broker\u2019s duty to expect a PINGREQ and wait for another half of the set in the keepAlive parameter time, but then disconnect the connection for good."),(0,s.kt)("p",null,"No matter who is not answering or sending the PINGREQ or PINGRESP within the specific time interval plus another half of the very same interval, the broker or client must disconnect.\nWhen this happens, the broker sends the lastWill and testament message. If the client has created one."),(0,s.kt)("p",null,"Disabling the keepAlive feature is simply done by setting keepAlive=0."),(0,s.kt)("p",null,"As a client is online again whilst a half-open connection is still kept on by the broker, the broker simply performs a client take-over."),(0,s.kt)("p",null,"Meaning the connection is shut down and establishing a new connection."),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/publishing"}),"Last Will and Testament"),"."),(0,s.kt)("p",null,"In terms of data size, the PINGREQ, PINGRESP, and DISCONNECT packets require no variable header, nor a Payload. The packets, therefore, consume only 2 bytes each."),(0,s.kt)("p",null,"keepAlive contains two functions:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Network outage or peer death recognition."),(0,s.kt)("li",{parentName:"ul"},"Hold on to the connection in case no interaction took action for a specific time.")),(0,s.kt)("p",null,"A maximum length of the time interval is defined for each client request to connect with the broker."),(0,s.kt)("p",null,"Within the interval, it's ok that the client and broker do not transmit messages."),(0,s.kt)("p",null,"In fact, after this interval, the client must send a so-called PING Request packet (PINGREQ)."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"PINGREQ",src:n(57502).Z,width:"600",height:"203"})),(0,s.kt)("p",null,"The broker must respond with a PING Response (PINGRESP)."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"PINGRESP",src:n(97010).Z,width:"600",height:"203"})),(0,s.kt)("p",null,'If the connection is out of sync, a participant is not responding - called a "half-open connection", keepAlive takes action.'),(0,s.kt)("p",null,"The keepAlive feature makes sure an open connection between broker and client is still running. Additionally the client and broker are aware of the connection. Even though no messages are sent."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"keepAlive",src:n(34209).Z,width:"800",height:"300"})),(0,s.kt)("h4",h({},{id:"connect-packet-mqtt-v50"}),"CONNECT packet MQTT v.5.0"),(0,s.kt)("admonition",h({},{type:"caution"}),(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("strong",{parentName:"p"},"Attention")),(0,s.kt)("p",{parentName:"admonition"},"The PUBLISH packet for MQTT v.3.1.1 and v.5.o differ!")),(0,s.kt)("p",null,"The CONNECT packet for MQTT v.3.1.1 and v.5.o differ!"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"mqttProtocol",src:n(69902).Z,width:"6614",height:"4409"})),(0,s.kt)("p",null,"sessionExpiryInterval:"),(0,s.kt)("p",null,"Whenever a session ExpiryInterval is set (e.g. 60) a cleanStart is automatically set to \u201c0\u201d.\nWith a sessionExpiryInterval active the sessionState will be saved immediately after the keepAlive runs out (e.g. 120 plus half of the keepAlive - that would be 60 seconds in this case).The sessionState is safed for the amount of time set (in this case 60 seconds).\nsessionExpiryInterval is solving the problem that you don\u2019t need to send anther CONNECT packet including cleanSession=1 (MQTT v.3.1.1) to discard the session after set it retained."),(0,s.kt)("p",null,"cleanStart:"),(0,s.kt)("p",null,"cleanStart = 0"),(0,s.kt)("p",null,"In this case the server resumes communication with the client based on the state of the current session (the session is identified by the clientId).\nIf there is no earlier session, the broker must create a new session.\nIn case of a connection disconnectiong, the broker must store:\nWhether the session exists. Even though a topic has no subscriptions and therefore the session would be without real use.\nAll subscriptions.\nAll QoS1 or QoS2 messages that haven't been confirmed by the client yet.\ncleanStart = 1\nIn this case the broker discards any previous sessions and opens a new one."),(0,s.kt)("p",null,"cleanStart + persistentSession:"),(0,s.kt)("p",null,"To enable a persistent session, the client must set the cleanSession=false."),(0,s.kt)("h3",h({},{id:"publish--subscribe-model"}),"Publish / Subscribe model"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"PUBLISH",src:n(2260).Z,width:"600",height:"310"})),(0,s.kt)("h4",h({},{id:"client-server-model"}),"Client-Server Model"),(0,s.kt)("p",null,"The PUBLISH/SUBSCRIBE model consists of the client-server model."),(0,s.kt)("p",null,"Any client communicates with an endpoint via the broker.\nBefore a client wants to publish messages it first has to set up a connection with the broker."),(0,s.kt)("p",null,"Also, a subscribing client has to do the same."),(0,s.kt)("p",null,"Therefore the broker can decouple publisher and subscriber."),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/subscribing"}),"Decoupling"),"."),(0,s.kt)("h4",h({},{id:"decpupling"}),"Decpupling"),(0,s.kt)("p",null,"Since the broker decouples publisher and subscriber, the clients do not have to connect directly among themselves."),(0,s.kt)("p",null,"It follows that the connection count only grows linearly. If all clients had to connect to each other for communication, the connection count would grow exponentially."),(0,s.kt)("p",null,"All connections are solely with the broker. The broker is thus the central hub in MQTT communication. And with it the associated workload. This allows great flexibility in terms of the number and type of communication participants."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"brokerHandlingSubscriptions",src:n(18584).Z,width:"800",height:"300"})),(0,s.kt)("h4",h({},{id:"decoupling-impacts"}),"Decoupling impacts"),(0,s.kt)("p",null,"The publish-subscribe model is a decoupling solution of the traditional client/broker model."),(0,s.kt)("p",null,"Following:\nThere is no need for the publisher and subscriber to run at the same time. Downtimes do not mean that messages are lost.\nTherefore publisher and subscriber don't exchange IP addresses and ports."),(0,s.kt)("p",null,"One of the most advantageous aspects MQTT and the pub/sub model offers is to finally be able to break data silos that represent sensitive walls and hurdles in a competitive surrounding more and more."),(0,s.kt)("p",null,"MQTT allows data interoperability and processing using only minimum bandwidth."),(0,s.kt)("p",null,"MQTT can be used in any industry 4.0 device system."),(0,s.kt)("p",null,"As the broker covers all the workload, the client device only has to do minimal processing using minimal bandwidth.\nTherefore it's also simple to implement within any technical surrounding."),(0,s.kt)("p",null,"The architecture can be scaled easily without affecting existing client devices.\nThis makes it easy to work and change architecture."),(0,s.kt)("h4",h({},{id:"mqtt-can-process-messages-event-driven"}),"MQTT can process messages event-driven."),(0,s.kt)("p",null,"Whilst waiting for a message or publishing it, other tasks are not blocked."),(0,s.kt)("p",null,"Also, APIs can be used to create even more powerful systems."),(0,s.kt)("p",null,"In most cases, it's convenient to use the Management Center Cedalo offers. Lots of tasks you might need for your processes can be adjusted and incorporated there."),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/management-center"}),"Management Center"),"."),(0,s.kt)("p",null,"Most client libraries work asynchronously, based on callbacks and models similar to callbacks."),(0,s.kt)("p",null,"The Mosquitto MQTT Broker supports any client library that is supporting MQTT pro."),(0,s.kt)("p",null,"Here is an ",(0,s.kt)("a",h({parentName:"p"},{href:"https://www.eclipse.org/paho/index.php?page=downloads.php"}),"Overview"),"."),(0,s.kt)("h2",h({},{id:"central-hub"}),"Central Hub"),(0,s.kt)("p",null,"Direct contact between subscriber and publisher is never able. Only the broker enables transmitting messages.\nTherefore the publishing client has only one duty. To make sure that the message is sent to the broker. Everything else is dealt with by the broker."),(0,s.kt)("p",null,"Also, the subscribing client only has one duty. To subscribe to the topic it wants to receive messages from."),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/publishing"}),"Publishing"),"."),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/broker-introduction"}),"Subscribing"),"."),(0,s.kt)("p",null,"The setup allows no other than the broker to connect the publisher and subscriber. There is no way around this setup.\nOnce the PUBLISHER and SUBSCRIBER are authenticated by the broker. Backed on information the broker sent, the broker ensures the connected devices can send messages to other devices.\nAnd the other way round, to receive messages from other devices."),(0,s.kt)("p",null,"So the broker is the central hub every message must pass. The brokers job is to receive, filter, and forward the message."),(0,s.kt)("p",null,"The brokers' responsibility is to receive all messages that are sent by the publishing clients."),(0,s.kt)("p",null,"In the next step, the broker must filter the incoming message. Part of it is to check the configured rules the publishing client has set. Following the broker authorativates who have subscribed to the topic of the message, and finally forwarding the message to the subscribing clients."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"broker",src:n(86946).Z,width:"800",height:"300"})),(0,s.kt)("h2",h({},{id:"mqtt-pubsub-model"}),"MQTT pub/sub model"),(0,s.kt)("h3",h({},{id:"publish"}),"Publish"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"PUBLISH",src:n(2260).Z,width:"600",height:"310"})),(0,s.kt)("p",null,"The broker simply delivers the message to all subscribers.\nIt's the duty of the broker. There is no obstacle within the broker."),(0,s.kt)("p",null,"Either one publisher publishes messages to multiple Subscribers.\nOr multiple publisher publish messages to just one subscriber.\nOr any combination of multiple publishers/subscribers."),(0,s.kt)("p",null,'Also, consumers can publish as well. This is called "Bidirectional publishing".'),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"bidirectionalPublishing",src:n(66623).Z,width:"600",height:"156"})),(0,s.kt)("p",null,"Any publisher can only be identified when information about the publisher is included in the topic or payload."),(0,s.kt)("h4",h({},{id:"packetid"}),"packetId"),(0,s.kt)("p",null,"Identifies a message."),(0,s.kt)("p",null,"The packetId is set by the client library and broker."),(0,s.kt)("h4",h({},{id:"topicname"}),"topicName"),(0,s.kt)("p",null,"The topic is set using a simple UTF-8 string."),(0,s.kt)("p",null,'Topics are treated hierarchically. To delimiter, a slash "/" symbolizes a separation. Allowing the client organizational structure, much like a common filesystem.'),(0,s.kt)("p",null,"There is no need for creating a topic. You can subscribe to any topic, even though there might not be messages published.\nOn the other hand, you must know about the topic names to be able to subscribe to them."),(0,s.kt)("h4",h({},{id:"qos"}),"QoS"),(0,s.kt)("p",null,"The QoS (Quality of Service) defines a certain level of service that enables the publisher to make sure that the certainty and quantity of a subscriber receiving a sent message equal the importance to receive the message at all, plus whether to receive the message only once."),(0,s.kt)("p",null,"Also, a subscriber can set a QoS, defining the importance to receive every message, and whether to accept one message multiple times or not.\nThere are three levels available:"),(0,s.kt)("h4",h({},{id:"qos-0---at-most-once"}),"QoS 0 - At Most Once"),(0,s.kt)("p",null,"QoS 0 is the minimum QoS level."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"qos0",src:n(71744).Z,width:"800",height:"600"})),(0,s.kt)("p",null,'The broker/client is delivering the message only once, without confirmation.\nThere is no guarantee that the message sent has been sent to the subscriber.\nThe recipient on the other end does not acknowledge the receipt.\nNeither is the acknowledgment stored.\nThe QoS0 - level is often referred to be the "fire and forget"-level.'),(0,s.kt)("p",null,"Using the minimum level of quality can make sense, as MQTT requires to be lightweight, bandwidth-saving, and super fast delivery.\nQoS0 does not require as many resources on the broker."),(0,s.kt)("p",null,"A subscriber can also use QoS0.\n",(0,s.kt)("img",{alt:"qos0+qos2",src:n(61295).Z,width:"1600",height:"600"})),(0,s.kt)("h4",h({},{id:"qos-1---at-least-once"}),"QoS 1 - At Least Once"),(0,s.kt)("p",null,"Level 1 QoS guarantees the delivery of a message to the receiver at least once."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"qos1",src:n(64539).Z,width:"800",height:"600"})),(0,s.kt)("p",null,'However, "at least once" means that a single message can be transmitted to the receiver more than once. Thus, this QoS level ensures that a message reaches its subscribers but does not care about how many times that might be the case.\nAnd the message is stored until the broker receives an acknowledgment.'),(0,s.kt)("admonition",h({},{type:"info"}),(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("strong",{parentName:"p"},"Digression:")," How the acknowledgment works"),(0,s.kt)("p",{parentName:"admonition"},"A subscriber must send a so-called PUBACK packet (publish acknowledge) to the broker when the broker demands acknowledgment."),(0,s.kt)("p",{parentName:"admonition"},"If the subscriber does not send a PUBACK, the broker continues sending PUBLISH packets. If the broker sends the PUBLISH packet again, even the second time, it contains a duplicate flag (DUP)."),(0,s.kt)("p",{parentName:"admonition"},"The packetId enables the broker to match the PUBLISH packet and PUBACK packet. And the packetId is free and reusable again.")),(0,s.kt)("p",null,"The broker must store:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The information that the session still exists.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"All subscriptions a client subscribed to.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The QoS1 messages waiting to be sent to the client.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The QoS1 message, will message and will delay the interval that the client received, but without confirmation."))),(0,s.kt)("p",null,"The publishing client must store all QoS1 messages sent to the broker without confirmation from the broker."),(0,s.kt)("p",null,"On the other hand, you really should think about the disadvantages as QoS1 occupies resources.\nWhether to use QoS1 or QoS0 you might want to make up your mind before setting up the broker."),(0,s.kt)("p",null,"A subscriber can also use QoS1."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"qos0+qos1",src:n(76131).Z,width:"1600",height:"600"})),(0,s.kt)("h4",h({},{id:"qos-2---exactly-once"}),"QoS 2 - Exactly Once"),(0,s.kt)("p",null,"QoS level 2 guarantees each message is received exactly once."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"qos2",src:n(34612).Z,width:"800",height:"600"})),(0,s.kt)("p",null,"To do as pleased the broker transmits the PUBLISH packet as usual.\nBut the recipient must respond with a PUBREC Publish Release).\nAfter that happens, the broker sends another request (PUBREL), and the recipient must respond again."),(0,s.kt)("p",null,"The publishing client must store all QoS2 messages sent to the broker without confirmation from the broker."),(0,s.kt)("p",null,"The broker must store:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The information that the session still exists.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"All subscriptions a client subscribed to.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The QoS2 messages waiting to be sent to the client.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The QoS2 message, will message and will delay the interval that the client received, but without confirmation."))),(0,s.kt)("p",null,"To discard all stored states and answers a so-called PUBCOMP packet (Publish complete) is sent. That's the end of the QoS2 order of events."),(0,s.kt)("p",null,"Until a PUBCOMP is sent, the broker stores a reference of the original PUBLISH packets packetId.\nThe packet and packetId become reusable again."),(0,s.kt)("p",null,"A subscriber can also use QoS2."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"qos2",src:n(61295).Z,width:"1600",height:"600"})),(0,s.kt)("p",null,"To define which level of Quality of Service you should use, this may help you:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"QoS0"),":\nThe connection between sender and receiver is stable. In addition, it's no problem to miss out on several sent messages if there might be problems with the connection stability.\nAlso, message queueing is not needed.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"QoS1"),":\nThe receiver must receive every message sent. Also, your setup can handle the duplicate message.\nStill, QoS2 is too much overhead for your connection (also QoS1 delivers messages faster than QoS2)."))),(0,s.kt)("admonition",h({},{type:"caution"}),(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("strong",{parentName:"p"},"Attention")," "),(0,s.kt)("p",{parentName:"admonition"},"QoS1 needs way more resources than QoS0. (#).")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"QoS2"),":\nYour system must be fed with every message exactly once. Duplicate messages are not wanted or might even manipulate the system.\nAlso, the loss of a message is crucial. Often QoS2 is set whenever the loss of messages may result in loss of life, e.g. clinical surgery, or property, e.g. stock trading.\nSome industries such as a bank, firefight, aviation, etc require high completeness of data and timeliness.\nQoS2 bears the possibility of overhead.")),(0,s.kt)("h4",h({},{id:"retainflag"}),"retainFlag"),(0,s.kt)("p",null,"A retained message safes the last known value of the topic.\nIt's only possible to save up to one retained message, equal to one retained value."),(0,s.kt)("admonition",h({},{type:"info"}),(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("strong",{parentName:"p"},"Digression:")," Wildcards + retained messages"),(0,s.kt)("p",{parentName:"admonition"},"May the subscribing client include wildcards in the topic pattern they subscribe to, the client receives a retained message even if the topic of the retained message is not an exact match.")),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/broker-introduction"}),"Wildcards"),"."),(0,s.kt)("p",null,"In many cases, a device can not wait until the next time the publisher provides information sending a message."),(0,s.kt)("admonition",h({},{type:"note"}),(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("strong",{parentName:"p"},"Example")," A sensor of a car door tells whether the door is open or closed. As the door is used very infrequently, including a retained flag makes sense."),(0,s.kt)("p",{parentName:"admonition"},"Without a retained flag set (retainFlag=false), you must wait for the next time the door is opened or closed to find out about the status."),(0,s.kt)("p",{parentName:"admonition"},"With retained messages (retainFlag=true), you immediately find out, because the retained message gives you the last status. (#).")),(0,s.kt)("p",null,"The retainFlag identifies a message to be a retained message.\nTo identify the message itself the packetId is used."),(0,s.kt)("h4",h({},{id:"payload"}),"Payload"),(0,s.kt)("p",null,"MQTT is not limited by its payload format. It delivers what the publisher is sending.\nThe actual content of a message is the content of a payload."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"This could be a value, string, a JSON file or even content of a jpg or a mp3 file.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"Up to 256MB.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The payload does not encrypt the content. "))),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/security"}),"Security"),"."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The broker simply delivers what the publisher insert into the payload.")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"payload",src:n(96485).Z,width:"800",height:"600"})),(0,s.kt)("p",null,"Matter of fact the receiving clients don't even know about the data format they receive. Still, there's little chance that a client subscribes to a host and topic it doesn't know about in the first place. Following the client can forecast the receiving data format."),(0,s.kt)("p",null,"The subscriber can not reject a message.\nBut as it can do with it as pleased, that could be doing nothing as well.\nMeaning a subscriber could receive a message, but simply don't do anything with it."),(0,s.kt)("h4",h({},{id:"dupflag"}),"dupFlag"),(0,s.kt)("p",null,"A dupFlag indicates the duplicate of a message."),(0,s.kt)("p",null,"A message with dupFlag was resent."),(0,s.kt)("p",null,"Following a recipient didn't acknowledge the original message."),(0,s.kt)("p",null,"This could happen when the message contains QoS1 or QoS2."),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/quality-of-service"}),"Quality of Service"),"."),(0,s.kt)("h4",h({},{id:"publish-packet-mqtt-v50"}),"PUBLISH packet MQTT v.5.0"),(0,s.kt)("admonition",h({},{type:"caution"}),(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("strong",{parentName:"p"},"Attention")),(0,s.kt)("p",{parentName:"admonition"},"The PUBLISH packet for MQTT v.3.1.1 and v.5.o differ!")),(0,s.kt)("p",null,"v.5.0:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"mqttProtocol",src:n(68568).Z,width:"6614",height:"3659"})),(0,s.kt)("p",null,"messageExpiryInterval:"),(0,s.kt)("p",null,"With a sessionExpiryInterval active the sessionState will be saved immediately after the keepAlive (set in the CONNECT packet) runs out (e.g. 120 plus half of the keepAlive - that would be 60 seconds in this case).The sessionState is safed for the amount of time set (in this case 60 seconds)."),(0,s.kt)("p",null,"retainFlag:"),(0,s.kt)("p",null,"In many cases, a device can not wait until the next time the publisher provides information sending a message.\nA sensor of a car door tells whether the door is open or closed. As the door is used very infrequently, including a retained flag makes sense.\nWithout a retained flag set (retainFlag=false), you must wait for the next time the door is opened or closed to find out about the status.\nWith retained messages (retainFlag=true), you immediately find out, because the retained message gives you the last status.\nA retained message safes the last known value of the topic.\nIt's only possible to save up to one retained message, equal to one retained value.\nThe retainFlag identifies a message to be a retained message. To identify the message the packetId is used."),(0,s.kt)("p",null,"Payload:"),(0,s.kt)("p",null,"The actual content of a message is the content of a payload. Whether it's a .mp3-file or .mp4-file, a picture, or a video. Up to 256MB. The payload does not encrypt the content. The broker simply delivers what the publisher inserted into the payload."),(0,s.kt)("p",null,"dupFlag:"),(0,s.kt)("p",null,"A dupFlag indicates the duplicate of a message."),(0,s.kt)("h3",h({},{id:"subscribe"}),"Subscribe"),(0,s.kt)("p",null,"To receive messages on topics of interest, the client sends a SUBSCRIBE packet to the broker."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"SUBSCRIBE",src:n(67079).Z,width:"600",height:"373"})),(0,s.kt)("h4",h({},{id:"packetid-1"}),"packetId"),(0,s.kt)("p",null,"Unique packet identifier."),(0,s.kt)("h4",h({},{id:"subscriptions"}),"subscriptions"),(0,s.kt)("p",null,"A SUBSCRIBE packet does not have to have only one subscription. Multiple can be added."),(0,s.kt)("p",null,"The limitation on subscriptions a subscriber can subscribe to within one SUBSCRIBE packet is negligible, as it's a high number."),(0,s.kt)("p",null,"Each subscription consists of a topic and a QoS level.\nWhen subscriptions overlap, the broker delivers the message that has the highest QoS level for the specific topic."),(0,s.kt)("admonition",h({},{type:"caution"}),(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("strong",{parentName:"p"},"Attention")," "),(0,s.kt)("p",{parentName:"admonition"},"To subscribe to a topic, the subscriber must also set a QoS level of the topic subscription. (#).")),(0,s.kt)("p",null,"The brokers must make sure the subscribing client receives the messages that are permitted to be received by him in terms of security. But also concerning the QoS level that was set by the publishing client."),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/quality-of-service"}),"Quality of Service"),"."),(0,s.kt)("p",null,'Subscribing to several topics simultaneously is an option that\'s possible. A so-called "wildcard" enables this feature.'),(0,s.kt)("h4",h({},{id:"there-are-two-kinds-of-wildcards"}),"There are two kinds of wildcards:"),(0,s.kt)("h5",h({},{id:"single-level"}),"Single level"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"singleLevelWildcard",src:n(74357).Z,width:"600",height:"273"})),(0,s.kt)("p",null,"In addition to allowing clients to subscribe to specific topics, mosquitto also allows the use of two wildcards in subscriptions. + is the wildcard used to match a single level of hierarchy. "),(0,s.kt)("p",null,'For example, for a topic of "a/b/c/d", the following example subscriptions will match:'),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"a/b/c/d"),(0,s.kt)("li",{parentName:"ul"},"+/b/c/d"),(0,s.kt)("li",{parentName:"ul"},"a/+/c/d"),(0,s.kt)("li",{parentName:"ul"},"a/+/+/d"),(0,s.kt)("li",{parentName:"ul"},"+/+/+/+")),(0,s.kt)("p",null,"The following subscriptions will not match:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"a/b/c"),(0,s.kt)("li",{parentName:"ul"},"b/+/c/d"),(0,s.kt)("li",{parentName:"ul"},"+/+/+")),(0,s.kt)("h5",h({},{id:"multi-level"}),"Multi level"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"multiLevelWildcard",src:n(64192).Z,width:"600",height:"416"})),(0,s.kt)("p",null,'A "#" is used, the client subscribes to each topic that\'s after the #.'),(0,s.kt)("p",null,"There is no regulation for the length or hierarchical depth of the string."),(0,s.kt)("p",null,'The # must be placed as the last character in the topic and preceded by a forward slash. e.g.: "car/heating/#"'),(0,s.kt)("p",null,'The second wildcard is # and is used to match all subsequent levels of hierarchy. With a topic of "a/b/c/d", the following example subscriptions will match:'),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"a/b/c/d"),(0,s.kt)("li",{parentName:"ul"},"a/#"),(0,s.kt)("li",{parentName:"ul"},"a/b/#"),(0,s.kt)("li",{parentName:"ul"},"a/b/c/#"),(0,s.kt)("li",{parentName:"ul"},"+/b/c/#")),(0,s.kt)("p",null,'The $SYS hierarchy does not match a subscription of "#". If you want to observe the entire $SYS hierarchy, subscribe to $SYS/#.'),(0,s.kt)("p",null,'Note that the wildcards must be only ever used on their own, so a subscription of "a/b+/c" is not valid use of a wildcard. The # wildcard must only ever be used as the final character of a subscription.'),(0,s.kt)("p",null,"The wildcard characters (+ and #) can be used in topic filters. But they can not be used in or as topic names.\nTherefore wildcards are only intended for subscribing to messages and not for publishing messages."),(0,s.kt)("admonition",h({},{type:"caution"}),(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("strong",{parentName:"p"},"Attention")," "),(0,s.kt)("p",{parentName:"admonition"},"Topic level separators (/) can be used in both cases! (#).")),(0,s.kt)("p",null,"The broker checks the permission of the subscribing client and forwards the messages the subscriber is allowed to receive. Reversed this can mean that a subscribing client does not get the messages the client is not permitted to receive, even though the subscribing client may have subscribed to the topic using a wildcard."),(0,s.kt)("p",null,"Read more about Retained Messages:\n",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/mqtt-brief-description"}),"Here"),".\nAnd ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/broker-introduction"}),"here"),".\nAnd ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/subscribing"}),"here"),".\nAnd ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/publishing"}),"here"),"."),(0,s.kt)("p",null,"May the subscribing client include wildcards in the topic pattern they subscribe to, the client receives a retained message even if the topic of the retained message is not an exact match."),(0,s.kt)("p",null,"Topics starting with $ are not hit by a wildcard according to the standard."),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/broker-status"}),"Broker Status"),"."),(0,s.kt)("p",null,"The broker must acknowledge each SUBSCRIBE packet. Therefore the broker sends a SUBACK packet (subscribe acknowledge) to the client."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"SUBACK",src:n(65443).Z,width:"600",height:"286"})),(0,s.kt)("p",null,"The broker sends one return code for each topic/QoS-pair that it receives in the SUBSCRIBE packet."),(0,s.kt)("p",null,"The return codes can be:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"0 - Success-Maximum QoS0"),(0,s.kt)("li",{parentName:"ul"},"1 - Success-Maximum QoS1"),(0,s.kt)("li",{parentName:"ul"},"2 - Success-Maximum QoS2"),(0,s.kt)("li",{parentName:"ul"},"128 - Failure"),(0,s.kt)("li",{parentName:"ul"},"The Success-Maximum QoS0-2 shows the level of Quality of Service (QoS) that is set and can be supported.")),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/quality-of-service"}),"Quality of Service"),"."),(0,s.kt)("p",null,"Published messages, but no one subscribing, are discarded by the broker."),(0,s.kt)("p",null,"The broker filters the incoming messages relating to the topic."),(0,s.kt)("p",null,"In the next step, the filtered message gets forwarded to the subscribers that have subscribed to the topic."),(0,s.kt)("p",null,"That\u2019s how the subscriber only receives messages of interest."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"brokerHandlingSubscriptions",src:n(18584).Z,width:"800",height:"300"})),(0,s.kt)("p",null,'As there is no direct link between publisher and client, the publisher can never make sure that somebody is actually "listening" to the messages sent.'),(0,s.kt)("p",null,"In MQTT v5, if a client publishes with QoS 1 or 2 and there is no subscriber, then the broker can tell the publisher this in the PUBACK/PUBREC reply."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"PUBACK",src:n(33288).Z,width:"600",height:"219"})),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/quality-of-service"}),"Quality of Service"),"."),(0,s.kt)("admonition",h({},{type:"caution"}),(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("strong",{parentName:"p"},"Attention")," "),(0,s.kt)("p",{parentName:"admonition"},"MQTT v.3.1.1:"),(0,s.kt)("p",{parentName:"admonition"},"Whenever you disconnect unintendedly and haven't set a cleanSession flag (cleanSession=false) all topic subscriptions are lost. You must resubscribe to every single one again."),(0,s.kt)("p",{parentName:"admonition"},"In case you have set CleanFlag=false and reconnected with the same clientId, the broker remembers the topics you have subscribed to."),(0,s.kt)("p",{parentName:"admonition"},"MQTT v.5.0:"),(0,s.kt)("p",{parentName:"admonition"},"The session duration is set by the session expiry interval. (#).")),(0,s.kt)("p",null,"Read more about Clean Session:\n",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/mosquitto-configuration"}),"Here"),".\nAnd ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/publishing"}),"here"),".\nAnd ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/supported-mqtt-versions"}),"here"),".\nAnd ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/security"}),"here"),"."),(0,s.kt)("h5",h({},{id:"unsubscribe"}),"Unsubscribe"),(0,s.kt)("p",null,"A client can always UNSUBSCRIBE from a topic."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"UNSUBSCRIBE",src:n(7506).Z,width:"600",height:"286"})),(0,s.kt)("h6",h({},{id:"packetid-2"}),"packetId"),(0,s.kt)("p",null,"Uniquely identifies a message."),(0,s.kt)("h5",h({},{id:"list-of-topics"}),"List of topics"),(0,s.kt)("p",null,"The UNSUBSCRIBE packet contains also the topics you want to unsubscribe from."),(0,s.kt)("p",null,"After the packet is sent, the broker unsubscribes the client from the topics."),(0,s.kt)("h5",h({},{id:"-symbol"}),"$ Symbol"),(0,s.kt)("p",null,"Read more about ",(0,s.kt)("a",h({parentName:"p"},{href:"/mosquitto/broker-status"}),"Broker Status"),"."),(0,s.kt)("p",null,'$ topics are just "reserved" and shouldn\'t be used by applications.'))}f.isMDXComponent=!0},44528:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/CONNACK-01d74fa06e61abb23ab6c3136b9ee4f9.png"},73413:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/CONNECT-5a980387b5072c46485bb7e5846a778e.png"},69902:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/CONNECT_v.5.0-8c5656742c3f8afd987b95cc3a9eb6bb.png"},57502:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/PINGREQ-3f59bf01166e56a43e22c0a329a2ac23.png"},97010:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/PINGRESP-015856310847e3d4f1d6765f307f3b43.png"},33288:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/PUBACK-006003278fa5905ddb879b54cbb6f378.png"},2260:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/PUBLISH-e0d3503e716c9661f59b1704ad9cd154.png"},68568:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/PUBLISH_v.5.0-3d6c82cb0f4df38d89551459c7652bdb.png"},65443:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/SUBACK-53a4bd04acbd26f7aaf37a9888f04f95.png"},67079:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/SUBSCRIBE-85c834fcaaa6eed0eb6bd0b86a9a96fa.png"},7506:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/UNSUBSCRIBE-bafcc7ea712e85f35476223766cd5572.png"},66623:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/bidirectionalPublishing-9296c36cb8f9ad15fef6dc33786a9fc3.png"},86946:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/broker-2d2f0fbb06b215cbf5575a027947893c.gif"},18584:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/brokerHandlingSubscriptions-d3e85c05cd78b0f3fea3a8d0b7d436b7.gif"},64360:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/connect-bb85ee2b04c822acf41b326292e3627d.gif"},34209:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/keepAlive-83ae00d87f5d618e7b258615abafe0a2.gif"},64192:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/multiLevelWildcard-5891b52d18a7e2c766096b3c84009134.png"},69081:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/networkOverview-b885b797e523c80f63b05dbffcc16afd.jpg"},96485:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/payload-b02a038366188e293870116a40a5c9af.gif"},76131:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/qos0+qos1-b084c2b4f728bc96d390aac812f363d5.gif"},61295:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/qos0+qos2-e178dbbb7adc1b1e0ba62b91cd50a399.gif"},71744:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/qos0-1aeda19576b130b04c2d29840088f0e1.gif"},64539:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/qos1-5409a4757808e7b863ff37067e5255c0.gif"},34612:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/qos2-ef4acf13bfe9c2b521acab64da7eaae4.gif"},74357:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/singleLevelWildcard-91bc807966ddb3472020cd99e51ee06c.png"}}]);