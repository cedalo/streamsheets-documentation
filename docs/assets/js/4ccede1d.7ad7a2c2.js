"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[76284],{83166:(e,t,n)=>{var a=n(64836);t.Z=void 0;var i=a(n(64938)),o=n(85893),r=(0,i.default)((0,o.jsx)("path",{d:"M12 2 4 5v6.09c0 5.05 3.41 9.76 8 10.91 4.59-1.15 8-5.86 8-10.91V5l-8-3zm-1.06 13.54L7.4 12l1.41-1.41 2.12 2.12 4.24-4.24 1.41 1.41-5.64 5.66z"}),"GppGood");t.Z=r},2548:(e,t,n)=>{var a=n(64836);t.Z=void 0;var i=a(n(64938)),o=n(85893),r=(0,i.default)((0,o.jsx)("path",{d:"M11 7h2v2h-2zm0 4h2v6h-2zm1-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"}),"InfoOutlined");t.Z=r},33796:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>b,contentTitle:()=>h,default:()=>N,frontMatter:()=>u,metadata:()=>f,toc:()=>k});var a=n(3905),i=n(49044),o=n(87961),r=Object.defineProperty,l=Object.defineProperties,d=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,c=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,g=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&c(e,n,t[n]);if(s)for(var n of s(t))m.call(t,n)&&c(e,n,t[n]);return e};const u={id:"mqttapi-bridges-index",title:"MQTT Control API for Bridges",sidebar_label:"Bridges"},h=void 0,f={unversionedId:"api/mqttapis/mqttapi-bridges-index",id:"version-3.1/api/mqttapis/mqttapi-bridges-index",title:"MQTT Control API for Bridges",description:"The below mentioned plugins provide a MQTT Control API that, among others, allows to change their configuration without the need to change the config file by hand or to restart the broker afterwards. Furthermore, the configuration gets synchronized across nodes when you have set up a clusterized environment.",source:"@site/mosquitto_versioned_docs/version-3.1/api/mqttapis/mqttapi-bridges-index.md",sourceDirName:"api/mqttapis",slug:"/api/mqttapis/mqttapi-bridges-index",permalink:"/mosquitto/api/mqttapis/mqttapi-bridges-index",draft:!1,tags:[],version:"3.1",frontMatter:{id:"mqttapi-bridges-index",title:"MQTT Control API for Bridges",sidebar_label:"Bridges"},sidebar:"someSidebar",previous:{title:"MQTT API Overview",permalink:"/mosquitto/api/api-overview"},next:{title:"Azure Bridge",permalink:"/mosquitto/api/mqttapis/azure-bridge"}},b={},k=[{value:"MQTT control topic",id:"mqtt-control-topic",level:2},{value:"getConfig",id:"getconfig",level:3},{value:"updateConfig",id:"updateconfig",level:3},{value:"getSchema",id:"getschema",level:3}],v={toc:k};function N(e){var t,n=e,{components:r}=n,c=((e,t)=>{var n={};for(var a in e)p.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&s)for(var a of s(e))t.indexOf(a)<0&&m.call(e,a)&&(n[a]=e[a]);return n})(n,["components"]);return(0,a.kt)("wrapper",(t=g(g({},v),c),l(t,d({components:r,mdxType:"MDXLayout"}))),(0,a.kt)(i.Z,{mdxType:"PremiumFeature"}),(0,a.kt)(o.Z,{version:"3.1",mdxType:"SinceVersion3"}),(0,a.kt)("p",null,"The below mentioned plugins provide a MQTT Control API that, among others, allows to change their configuration without the need to change the config file by hand or to restart the broker afterwards. Furthermore, the configuration gets synchronized across nodes when you have set up a clusterized environment."),(0,a.kt)("h2",g({},{id:"mqtt-control-topic"}),"MQTT control topic"),(0,a.kt)("p",null,"The plugins can be controlled by sending command messages to a topic. Responses are also published to the topic followed by ",(0,a.kt)("inlineCode",{parentName:"p"},"/response"),".\nThe topic depends on the bridge, you are trying to configure or request information about:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",g({parentName:"tr"},{align:null}),"Bridge"),(0,a.kt)("th",g({parentName:"tr"},{align:null}),"Topic"),(0,a.kt)("th",g({parentName:"tr"},{align:null}),"Response Topic"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"Azure Bridge"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"$CONTROL/cedalo/azure-eventhubs-bridge/v1")),(0,a.kt)("td",g({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"$CONTROL/cedalo/azure-eventhubs-bridge/v1/response"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"Influx DB Bridge"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"$CONTROL/cedalo/influxdb-bridge/v1")),(0,a.kt)("td",g({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"$CONTROL/cedalo/influx-db/v1/response"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",g({parentName:"tr"},{align:null}),"MongoDB Bridge"),(0,a.kt)("td",g({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"$CONTROL/cedalo/mongodb-bridge/v1")),(0,a.kt)("td",g({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"$CONTROL/cedalo/mongo-db/v1/response"))))),(0,a.kt)("p",null,"The following commands are currently available:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getSchema")," to get the schema used to validate the JSON config"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getConfig")," to fetch current config as a JSON object"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"updateConfig")," to update the complete configuration of the respective bridge"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getStatus")," to fetch information about current bridge status")),(0,a.kt)("p",null,"Each control message has the following format:"),(0,a.kt)("pre",null,(0,a.kt)("code",g({parentName:"pre"},{className:"language-json"}),'{\n    "commands": [\n        {\n            "command": <A known control api command>,\n            "correlationData": <Optional UUID to identify sender. If specified it is passed with response.>,\n            "configChange": <Valid config JSON object>\n        }\n    ]\n}\n')),(0,a.kt)("h3",g({},{id:"getconfig"}),"getConfig"),(0,a.kt)("p",null,"For example to fetch the current config send a ",(0,a.kt)("inlineCode",{parentName:"p"},"getConfig")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",g({parentName:"pre"},{className:"language-json"}),'{\n    "commands": [\n        {\n            "command": "getConfig",\n            "correlationData": "1234"\n        }\n    ]\n}\n')),(0,a.kt)("p",null,"The response depends on the type of bridge."),(0,a.kt)("h3",g({},{id:"updateconfig"}),"updateConfig"),(0,a.kt)("p",null,"In order to update a bridge's configuration use the ",(0,a.kt)("inlineCode",{parentName:"p"},"updateConfig")," command. The content of the ",(0,a.kt)("inlineCode",{parentName:"p"},"configChange")," field depends on the bridge, you are trying to configure and is explained in detail in the specific bridge documentation ",(0,a.kt)("a",g({parentName:"p"},{href:"../../bridges/bridges-index"}),"Bridges Section"),". The following example presents a MQTT message payload that updates the config of the Azure EventHubs Bridge:"),(0,a.kt)("pre",null,(0,a.kt)("code",g({parentName:"pre"},{className:"language-json"}),'{\n    "commands": [\n        {\n            "command": "updateConfig",\n            "correlationData": "12345",\n            "configChange": {\n                "eventhubs": [\n                    {\n                        "name": "EvHub1",\n                        "auth": {\n                            "sas": {\n                                "key": "A_SAS_Key_Token"\n                            }\n                        }\n                    }\n                ],\n                "producers": [\n                    {\n                        "name": "P1",\n                        "hub": "hub1",\n                        "eventhub": "EvHub1",\n                        "options": {\n                            "messageId": "{NOW_ISO}"\n                        }\n                    }\n                ],\n                "topicMappings": [\n                    {\n                        "source": "test/topic",\n                        "target": "P1"\n                    }\n                ]\n            }\n        }\n    ]\n}\n')),(0,a.kt)("h3",g({},{id:"getschema"}),"getSchema"),(0,a.kt)("p",null,"Example of ",(0,a.kt)("inlineCode",{parentName:"p"},"getSchema"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",g({parentName:"pre"},{className:"language-json"}),'{\n    "commands": [\n        {\n            "command": "getSchema",\n            "correlationData": "1234"\n        }\n    ]\n}\n')),(0,a.kt)("p",null,"The response depends on the type of bridge and is explained in detail in the specific bridge documentation ",(0,a.kt)("a",g({parentName:"p"},{href:"../../bridges/bridges-index"}),"Bridges Section")),(0,a.kt)("p",null,"Example of ",(0,a.kt)("inlineCode",{parentName:"p"},"getStatus"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",g({parentName:"pre"},{className:"language-json"}),'{\n    "commands": [\n        {\n            "command": "getStatus",\n            "correlationData": "1234"\n        }\n    ]\n}\n')),(0,a.kt)("p",null,"The response depends on the type of bridge and is explained in detail in the specific bridge documentation ",(0,a.kt)("a",g({parentName:"p"},{href:"../../bridges/bridges-index"}),"Bridges Section")))}N.isMDXComponent=!0},49044:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),i=n(39082),o=n(62659),r=n(83166);function l({inline:e}){return a.createElement(i.Z,{sx:{margin:e?"0px 5px":"0px 5px 5px 10px",height:e?"22px":void 0,color:"#ffffff",backgroundColor:o.Z[500]},size:"small",icon:a.createElement(r.Z,{style:{color:"white"},size:"small"}),label:"Premium"})}},87961:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(67294),i=n(39082),o=n(2548);function r({version:e}){return e?a.createElement(i.Z,{sx:{margin:"0px 5px 5px 10px",bgcolor:"#FD602E"},color:"info",size:"small",icon:a.createElement(o.Z,{size:"small"}),label:`Version ${e}`}):a.createElement(a.Fragment,null)}}}]);