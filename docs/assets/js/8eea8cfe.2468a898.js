"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[31040],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var i=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,s=function(e,t){if(null==e)return{};var n,i,s={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=i.createContext({}),h=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=h(e.components);return i.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=h(n),p=s,m=c["".concat(l,".").concat(p)]||c[p]||u[p]||a;return n?i.createElement(m,o(o({ref:t},d),{},{components:n})):i.createElement(m,o({ref:t},d))}));function p(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=c;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:s,o[1]=r;for(var h=2;h<a;h++)o[h]=n[h];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},70799:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>p,default:()=>y,frontMatter:()=>c,metadata:()=>m,toc:()=>f});var i=n(3905),s=Object.defineProperty,a=Object.defineProperties,o=Object.getOwnPropertyDescriptors,r=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,h=Object.prototype.propertyIsEnumerable,d=(e,t,n)=>t in e?s(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))l.call(t,n)&&d(e,n,t[n]);if(r)for(var n of r(t))h.call(t,n)&&d(e,n,t[n]);return e};const c={id:"persistent-message-handling",title:"Persistent Ensured QoS1/QoS2 Message Handling",sidebar_label:"Persistent Ensured QoS1/QoS2 Message Handling"},p=void 0,m={unversionedId:"advanced-features/persistent-message-handling",id:"version-3.1/advanced-features/persistent-message-handling",title:"Persistent Ensured QoS1/QoS2 Message Handling",description:"Introduction",source:"@site/mosquitto_versioned_docs/version-3.1/advanced-features/persistent-message-handling.md",sourceDirName:"advanced-features",slug:"/advanced-features/persistent-message-handling",permalink:"/mosquitto/advanced-features/persistent-message-handling",draft:!1,tags:[],version:"3.1",frontMatter:{id:"persistent-message-handling",title:"Persistent Ensured QoS1/QoS2 Message Handling",sidebar_label:"Persistent Ensured QoS1/QoS2 Message Handling"},sidebar:"someSidebar",previous:{title:"Persistent Queueing",permalink:"/mosquitto/advanced-features/persistent-queueing"},next:{title:"Sparkplug Awareness",permalink:"/mosquitto/advanced-features/sparkplug/sparkplug-awareness"}},g={},f=[{value:"Introduction",id:"introduction",level:2},{value:"Old Behavior until Release 2.8",id:"old-behavior-until-release-28",level:2},{value:"Eclipse Mosquitto default Snapshot Store",id:"eclipse-mosquitto-default-snapshot-store",level:3},{value:"Persist SQLite Plugin",id:"persist-sqlite-plugin",level:3},{value:"High Availability Cluster",id:"high-availability-cluster",level:3},{value:"Behavior since Release 2.9",id:"behavior-since-release-29",level:2},{value:"Eclipse Mosquitto Snapshot Store",id:"eclipse-mosquitto-snapshot-store",level:3},{value:"Persist SQLite Plugin",id:"persist-sqlite-plugin-1",level:3},{value:"High Availability Cluster",id:"high-availability-cluster-1",level:3},{value:"Limitations",id:"limitations",level:2}],b={toc:f};function y(e){var t,n=e,{components:s}=n,d=((e,t)=>{var n={};for(var i in e)l.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&r)for(var i of r(e))t.indexOf(i)<0&&h.call(e,i)&&(n[i]=e[i]);return n})(n,["components"]);return(0,i.kt)("wrapper",(t=u(u({},b),d),a(t,o({components:s,mdxType:"MDXLayout"}))),(0,i.kt)("h2",u({},{id:"introduction"}),"Introduction"),(0,i.kt)("p",null,"As the Mosquitto Broker is optimized for efficient message processing and high message throughput secure handling\nof message with QoS 1 or 2 is challenging. From a publisher perspective receiving a PUBACK for a message published\nwith QoS1 or receiving a PUBCOMP for a message send with QoS 2 should guarantee the message is not lost.\nEspecially guarantees for persistence enabled brokers in case of software or hardware crashes for the handling of\nmessages with QoS 1 or 2 needs to be well-defined."),(0,i.kt)("admonition",u({},{type:"warning"}),(0,i.kt)("p",{parentName:"admonition"},"With the 2.9 Mosquitto Pro Broker the default behavior for the Persist SQLite Plugin and for the HA Broker has changed !"),(0,i.kt)("p",{parentName:"admonition"},"The default behavior for some persistence implementations has been changed to ensure zero risk of loosing messages or message\nstates. This may lead to increasing latency for the publisher to receive acknowledge of messages send with QoS 1 or 2.\nConfig switches in the affected persistence implementations to restore the old behavior have been implemented.")),(0,i.kt)("h2",u({},{id:"old-behavior-until-release-28"}),"Old Behavior until Release 2.8"),(0,i.kt)("p",null,"In general on normal operation of the Mosquitto Broker handling persistence works fine independent of the persistence implementation\nused. As long as the broker is operated normally and shutdown or restarted using a well-defined shutdown mechanism there is no\nrisk to lose any message or state. Only in case of an unexpected crash or hardware failure there is a risk to lose messages or states."),(0,i.kt)("h3",u({},{id:"eclipse-mosquitto-default-snapshot-store"}),"Eclipse Mosquitto default Snapshot Store"),(0,i.kt)("p",null,"With the traditional snapshot persistence store implemented in the Eclipse Mosquitto Broker the persistence state will be snapshoted\ninto a binary file in a fixed time interval. Additionally, the state will be stored in the snapshot file on a shutdown of the broker.\nMessages sent to the broker with QoS 1 or 2 will be acknowledged be the broker immediately in memory. In case of an unexpected system\nor hardware crash any persistence information after the last snapshot generation will be lost."),(0,i.kt)("h3",u({},{id:"persist-sqlite-plugin"}),"Persist SQLite Plugin"),(0,i.kt)("p",null,"The Persist SQLite Plugin writes any kind of state change to SQLite database. In contrast to the snapshot generation the updates are\nadded to the database continuously. Therefore, the message processing does get blocked for significant amount of time. But to reduce the\nreal I/O load and reduce performance degradation from the database operation the changes will be committed to the database in\nconfigurable intervals as well. Messages published with QoS 1 or 2 were added to the current open database transaction and acknowledge\nto the publisher it was out. In case of an unexpected system or hardware crash any data in the open transaction, which was not\ncommitted to the database, will be lost."),(0,i.kt)("h3",u({},{id:"high-availability-cluster"}),"High Availability Cluster"),(0,i.kt)("p",null,"In the high availability cluster the active leader processing the message will add the message to the consensus cluster and\nforward this change to the follower nodes. The acknowledgment will be sent to the publisher immediately. But the communication\nwith the other cluster members and sending the message to the subscribers happens asynchronously decoupled from the main\nbroker processing. If the leader node fails in some way the message may not get send out to the subscribers. And in case the\nmajority of the remaining cluster nodes electing a new leader have not received the latest changes the message may get lost."),(0,i.kt)("hr",null),(0,i.kt)("h2",u({},{id:"behavior-since-release-29"}),"Behavior since Release 2.9"),(0,i.kt)("h3",u({},{id:"eclipse-mosquitto-snapshot-store"}),"Eclipse Mosquitto Snapshot Store"),(0,i.kt)("p",null,"The behavior of the traditional snapshot persistence implemented in the Eclipse Mosquitto Broker is not changed. But due to the\nsnapshot creation blocking the message processing we anyway advice to use a different persistence backend in Pro Mosquitto."),(0,i.kt)("h3",u({},{id:"persist-sqlite-plugin-1"}),"Persist SQLite Plugin"),(0,i.kt)("p",null,"Since this release the acknowledgment of any message sent be a publisher with QoS 1 or 2 will be delayed until the database transaction\nwas committed. The delay a single publisher will experience depends on the Persist SQLite Plugin configuration. With the default setting\nusing a 5-second ",(0,i.kt)("em",{parentName:"p"},"plugin","_","opt","_","flush","_","period")," the statistically expected delay is 2.5 seconds. Starting with this release\nthe ",(0,i.kt)("em",{parentName:"p"},"plugin","_","opt","_","flush","_","period")," maybe set to 0. With this setting the Persist SQLite Plugin will commit the transaction every\nprocessing cycle, if a database change was added in the cycle. This way the delay maybe reduced to some milliseconds.\nUsing the new operation mode the message will always be committed into the database before the acknowledgment is sent out to the\npublisher. Together with the ",(0,i.kt)("em",{parentName:"p"},"plugin","_","opt","_","sync")," configuration flag you may configure a Mosquitto Broker to sync the change even\nto the disk before sending out an acknowledgment to the publisher."),(0,i.kt)("pre",null,(0,i.kt)("code",u({parentName:"pre"},{}),"# Use Persist SQLite Plugin with maximum persistence ensured and minimum delay\nglobal_plugin /usr/lib/mosquitto_persist_sqlite.so\nplugin_opt_flush_period 0\nplugin_opt_sync extra\n")),(0,i.kt)("admonition",u({},{type:"info"}),(0,i.kt)("p",{parentName:"admonition"},"To restore the old behavior of the Persist SQLite Plugin without waiting on the commit of the change in the database set the\nnew config entry ",(0,i.kt)("em",{parentName:"p"},"plugin","_","opt","_","fast","_","acknowledge")," to true:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",u({parentName:"pre"},{}),"# Restore old Persist SQLite Plugin with behavior to acknowledge publisher with commit of transaction\nglobal_plugin /usr/lib/mosquitto_persist_sqlite.so\nplugin_opt_fast_acknowledge true\n"))),(0,i.kt)("h3",u({},{id:"high-availability-cluster-1"}),"High Availability Cluster"),(0,i.kt)("p",null,"Since this release the high availability cluster will wait sending the acknowledgment message to the publisher until the message state\nis successfully added to the cluster consensus log. This means the message is accepted by a majority of the cluster nodes and can not\nbe lost anymore. In normal cluster operation the publisher may expect some milliseconds of delay between publishing the message and\nreceiving the acknowledgment message from the broker."),(0,i.kt)("admonition",u({},{type:"info"}),(0,i.kt)("p",{parentName:"admonition"},"To restore the old behavior of the HA broker without waiting on acceptance of the change by a cluster majority set the new\nconfig entry ",(0,i.kt)("em",{parentName:"p"},"plugin","_","opt","_","fast","_","acknowledge")," to true:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",u({parentName:"pre"},{}),"global_plugin /usr/lib/cedalo_mosquitto_ha.so\nplugin_opt_fast_acknowledge true\n"))),(0,i.kt)("h2",u({},{id:"limitations"}),"Limitations"),(0,i.kt)("p",null,"Due to the changes a single publisher may experience a significant higher latency for receiving an acknowledgment for a message published\nwith QoS 1 or 2. This does not add any additional limit to the overall message throughput of message published with QoS 1 or 2 from\nmultiple publisher. But depending on the MQTT client implementation it may limit the throughput of message send with QoS 1 or 2 from\na single publisher. Assuming the MQTT client implementation does allow 20 messages to be in-flight to the broker and a average delay\nof 250ms the message throughput of message send with QoS 1 or 2 will be limited to 80 messages per second for this client."),(0,i.kt)("p",null,"The creation of the snapshot in the Eclipse Mosquitto Broker may take significant amount of time depending on the size of the\nstate information and the performance of I/O system. As the broker will not be able to process any messages during the snapshot generation we advise to use a different persistence backend for the Mosquitto Pro broker anyway."))}y.isMDXComponent=!0}}]);