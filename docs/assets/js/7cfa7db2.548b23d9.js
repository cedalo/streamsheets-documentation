"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[27485],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var s=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,i=function(e,t){if(null==e)return{};var n,s,i={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=s.createContext({}),c=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return s.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},h=s.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),h=c(n),m=i,b=h["".concat(l,".").concat(m)]||h[m]||p[m]||r;return n?s.createElement(b,a(a({ref:t},u),{},{components:n})):s.createElement(b,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var c=2;c<r;c++)a[c]=n[c];return s.createElement.apply(null,a)}return s.createElement.apply(null,n)}h.displayName="MDXCreateElement"},83441:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>m,default:()=>v,frontMatter:()=>h,metadata:()=>b,toc:()=>f});var s=n(3905),i=Object.defineProperty,r=Object.defineProperties,a=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,u=(e,t,n)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,p=(e,t)=>{for(var n in t||(t={}))l.call(t,n)&&u(e,n,t[n]);if(o)for(var n of o(t))c.call(t,n)&&u(e,n,t[n]);return e};const h={id:"mqtt-brief-description",title:"MQTT Brief Description",sidebar_label:"MQTT Brief Description"},m=void 0,b={unversionedId:"MQTT/mqtt-brief-description",id:"version-2.6/MQTT/mqtt-brief-description",title:"MQTT Brief Description",description:"mqtt = Message Queuing Telemetry Transport",source:"@site/mosquitto_versioned_docs/version-2.6/MQTT/NEW_mqtt-brief-description.md",sourceDirName:"MQTT",slug:"/MQTT/mqtt-brief-description",permalink:"/mosquitto/2.6/MQTT/mqtt-brief-description",draft:!1,tags:[],version:"2.6",frontMatter:{id:"mqtt-brief-description",title:"MQTT Brief Description",sidebar_label:"MQTT Brief Description"}},d={},f=[{value:"Description",id:"description",level:2},{value:"Publish/Subscribe",id:"publishsubscribe",level:2},{value:"Connecting",id:"connecting",level:2},{value:"Basic Features",id:"basic-features",level:2},{value:"Quality of Service",id:"quality-of-service",level:3},{value:"Retained Messages",id:"retained-messages",level:3},{value:"Clean session / Durable connections",id:"clean-session--durable-connections",level:3},{value:"Wills",id:"wills",level:3}],g={toc:f};function v(e){var t,n=e,{components:i}=n,u=((e,t)=>{var n={};for(var s in e)l.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&o)for(var s of o(e))t.indexOf(s)<0&&c.call(e,s)&&(n[s]=e[s]);return n})(n,["components"]);return(0,s.kt)("wrapper",(t=p(p({},g),u),r(t,a({components:i,mdxType:"MDXLayout"}))),(0,s.kt)("p",null,"mqtt = Message Queuing Telemetry Transport"),(0,s.kt)("h2",p({},{id:"description"}),"Description"),(0,s.kt)("p",null,"MQTT is a lightweight publish/subscribe messaging protocol. It is designed for use with low power sensors, but is applicable to many scenarios."),(0,s.kt)("p",null,"This manual describes the features of MQTT version 3.1.1/3.1, to assist end users in getting the most out of the protocol."),(0,s.kt)("h2",p({},{id:"publishsubscribe"}),"Publish/Subscribe"),(0,s.kt)("p",null,'The MQTT protocol is based on the principle of publishing messages and subscribing to topics, or "pub/sub". '),(0,s.kt)("p",null,"Multiple clients connect to a broker and subscribe to topics that they are interested in. "),(0,s.kt)("p",null,"Clients also connect to the broker and publish messages to topics. "),(0,s.kt)("p",null,"Many clients may subscribe to the same topics and do with the information as they please. "),(0,s.kt)("p",null,"The broker and MQTT act as a simple, common interface for everything to connect to. This means that if you have clients that dump subscribed messages to a database, to Twitter, Cosm or even a simple text file, then it becomes very simple to add new sensors or other data input to a database, Twitter or so on."),(0,s.kt)("p",null,"![PUBLISH]"," (./_images//PUBLISH.png)"),(0,s.kt)("p",null,"![SUBSCRIBE]"," (./_images//SUBSCRIBE.png)"),(0,s.kt)("p",null,"![multipleSUBSCRIBERonePUBLISHER]"," (./_images//multipleSUBSCRIBERonePUBLISHER.png)"),(0,s.kt)("p",null,"![multiplePUBLISHERoneSUBSCRIBER]"," (./_images//multiplePUBLISHERoneSUBSCRIBER.png)"),(0,s.kt)("h2",p({},{id:"connecting"}),"Connecting"),(0,s.kt)("p",null,"The publisher and subscriber never touch each other. The connection is always established by the broker.\n","![connect]"," (./_images//connect.gif)"),(0,s.kt)("p",null,"A MQTT broker always connects clients who want to share and clients who want to receive data.\n","![CONNECT]"," (./_images//CONNECT.png)\n","![broker]"," (./_images//broker.gif)"),(0,s.kt)("p",null,"Usually, the broker supports common security measurements, e.g. TLS."),(0,s.kt)("p",null,"Still, the end user has to make sure that the chosen measurements fit the security environment the broker itself is part of.\n","![tcpTLS]"," (./_images//tcpTLS.gif)"),(0,s.kt)("p",null,"For example, a MQTT client is located after a router, using the NAT (Network Address Translation) to transmit from a private network address to a public address.\n","![bidirectionalPublishing]"," (./_images//bidirectionalPublishing.png)"),(0,s.kt)("p",null,"messages = any kind of data (text, pictures, .json, etc.)"),(0,s.kt)("p",null,"MQTT is not a message queue - Attention!"),(0,s.kt)("p",null,"It's possible to have message queues per client in MQTT."),(0,s.kt)("p",null,'Even though a few characteristics seem to be the same, particular the publish-subscribe model ("pub-sub").'),(0,s.kt)("p",null,"In contrast, message queues store messages, as the name tells, and forward these messages between server applications."),(0,s.kt)("p",null,"The biggest difference certainly is that message queues often offer very large data storage volumes, enabling to safe all data coming in. But on the other hand, offering only a little access capacity."),(0,s.kt)("h2",p({},{id:"basic-features"}),"Basic Features"),(0,s.kt)("h3",p({},{id:"quality-of-service"}),"Quality of Service"),(0,s.kt)("p",null,"MQTT defines three levels of Quality of Service (QoS). The QoS defines the level of guarantee to ensure that a message is received."),(0,s.kt)("p",null,"Higher levels of QoS are more reliable, but involve higher latency and have higher bandwidth requirements."),(0,s.kt)("p",null,"Messages may be sent at any QoS level, and clients may attempt to subscribe to topics at any QoS level. This means that the client chooses the maximum QoS it will receive."),(0,s.kt)("h3",p({},{id:"retained-messages"}),"Retained Messages"),(0,s.kt)("p",null,"Messages set as 'retained' means that the broker will keep the message even after sending it to all current subscribers. "),(0,s.kt)("p",null,"If a new subscription is made that matches the topic of the retained message, then the message will be sent to the client."),(0,s.kt)("p",null,'This is useful as a "last known good" mechanism. If a topic is only updated infrequently, then without a retained message, a newly subscribed client may have to wait a long time to receive an update. '),(0,s.kt)("p",null,"With a retained message, the client will receive an instant update."),(0,s.kt)("h3",p({},{id:"clean-session--durable-connections"}),"Clean session / Durable connections"),(0,s.kt)("p",null,'On connection, a client sets the "clean session" flag, which is sometimes also known as the "clean start" flag.'),(0,s.kt)("p",null,"If clean session is set to false, then the connection is treated as durable. This means that when the client disconnects, any subscriptions it has will remain and any subsequent QoS 1 or 2 messages will be stored until it connects again in the future."),(0,s.kt)("p",null,"If clean session is true, then all subscriptions will be removed for the client when it disconnects."),(0,s.kt)("h3",p({},{id:"wills"}),"Wills"),(0,s.kt)("p",null,"When a client connects to a broker, it may inform the broker that it has a will."),(0,s.kt)("p",null,"This is a message that it wishes the broker to send when the client disconnects unexpectedly."))}v.isMDXComponent=!0}}]);