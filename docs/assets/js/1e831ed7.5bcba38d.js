"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[8788],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),p=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,b=m["".concat(u,".").concat(c)]||m[c]||d[c]||l;return n?a.createElement(b,o(o({ref:t},s),{},{components:n})):a.createElement(b,o({ref:t},s))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},95309:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>k,contentTitle:()=>c,default:()=>h,frontMatter:()=>m,metadata:()=>b,toc:()=>f});var a=n(3905),r=Object.defineProperty,l=Object.defineProperties,o=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,s=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,d=(e,t)=>{for(var n in t||(t={}))u.call(t,n)&&s(e,n,t[n]);if(i)for(var n of i(t))p.call(t,n)&&s(e,n,t[n]);return e};const m={id:"tableupdate",title:"TABLE.UPDATE",hide_title:!0},c=void 0,b={unversionedId:"functions/streamsheet/tableupdate",id:"version-3.0/functions/streamsheet/tableupdate",title:"TABLE.UPDATE",description:"TABLE.UPDATE",source:"@site/streamsheets_versioned_docs/version-3.0/functions/streamsheet/tableupdate.md",sourceDirName:"functions/streamsheet",slug:"/functions/streamsheet/tableupdate",permalink:"/streamsheets/3.0/functions/streamsheet/tableupdate",draft:!1,tags:[],version:"3.0",frontMatter:{id:"tableupdate",title:"TABLE.UPDATE",hide_title:!0},sidebar:"someSidebar",previous:{title:"TABLE.ORDERCOLUMN",permalink:"/streamsheets/3.0/functions/streamsheet/tableordercolumn"},next:{title:"TRIGGERSTEP",permalink:"/streamsheets/3.0/functions/streamsheet/triggerstep"}},k={},f=[],g={toc:f};function h(e){var t,n=e,{components:r}=n,s=((e,t)=>{var n={};for(var a in e)u.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&i)for(var a of i(e))t.indexOf(a)<0&&p.call(e,a)&&(n[a]=e[a]);return n})(n,["components"]);return(0,a.kt)("wrapper",(t=d(d({},g),s),l(t,o({components:r,mdxType:"MDXLayout"}))),(0,a.kt)("h1",null,"TABLE.UPDATE"),(0,a.kt)("p",null,"Creates and updates a defined cell range in a table like manner. The first row and first column of specified cell range defines the indices used to reference a table cell. To set or update a cell its corresponding row and column indices must be given. If a row index does not exist in current range, it can be automatically added to top or bottom. The same applies for a column index which can be automatically added to the left or right. To simply read values from a table cell refer to TABLE.GET"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Syntax")),(0,a.kt)("p",null,"=TABLE.UPDATE(CellRange, Value, ","[","RowIndex","]",", ","[","ColumnIndex","]",", ","[","PushRowAt","]",", ","[","PushColumnAt","]",", ","[","AggregationMethod","]",")"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"CellRange"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Range"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Cell range to treat like a table. Its first row and its first column are used to reference table cells.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Value"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Value"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"A value to set in referenced table cell.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"RowIndex (optional)"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Number"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"The row index of a table cell. If not defined no value is set. The PushRowAt parameter can be used to add the row index if the table has no equal index.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"ColumnIndex (optional)"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Number"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"The column index of a table cell. If not defined no value is set. The PushColumnAt parameter can be used to add the column index if the table has no equal index.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"PushRowAt (optional)"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Number"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Defines where to insert a new row index. Should be either 1, -1, or 0. To insert new row at the bottom specify 1, -1 will insert it at the top and 0 will not insert at all. ",(0,a.kt)("br",null),(0,a.kt)("br",null),"Default value: 0")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"PushColumnAt (optional)"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Number"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Defines where to insert a new column index. Should be either 1, -1, or 0. To insert new column to the right specify 1, -1 will insert it to the left and 0 will not insert at all. ",(0,a.kt)("br",null),(0,a.kt)("br",null),"Default value: 0")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"AggregationMethod (optional)"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"AggregationMethod"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"One of the predefined numbers which specifies the aggregation method to use for specified table cell.",(0,a.kt)("br",null),(0,a.kt)("br",null),"Options:",(0,a.kt)("br",null),"0: NONE - No aggregation is performed and the last valid value of specified DataCell is returned.",(0,a.kt)("br",null),"1: AVERAGE - Calculates the average of all received values.",(0,a.kt)("br",null),"2: COUNT - Counts the number of received values.",(0,a.kt)("br",null),"3: COUNTA - Counts all values which are not zero.",(0,a.kt)("br",null),"4: MAX - Determines the maximum of all received values.",(0,a.kt)("br",null),"5: MIN - Determines the minimum of all received values.",(0,a.kt)("br",null),"6: PRODUCT - Calculates the product of all received values.",(0,a.kt)("br",null),"7: STDEV.S - Calculates the standard deviation of all received values.",(0,a.kt)("br",null),"8: STDEV.P - Currently not available!",(0,a.kt)("br",null),"9: SUM - Calculates the sum of all received values. ",(0,a.kt)("br",null),(0,a.kt)("br",null),"Default value: 0")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Return")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Boolean or Error"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"TRUE or an ",(0,a.kt)("a",d({parentName:"td"},{href:"../../errorcodes"}),"error")," value.")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Time"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Turbine1"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Turbine2"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Turbine3"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"93370"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"1000"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"2000"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"3000")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"93360"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"1500"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"2500"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"3500")))),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Formula"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Result"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Comment"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),(0,a.kt)("pre",null,(0,a.kt)("code",null,'=TABLE.UPDATE(A3:D5, 42, 93360, "Turbine 1")'))),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"TRUE"),(0,a.kt)("td",d({parentName:"tr"},{align:null}))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),(0,a.kt)("pre",null,(0,a.kt)("code",null,'=TABLE.UPDATE(A3:D5, 42, 93300, "Turbine 42", 1, 1)'))),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"TRUE"),(0,a.kt)("td",d({parentName:"tr"},{align:null}))))))}h.isMDXComponent=!0}}]);