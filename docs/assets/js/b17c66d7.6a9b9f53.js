"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[46786],{3905:function(e,t,n){n.d(t,{Zo:function(){return h},kt:function(){return p}});var i=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,s=function(e,t){if(null==e)return{};var n,i,s={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var r=i.createContext({}),c=function(e){var t=i.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},h=function(e){var t=c(e.components);return i.createElement(r.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,r=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),u=c(n),p=s,m=u["".concat(r,".").concat(p)]||u[p]||d[p]||a;return n?i.createElement(m,o(o({ref:t},h),{},{components:n})):i.createElement(m,o({ref:t},h))}));function p(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l.mdxType="string"==typeof e?e:s,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},50506:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return r},metadata:function(){return c},toc:function(){return h},default:function(){return u}});var i=n(87462),s=n(63366),a=(n(67294),n(3905)),o=["components"],l={id:"broker-introduction",title:"Broker Introduction",sidebar_label:"Broker Introduction"},r=void 0,c={unversionedId:"broker-introduction",id:"version-2.1/broker-introduction",title:"Broker Introduction",description:"Basics",source:"@site/mosquitto_versioned_docs/version-2.1/NEW_broker-introduction.md",sourceDirName:".",slug:"/broker-introduction",permalink:"/mosquitto/2.1/broker-introduction",tags:[],version:"2.1",frontMatter:{id:"broker-introduction",title:"Broker Introduction",sidebar_label:"Broker Introduction"},sidebar:"someSidebar",previous:{title:"MQTT Brief Description",permalink:"/mosquitto/2.1/mqtt-brief-description"},next:{title:"Mosquitto MQTT Compliance",permalink:"/mosquitto/2.1/mosquitto-mqtt-compliance"}},h=[{value:"Basics",id:"basics",children:[{value:"Intro",id:"intro",children:[],level:3},{value:"MQTT Basis",id:"mqtt-basis",children:[{value:"Message expiry",id:"message-expiry",children:[],level:4},{value:"Session expiry",id:"session-expiry",children:[],level:4},{value:"Broker reference/broker redirect",id:"broker-referencebroker-redirect",children:[],level:4},{value:"Metadata attachment",id:"metadata-attachment",children:[],level:4},{value:"Extensions",id:"extensions",children:[],level:4},{value:"Client and server restrictions",id:"client-and-server-restrictions",children:[],level:4},{value:"Negative acknowledgments",id:"negative-acknowledgments",children:[],level:4},{value:"Will delay interval",id:"will-delay-interval",children:[],level:4},{value:"Shared subscriptions",id:"shared-subscriptions",children:[],level:4},{value:"Subscription identifier",id:"subscription-identifier",children:[],level:4}],level:3},{value:"MQTT further information",id:"mqtt-further-information",children:[{value:"Not a Message Queue",id:"not-a-message-queue",children:[],level:4}],level:3},{value:"Security",id:"security",children:[],level:3}],level:2},{value:"Model",id:"model",children:[{value:"Publish / Subscribe",id:"publish--subscribe",children:[],level:3},{value:"Decoupling impact",id:"decoupling-impact",children:[],level:3},{value:"Broker-client connection",id:"broker-client-connection",children:[{value:"clientId:",id:"clientid",children:[],level:4},{value:"cleanSession:",id:"cleansession",children:[],level:4},{value:"username/password:",id:"usernamepassword",children:[],level:4},{value:"lastWill:",id:"lastwill",children:[],level:4},{value:"keepAlive:",id:"keepalive",children:[],level:4}],level:3}],level:2},{value:"pub/sub",id:"pubsub",children:[{value:"Publish",id:"publish",children:[{value:"packetId:",id:"packetid",children:[],level:4},{value:"topicName:",id:"topicname",children:[],level:4},{value:"Quality of Service",id:"quality-of-service",children:[{value:"QoS0 - at most once",id:"qos0---at-most-once",children:[],level:5},{value:"QoS1 - At least once",id:"qos1---at-least-once",children:[],level:5},{value:"QoS2 - Exactly once",id:"qos2---exactly-once",children:[],level:5}],level:4},{value:"retainFlag:",id:"retainflag",children:[],level:4},{value:"Payload:",id:"payload",children:[],level:4},{value:"dupFlag",id:"dupflag",children:[],level:4}],level:3},{value:"Subscribe",id:"subscribe",children:[{value:"packetId:",id:"packetid-1",children:[],level:4},{value:"subscriptions:",id:"subscriptions",children:[],level:4},{value:"Single level",id:"single-level",children:[],level:4},{value:"Multi level",id:"multi-level",children:[],level:4}],level:3},{value:"Unsubscribe",id:"unsubscribe",children:[{value:"packetId:",id:"packetid-2",children:[],level:4},{value:"List of topics:",id:"list-of-topics",children:[],level:4}],level:3},{value:"$-Symbol",id:"-symbol",children:[],level:3}],level:2}],d={toc:h};function u(e){var t=e.components,l=(0,s.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"basics"},"Basics"),(0,a.kt)("h3",{id:"intro"},"Intro"),(0,a.kt)("p",null,"MQTT is more and more becoming the standard messaging protocol for IoT messaging."),(0,a.kt)("p",null,"Since 2014 MQTT is an OASIS standard messaging protocol."),(0,a.kt)("p",null,"It was developed by IBM in 1999."),(0,a.kt)("p",null,"MQTT is very lightweight as all workload is done by the broker, while connected clients run on small hardware requirements."),(0,a.kt)("p",null,"Further, MQTT clients can be easily implemented in a large variety of use cases, as there are plenty of client code libraries."),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Some ",(0,a.kt)("strong",{parentName:"p"},"Here's an example:")," Surroundings manufacturing items sensitive to temperature and humidity must make sure that temperature and humidity is stable throughout the process in the whole surrounding.(#)."))),(0,a.kt)("p",null,"To monitor temperature and humidity sensors are installed. In recurring intervals each sensor is transmitting information."),(0,a.kt)("p",null,"Creating workload."),(0,a.kt)("p",null,"The data is sent via MQTT protocol. The MQTT broker receives the data, filters the data-packet, and forwards it to the receiving clients."),(0,a.kt)("p",null,"In this scenario the receiving clients could be the radiator or humidifier."),(0,a.kt)("p",null,"This is possible because of the efficient protocol format, and because a broker is used to decouple the sender and receiver."),(0,a.kt)("p",null,"That way the broker bears most of the workload. And also the client-side can be easily embedded in a system as there is only a little code needed.\nFollowing there are plenty of MQTT client libraries for most programming languages."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"bidirectionalPublishing",src:n(17325).Z,width:"600",height:"156"})),(0,a.kt)("p",null,"In fact a MQTT system enables receiving clients to become publishers as well."),(0,a.kt)("p",null,"A humidifier could transmit information to the broker. And the broker would forward the message to the sensors."),(0,a.kt)("p",null,"The next big strength is when it comes to sending messages via unstable networks."),(0,a.kt)("p",null,"As MQTT messages can be very small depending on the payload size, they can be sent easily even by small devices."),(0,a.kt)("p",null,"The MQTT messaging protocol is even suitable for special needs, like devices that are far off any other network."),(0,a.kt)("p",null,"A example for such a purpose can be a far off device that needs to be adjusted.\nA MQTT message can send the trigger to the device to adjust it."),(0,a.kt)("p",null,'MQTT can send messages with different so called "quality of service" levels. This means the publisher and subscriber can choose how reliably a message will be sent.'),(0,a.kt)("p",null,"A receiver can't receive a message when the receiver does not support at least the same QoS level as the publisher has set when publishing the message."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"qos",src:n(44641).Z,width:"427",height:"85"})),(0,a.kt)("p",null,"Quality of Service (QoS) level 0 means the message is sent without any confirmation from the receiver. This means it is technically possible for the message to be lost, given an unreliable connection."),(0,a.kt)("p",null,"QoS level 1 means that the receiver must send a confirmation, so that the sender knows that the message was received.\nHowever, with it is possible that the receiver gets a single message multiple times. This QoS level ensures that a message makes it from sender to receiver."),(0,a.kt)("p",null,"QoS level 2 uses a four step communication process to ensure a message is sent exactly once only, which can be important depending on the use case. For instance,"),(0,a.kt)("p",null,"For a publisher the broker is the receiver. When the broker, then, forwards the message, the subscriber is the receiver."),(0,a.kt)("p",null,"Besides QoS there are several other features to help you to further configure your setup to your specific needs."),(0,a.kt)("p",null,"For example:\nRetained Messages, Persistent Sessions, Last Will and Testament (LWT), Keep Alive, and many more."),(0,a.kt)("p",null,"These features will be explained and dealt with subsequently."),(0,a.kt)("h3",{id:"mqtt-basis"},"MQTT Basis"),(0,a.kt)("p",null,"MQTT = Message Queuing Telemetry Transport"),(0,a.kt)("p",null,"MQTT is a lightweight PUBLISH/SUBSCRIBE messaging protocol."),(0,a.kt)("p",null,"MQTT is very advantageous when it comes to low bandwidth environments, as MQTT is designed especially for IoT - the Internet of things, or machine-to-machine messaging with low transmission capacity."),(0,a.kt)("p",null,"Comparing HTTP and MQTT it shows, e.g., that MQTT delivers messages many times faster than the HTTP protocol."),(0,a.kt)("p",null,"A typical MQTT setup includes one broker and as many clients as you want."),(0,a.kt)("p",null,"MQTT principle:"),(0,a.kt)("p",null,"A Publisher (client) sends a message (including data) to a broker and there onto a topic.\nOther clients subscribe to this topic to receive the messages."),(0,a.kt)("p",null,"The broker filters the messages and checks whether the subscribers have the necessary rights. The broker then forwards the messages.\nSeveral publishers can send messages to one and the same topic. Multiple subscribers can subscribe to the same topic."),(0,a.kt)("p",null,"Important to know: A client can at the same time take up the role of a publisher as well as a subscriber. This is called bi-directional communication."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"mqttProtocol",src:n(34372).Z,width:"800",height:"300"})),(0,a.kt)("p",null,"Since the broker decouples publisher and subscriber, the clients do not have to connect directly among themselves."),(0,a.kt)("p",null,"As a result, with an increasing number of clients the connection count only grows linearly. If all clients had to connect to each other for communication, the connection count would grow exponentially."),(0,a.kt)("p",null,"Further, all connections are solely with the broker. The broker is, thus, the central hub in MQTT communication. Following the associated workload is being processed by the broker as well. This allows great flexibility in terms of the number and type of communication participants/clients."),(0,a.kt)("p",null,"The load balancer is the main character that moves messages/packets within the broker."),(0,a.kt)("p",null,"The MQTT setup consists of two basic concepts:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"PUBLISH / SUBSCRIBE"),(0,a.kt)("li",{parentName:"ul"},"CLIENT / BROKER")),(0,a.kt)("p",null,"And three basic functionalities:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"CONNECT"),(0,a.kt)("li",{parentName:"ul"},"PUBLISH"),(0,a.kt)("li",{parentName:"ul"},"SUBSCRIBE")),(0,a.kt)("p",null,"Also, several features help you to configure the messages.\nFor example:\nQoS (Quality of Service), Retained Messages, Persistent Sessions, Last Will and Testament (LWT), Keep Alive, and many more.\nThese features will be explained and dealt with subsequently."),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("strong",{parentName:"p"},"Digression:")," Message vs. packet"),(0,a.kt)("p",{parentName:"div"},'The delivered subject is ether called "message" or "packet" by all participants working with MQTT.'),(0,a.kt)("p",{parentName:"div"},"Both - messages and packets - are the same and the terms can be used interchangeably."),(0,a.kt)("p",{parentName:"div"},"There is no definition of when or why a delivery is called a packet or message."),(0,a.kt)("p",{parentName:"div"},'We at Cedalo are using the term "packet" for any of the commands, and "message" for publish or subscribe messages.(#).'))),(0,a.kt)("p",null,"There is no alternative for clients (publisher and subscribers) to connect to MQTT than to use a broker.\nThe broker is the central entity."),(0,a.kt)("p",null,"All packets go through the broker, get checked for specific properties, and are, then, sent by the broker  to the subscribers."),(0,a.kt)("p",null,"The broker covers all the workload. Hence, the client device only has to do minimal processing using minimal bandwidth."),(0,a.kt)("p",null,"All MQTT versions are contributed by the OASIS Foundation.\nThe recent version of the MQTT protocol is v.5 that has been presented in January 2018.\nMost brokers support MQTT v.5 protocol. Even though most client providers (client libraries) don't support v.5 yet."),(0,a.kt)("h4",{id:"message-expiry"},"Message expiry"),(0,a.kt)("p",null,"Whenever the payload of a message has limited validity, e.g. real-time status messages, there is no need for the messages until a subscribing client is connected again."),(0,a.kt)("p",null,"The Message expiry allows the publisher to set a maximum  time the message is valid. After that, the broker doesn't send the message to the subscribing clients anymore and the message gets discarded."),(0,a.kt)("h4",{id:"session-expiry"},"Session expiry"),(0,a.kt)("p",null,"MQTT v3.1.1 does not stipulate when any persistent session expires. Meaning any persistent session, if not adjusted by the client, runs endlessly. Following the number of persistent sessions still running, but not in use, occupy the resource of the server more and more. To deal with that problem the system architectures usually did not follow as MQTT v3.1.1 protocol intended and configured expiration times for the use of persistent sessions."),(0,a.kt)("p",null,"In the MQTT 5.0, the field Clean Session is divided into field Clean Start and Session Expiry Interval."),(0,a.kt)("p",null,"The field Clean Start specifies whether a new session is needed. The field Session Expiry Interval specifies the session expiration time. They are specified when connecting."),(0,a.kt)("p",null,"The retainFlag can easily be implemented whenever the session disconnects ungracefully, as the Session Expiry Interval can be updated when an ungraceful disconnect happens. The session terminates when the client disconnects using a DISCONNECT packet."),(0,a.kt)("h4",{id:"broker-referencebroker-redirect"},"Broker reference/broker redirect"),(0,a.kt)("p",null,"Broker redirect tells clients where they should reconnect to."),(0,a.kt)("p",null,"This is very useful as manual reconnecting is a lot of work."),(0,a.kt)("h4",{id:"metadata-attachment"},"Metadata attachment"),(0,a.kt)("p",null,"Metadata is enabled to be attached to the MQTT packet."),(0,a.kt)("h4",{id:"extensions"},"Extensions"),(0,a.kt)("p",null,"MQTT can be mingled with many more extensions."),(0,a.kt)("h4",{id:"client-and-server-restrictions"},"Client and server restrictions"),(0,a.kt)("p",null,"Enables to set a maximum size of each message (bytes able to be transmitted)."),(0,a.kt)("p",null,"Also, a maximum number of messages to be sent or received simultaneously by a client or broker."),(0,a.kt)("h4",{id:"negative-acknowledgments"},"Negative acknowledgments"),(0,a.kt)("p",null,"Negative acknowledgments notify the client whenever an error occurs and what the error is about."),(0,a.kt)("p",null,"In MQTT v3.1.1 an error may lead to a disconnection of the client from the broker - in this case, the client has to subscribe to the topics again. Now with v.5, a client can react before it gets disconnected (best case scenario)."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"negativeAcknowledgement",src:n(55408).Z,width:"800",height:"300"})),(0,a.kt)("h4",{id:"will-delay-interval"},"Will delay interval"),(0,a.kt)("p",null,"The will delay interval can be used by all clients. A so called Last Will Testament (LWT) is sent when the network connection closes without the client sending a DISCONNECT packet. The will delay interval provides a time window in which the client can reconnect, and if it does then the will message will not be sent. Whether the client is persistent or not has no bearing."),(0,a.kt)("h4",{id:"shared-subscriptions"},"Shared subscriptions"),(0,a.kt)("p",null,"Standard MQTT subscribers receive a duplicate of the messages that the subscriber has subscribed to. Each message load has to be beared by the subscriber itself."),(0,a.kt)("p",null,"In contrast shared subscription message workloads are distributed across all subscribers."),(0,a.kt)("h4",{id:"subscription-identifier"},"Subscription identifier"),(0,a.kt)("p",null,"The subscription identifier helps the broker to work more efficient. That is when a message is published to the broker and the broker filters for the receivers of the message. Because the subscription identifier refers directly to the corresponding receivers. The broker does not need to match topics."),(0,a.kt)("p",null,"There are plenty of MQTT client libraries for most programming languages."),(0,a.kt)("p",null,"Here is an overview:\n",(0,a.kt)("a",{parentName:"p",href:"https://www.eclipse.org/paho/index.php?page=downloads.php"},"Paho")),(0,a.kt)("h3",{id:"mqtt-further-information"},"MQTT further information"),(0,a.kt)("p",null,"MQTT is very strong when you must transfer data and the de-facto standard in the IoT world."),(0,a.kt)("p",null,"In an MQT environment, the broker is the central entity and handles most of the workload.\nTherefore, client devices have to do  minimal processing and use only minimal bandwidth.\nAlso, MQTT is very easy to implement on the client-side."),(0,a.kt)("p",null,"That adds to why MQTT is very lightweight and performs even if used in unstable networks.\nIt's a perfect fit for constrained devices with limited resources."),(0,a.kt)("p",null,"More information concerning the performance and transfer guarantee of messages (QoS) will follow within this learning."),(0,a.kt)("p",null,"The Mosquitto broker is the most efficient broker offered worldwide."),(0,a.kt)("p",null,'When considering how much a MQTT Broker is used and the work it has to perform, it is not so much about the number of clients that you should focus on but rather the amount of data sent per second, the "traffic".\nSuppose you have 1.5 million clients, but each client is sending only little data and, additionally, that even quite rarely, e.g. only every couple of minutes. Then, this leads to much less traffic and workload on the broker than merely a few thousand clients sending big data messages at high frequency.'),(0,a.kt)("p",null,"AA different scenario that can incur a lot of traffic and workload for the broker is if you want to transfer pictures every millisecond using QoS level 2 (QoS2) - a Quality of Service level occupying the resources of a broker way more than other Quality of Service levels."),(0,a.kt)("p",null,"Additionally, the circumstances of the setup influence the performance. Thinking of remote devices, a very good latency is certainly harder to achieve than when the devices would be close together."),(0,a.kt)("p",null,'High Availability (HA) is the ability of a system to cope with the loss of a central component. This is typically achieved through redundancies. HA ensures that even if the (main) broker is lost, e.g. because of a hardware failure, the MQTT communication continuous to work properly as another broker seamlessly takes over.\nFollowing\xa0HA enables a system to work at optimal performance continuously for a long period.\nThis means that the systems should work without failure. The MQTT Mosquitto broker is designed to be stable and consistently functional by clustering.\nClustering provides prevention of disadvantages whenever a broker might break down, e.g. hardware failure. Therefore usually three or more brokers work together in a cluster.\nIn the case of a breakdown of broker number one, the so-called "load balancer" shifts the workload to a passive broker number two.\nTo be absolutely safe, there is another passive broker clustered.'),(0,a.kt)("p",null,"In a clustered broker environment the load balancer\xa0detects which broker is currently available and send client connections to that broker."),(0,a.kt)("p",null,"The Payload each message carries must not be encoded nor decoded by the broker. The broker simply receives messages from the publisher, filters the messages, and delivers them to the subscribing clients.\nFollowing the workload is very little."),(0,a.kt)("p",null,"Overall it's possible to send up to 256MB in each Payload."),(0,a.kt)("p",null,"The Payload each message carries must not be encoded nor decoded by the broker. The broker simply receives messages from the publisher, filters the messages, and delivers them to the subscribing clients.\nFollowing the workload is very little."),(0,a.kt)("p",null,"Overall it's possible to send up to 256MB in each Payload."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"broker",src:n(16425).Z,width:"800",height:"300"})),(0,a.kt)("p",null,"Self-hosted brokers require a VPS- or server-sided installation."),(0,a.kt)("h4",{id:"not-a-message-queue"},"Not a Message Queue"),(0,a.kt)("p",null,"By definition, MQTT is not a message queue - "),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("strong",{parentName:"p"},"Attention"),' It\'s possible to have message queues per client in MQTT.\nEven though a few characteristics seem to be the same, particular the publish-subscribe model ("pub-sub")(#).'))),(0,a.kt)("p",null,"MQTT deals with very different tasks. Most of them relate to the world of IoT.\nEnabling multiple device access, managing devices, and especially messaging is the center of the multiple usages of MQTT."),(0,a.kt)("p",null,"In contrast, message queues store messages, as the name tells, and forward these messages between server applications. The storage volume is often very large, but message queues only offer little access capacity. MQTT usually does not store data, but is able to forward messages to plenty receivers."),(0,a.kt)("h3",{id:"security"},"Security"),(0,a.kt)("p",null,"Security measures are very important. The broker must be set up correct and safe.\nBut also the clients (publisher and receiver) must set security measures."),(0,a.kt)("p",null,"For example, a MQTT client is located after a router, using the NAT (Network Address Translation) to transmit from a private network address  to a public address."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"NATcommunication",src:n(9436).Z,width:"600",height:"184"})),(0,a.kt)("p",null,"Clients can subscribe to any topic they want, when a broker is without enabled security."),(0,a.kt)("p",null,"In some cases, no level of security might be without risk. But it's always the end user that has to make up his mind about what level of security has to be chosen and how to implement it."),(0,a.kt)("p",null,"The use of ACLs\xa0(Access Control Lists) allows restriction of subscriptions and publishing of clients."),(0,a.kt)("p",null,"The information within a payload never gets restricted. But the permissions to publish and receive."),(0,a.kt)("p",null,"Usually, the broker supports common security measurements, e.g. TLS. Still, the end user has to make sure that the chosen measurements fit the security environment the broker itself is part of."),(0,a.kt)("p",null,"The default secured MQTT broker port is 8883."),(0,a.kt)("p",null,"The standard unsecure port is 1883."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"tcpTLS",src:n(38976).Z,width:"800",height:"600"})),(0,a.kt)("p",null,"TCP is embedding TLS (Transport Layer Security), the successor of SSL (Secure Sockets Layer). Allowing MQTT packets to be transmitted via encrypted pipes."),(0,a.kt)("p",null,"Cryptology ensures privacy and integrity. Also authenticity with the use of certificates."),(0,a.kt)("p",null,"Implementing TLS and maintaining the structure, requires in-depth knowledge support."),(0,a.kt)("p",null,"Many more precautions can be set when using the SASL Framework (Simple authentication and security layer) for example. SASL provides authentication options, data integrity-checking, and encryption."),(0,a.kt)("p",null,"Again, MQTT only supports the implementation. Security must be set on the client-side."),(0,a.kt)("p",null,"The highest security levels can be achieved using client certificates (x509)."),(0,a.kt)("p",null,"Again, implementing TLS and maintaining the structure, requires in-depth knowledge support."),(0,a.kt)("p",null,"TLS protects all parts of an MQTT packet, not only the payload."),(0,a.kt)("p",null,"Encrypting just the payload is also able.\nBut again, encrypting a payload is done at the application level, not the broker.\nFollowing encrypted Payloads can be sent without broker configuration needed.\nThe broker just delivers packets.\nSubscribing clients on the other end must be able to decrypt the Payload."),(0,a.kt)("p",null,"The TCP security and any kind of packet encryption are recommended to be dealt with by the Load Balancer, before handing off the incoming packet to the broker."),(0,a.kt)("p",null,"The broker can identify the client on three different pieces of information given. The clientId, a username, and password, or a certificate of the client."),(0,a.kt)("p",null,'Still, each client must have a unique clientId.\nThe clientId can be set by the client, but it does not always have to.\nIf a client connects to the broker and another client session already exists with the same clientId, the old session will be kicked out and taken over.\nThe precise proceedings depend on the "clean start" value also provided by the client.'),(0,a.kt)("p",null,"For clients that are not persistent, there is no need to generate their clientId because they will not be using it unless it is used for authentication.\nIn that case, the client sends a blank clientId to the broker, so the broker generates a unique id for it whilst the session is open."),(0,a.kt)("p",null,"In MQTT v5 the broker can inform the client of the id that was chosen."),(0,a.kt)("p",null,'The clientId is useful for a few things. At first, for rejoining sessions that a client has been disconnected from earlier. The client can ask the broker to preserve its session when it disconnects, which includes the subscription information and possibly queued messages for it - this is controlled by the "clean session" flag in MQTT v3.1.1, and by the "session expiry interval" in MQTT v5.0.'),(0,a.kt)("p",null,"Secondly, you may choose to use the clientId for authentication. You typically use either the username on its own for authentication, which does not need to be unique per client, or the username and clientId together. You may also use the clientId for controlling access to topics, but that's unusual."),(0,a.kt)("h2",{id:"model"},"Model"),(0,a.kt)("h3",{id:"publish--subscribe"},"Publish / Subscribe"),(0,a.kt)("p",null,"The PUBLISH/SUBSCRIBE model consists of the client-server model."),(0,a.kt)("p",null,"Any client communicates with an endpoint via the broker.\nBefore a client wants to publish messages it first has to set up a connection with the broker."),(0,a.kt)("p",null,"Also, a subscribing client has to do the same."),(0,a.kt)("p",null,"Therefore the broker can decouple publisher and subscriber."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"connect",src:n(86111).Z,width:"800",height:"300"})),(0,a.kt)("p",null,'The delivered subject is either called "message" or "packet" by all participants working with MQTT.'),(0,a.kt)("p",null,"Both - messages and packets - are the same."),(0,a.kt)("p",null,'There is no definition of when a delivery is called a packet or message.\nCedalo is using the term "packet" for any of the commands, and "message" for publishing or subscribing messages.'),(0,a.kt)("p",null,"Direct contact between subscriber and publisher is never possible. Only the broker enables transmitting messages.\nTherefore, the publishing client has only one duty. To make sure that the message is sent to the broker. Everything else is dealt with by the broker."),(0,a.kt)("p",null,"Also, the subscribing client only has one duty. To subscribe to the topic it wants to receive messages from."),(0,a.kt)("p",null,"In fact, because of the decoupling of the publishing client and subscribing client, they have no chance to find out more about the other one.\nThe subscriber only knows about the existence of the publisher as the client subscribes to the published topics."),(0,a.kt)("p",null,"Every exchange of messages is done by the broker."),(0,a.kt)("p",null,"The setup allows no other than the broker to connect the publisher and subscriber. There is no way around this setup but still using MQTT, no gap."),(0,a.kt)("p",null,"Once the PUBLISHER and SUBSCRIBER are authenticated by the broker. Backed on information the broker sent, the broker ensures the connected devices can send messages to other devices.\nAnd the other way round, to receive messages from other devices."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"broker",src:n(16425).Z,width:"800",height:"300"})),(0,a.kt)("p",null,"The broker is the central hub every message sent must pass. The brokers job is to receive, filter, and forward the message. The so-called load balancer moves the message from process stage to the next."),(0,a.kt)("p",null,"The brokers' responsibility is to receive all messages that are sent by the publishing clients.\nIn the next step, the broker must filter the incoming message. Part of it is to check the configured rules the publishing client has set. Following the broker authorativates who have subscribed to the topic of the message, and finally forwarding the message to the subscribing clients."),(0,a.kt)("p",null,"Whenever a subscribing client requests storage of not-sent messages, the broker does as pleased within the possibility the MQTT protocol sets."),(0,a.kt)("h3",{id:"decoupling-impact"},"Decoupling impact"),(0,a.kt)("p",null,"The publish-subscribe model is a decoupling solution of the traditional client/broker model."),(0,a.kt)("p",null,"Therefore, publisher and subscriber don't exchange IP addresses and ports."),(0,a.kt)("p",null,"Following:"),(0,a.kt)("p",null,"There is no need for the publisher and subscriber to run at the same time. Downtimes do not mean that messages are lost."),(0,a.kt)("p",null,"Even whilst publishing or receiving messages/packets the operations of the publisher and subscriber run fluent."),(0,a.kt)("p",null,"Any established connection is kept open by the broker until the client sends a DISCONNECT command or the connection breaks up."),(0,a.kt)("p",null,"One of the most advantageous aspects MQTT and the pub/sub model offers is to finally be able to break data silos that represent sensitive walls and hurdles in a competitive surrounding more and more."),(0,a.kt)("p",null,"MQTT allows data interoperability and processing using only minimum bandwidth."),(0,a.kt)("p",null,"MQTT can be used in any industry 4.0 device system."),(0,a.kt)("p",null,"As the broker covers all the workload, the client device only has to do minimal processing using minimal bandwidth.\nTherefore, it's also simple to implement within any technical surrounding."),(0,a.kt)("p",null,"The architecture can be scaled easily without affecting existing client devices. This makes it easy to work and change architecture."),(0,a.kt)("p",null,"To deal safely with a lot of connections use clustered broker nodes."),(0,a.kt)("p",null,"Clustering brokers is also important to make sure that connectivity is always given."),(0,a.kt)("p",null,"Of course, MQTT can process messages event-driven."),(0,a.kt)("p",null,"Most client libraries work asynchronously, based on callbacks and models similar to callbacks."),(0,a.kt)("p",null,"Whilst waiting for a message or publishing it, other tasks are not blocked."),(0,a.kt)("p",null,"Also, APIs can be used to create even more powerful systems."),(0,a.kt)("p",null,"In most cases, it's convenient to use the Management Center Cedalo offers. Lots of tasks you might need for your processes can be adjusted and incorporated there."),(0,a.kt)("h3",{id:"broker-client-connection"},"Broker-client connection"),(0,a.kt)("p",null,"If you look at the system without any security measurements, it's very simple. To publish messages you must only know the hostname/IP and port of the broker."),(0,a.kt)("p",null,"To receive messages you must know the\xa0hostname/IP and port of the broker and the topic you want to subscribe to."),(0,a.kt)("p",null,"To establish a connection there is always a client-initiated CONNECT packet needed, that is sent by the  client to the broker."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"CONNECT",src:n(21307).Z,width:"600",height:"400"})),(0,a.kt)("p",null,"The broker in return responds by sending a so-called CONNACK packet (Acknowledge connection request) and a status code."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"CONNACK",src:n(26932).Z,width:"600",height:"280"})),(0,a.kt)("p",null,"After the CONNECT and CONNACK packet are exchanged, the connection is enabled."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"connect",src:n(86111).Z,width:"800",height:"300"})),(0,a.kt)("p",null,"To connect, the client sends a CONNECT MQTT-Packet to the broker.\nclientID, etc. are encoded as simple UTF-8 strings."),(0,a.kt)("p",null,"Note, that the packets are not secured by the broker. It's the responsibility of the clients to engage in security measurements."),(0,a.kt)("h4",{id:"clientid"},"clientId:"),(0,a.kt)("p",null,"The clientId identifies each MQTT client that is connecting to an MQTT broker."),(0,a.kt)("p",null,"If permitted, a clientId can be blank. Still, each client must have a unique clientId.\nThe clientId can come from the client, but it does not always have to. If a client connects to the broker and another client session already exists with the clientId that the new client has chosen, the old session will be kicked out and taken over.\nThe permission to be able to do so must be set in the configurations previously. In this case, a clientId will be generated automatically by the broker."),(0,a.kt)("p",null,"For clients that are not persistent, there is no need to generate their clientId because they will not be using it unless it is used for authentication. In that case, the client sends a blank clientId to the broker, and the broker generates a unique id for it whilst the session is open. Automatically generated clientIds should not be used in combination with persistent sessions!"),(0,a.kt)("p",null,"Whenever clientIds are used by different applications or users multiple times, each connection will have different conduct. Ensure that you request a new session whenever you connect with deviant operation matters."),(0,a.kt)("h4",{id:"cleansession"},"cleanSession:"),(0,a.kt)("p",null,"If cleanSession=true, the client does not want to store messages."),(0,a.kt)("p",null,"Also, previous persistent sessions are dismissed."),(0,a.kt)("h4",{id:"usernamepassword"},"username/password:"),(0,a.kt)("p",null,"MQTT can forward and handle username and password within a sent packet."),(0,a.kt)("p",null,"It's important that whenever a packet is not encrypted or hashed (either by implementation or TSL), the password is sent as plain text."),(0,a.kt)("p",null,"You can read about security matters in the Security chapter."),(0,a.kt)("h4",{id:"lastwill"},"lastWill:"),(0,a.kt)("p",null,"The lastWill message is sent by the broker on behalf of the client when a disconnect occurs without a DISCONNECT packet before the actual break off."),(0,a.kt)("p",null,"The lastWill notifies connected clients when this happens."),(0,a.kt)("p",null,"The lastWill can be configured by:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"lastWillTopic: The MQTT topic that clients subscribed to, who will receive the lastWill message."),(0,a.kt)("li",{parentName:"ul"},"lastWillQoS: If the lastWillQoS is set to 1 or 2, the message will be sent with the QoS Level.")),(0,a.kt)("p",null,"lastWill levels:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"QoS1: Every subscriber subscribing to the topic with QoS=1 will get the message at least once.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"QoS2: Every subscriber subscribing to the topic with QoS=2 will get the message exactly once.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"lastWillMessage:\nSimply the payload of the lastWill message.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"lastWillRetain:\nIndicates whether the message will be a retained one or not.\nlastWillRetain = true, the message will be retained. All consumers subscribing to the topic after on will get the retained messages."))),(0,a.kt)("p",null,"The broker distributes the lastWillMessage when one of these events happens:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The broker detects an I/O error or network failure."),(0,a.kt)("li",{parentName:"ul"},"There is no communication between client and broker within the defined keepAlive period."),(0,a.kt)("li",{parentName:"ul"},"The client breaks off without sending a DISCONNECT packet."),(0,a.kt)("li",{parentName:"ul"},"The broker shuts down the network connection when an error occurs.")),(0,a.kt)("h4",{id:"keepalive"},"keepAlive:"),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("strong",{parentName:"p"},"Attention")," The keepAlive feature is not the same as the TCP keepAlive, which is running on the TCP level.(#)."))),(0,a.kt)("p",null,"keepAlive contains two functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Network outage or peer death recognition."),(0,a.kt)("li",{parentName:"ul"},"Hold on to the connection in case no interaction took action for a specific time.")),(0,a.kt)("p",null,"A maximum length of the time interval is defined for each client request to connect with the broker. Within the interval, it's ok that the client and broker do not transmit messages. In fact, after this interval, the client must send a so-called PING Request packet (PINGREQ). "),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"PINGREQ",src:n(17207).Z,width:"600",height:"203"})),(0,a.kt)("p",null,"The broker must respond with a PING Response (PINGRESP)."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"PINGRESP",src:n(98969).Z,width:"600",height:"203"})),(0,a.kt)("p",null,'If the connection is out of sync, a participant is not responding - called a "half-open connection", keepAlive takes action.\nThe keepAlive feature makes sure an open connection between broker and client is still running. Additionally the client and broker are aware of the connection. Even though no messages are sent.'),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"keepAlive",src:n(67852).Z,width:"800",height:"300"})),(0,a.kt)("p",null,"No matter who is not answering or sending the PINGREQ or PINGRESP within the specific time interval plus another half of the very same interval, the broker or client must disconnect."),(0,a.kt)("p",null,"When this happens, the broker sends the lastWill and testament message. If the client has created one."),(0,a.kt)("p",null,"Disabling the keepAlive feature is simply done by setting keepAlive=0."),(0,a.kt)("p",null,"As a client is online again whilst a half-open connection is still kept on by the broker, the broker simply performs a client take-over."),(0,a.kt)("p",null,"Meaning the connection is shut down and establishing a new connection."),(0,a.kt)("p",null,"In terms of data size, the PINGREQ, PINGRESP, and DISCONNECT packets require no variable header, nor a Payload. The packets, therefore, consume only 2 bytes each."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"keepAliveDisconnect",src:n(28245).Z,width:"800",height:"300"})),(0,a.kt)("h2",{id:"pubsub"},"pub/sub"),(0,a.kt)("h3",{id:"publish"},"Publish"),(0,a.kt)("p",null,"The broker simply delivers the message to all subscribers. It's the duty of the broker. There is no obstacle within the broker."),(0,a.kt)("p",null,"Either one publisher publishes messages to multiple Subscribers. "),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"multipleSUBSCRIBERonePUBLISHER",src:n(66470).Z,width:"600",height:"342"})),(0,a.kt)("p",null,"Or multiple publisher publish messages to just one subscriber."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"multiplePUBLISHERoneSUBSCRIBER",src:n(80207).Z,width:"600",height:"273"})),(0,a.kt)("p",null,"Or any combination of multiple publishers/subscribers."),(0,a.kt)("p",null,'Also, consumers can publish as well. This is called "Bidirectional publishing".'),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"bidirectionalPublishing",src:n(17325).Z,width:"600",height:"156"})),(0,a.kt)("p",null,"Any publisher can only be identified when information about the publisher is included in the topic or payload."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"PUBLISH",src:n(59640).Z,width:"600",height:"310"})),(0,a.kt)("h4",{id:"packetid"},"packetId:"),(0,a.kt)("p",null,"Identifies a message."),(0,a.kt)("p",null,"The packetId is set by the client library and broker."),(0,a.kt)("h4",{id:"topicname"},"topicName:"),(0,a.kt)("p",null,"The topic is set using a simple string."),(0,a.kt)("p",null,'Topics are treated hierarchically. To delimiter, a slash "/" symbolizes a separation. Allowing the client organizational structure, much like a common filesystem.'),(0,a.kt)("p",null,"There is no need for creating a topic. You can subscribe to any topic, even though there might not be messages published.\nOn the other hand, you must know about the topic names to be able to subscribe to them."),(0,a.kt)("p",null,"The topic is essentially a UTF-8 string.\nFiltering the topic of a sent message can be done by the broker by simply comparing the encoded UTF-8 bytes or decoded Unicode characters."),(0,a.kt)("p",null,"Be aware that an extra slash or slashes set by mistake are detected by the broker as a delimiter."),(0,a.kt)("h4",{id:"quality-of-service"},"Quality of Service"),(0,a.kt)("p",null,"QoS:\nThe QoS (Quality of Service) defines a certain level of service that enables the publisher to make sure that the certainty and quantity of a subscriber receiving a sent message equal the importance to receive the message at all, plus whether to receive the message only once."),(0,a.kt)("p",null,"Also, a subscriber can set a QoS, defining the importance to receive every message, and whether to accept one message multiple times or not.\nThere are three levels available:"),(0,a.kt)("h5",{id:"qos0---at-most-once"},"QoS0 - at most once"),(0,a.kt)("p",null,'QoS0 is the minimum QoS level.\nThe broker/client is delivering the message only once, without confirmation.\nThere is no guarantee that the message sent has been sent to the subscriber. The recipient on the other end does not acknowledge the receipt. Neither is the acknowledgment stored.\nThe QoS0 - level is often referred to be the "fire and forget"-level.'),(0,a.kt)("p",null,"Using the minimum level of quality can make sense, as MQTT requires to be lightweight, bandwidth-saving, and super fast delivery. QoS0 does not require as many resources on the broker."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"qos0",src:n(56713).Z,width:"800",height:"600"})),(0,a.kt)("p",null,"A subscriber can also use QoS0."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"qos0+qos0",src:n(48986).Z,width:"1600",height:"600"})),(0,a.kt)("h5",{id:"qos1---at-least-once"},"QoS1 - At least once"),(0,a.kt)("p",null,"Level 1 QoS guarantees the delivery of a message to the receiver at least once."),(0,a.kt)("p",null,'However, "at least once" means that a single message can be transmitted to the receiver more than once. Thus, this QoS level ensures that a message reaches its subscribers but does not care about how many times that might be the case.\nAnd the message is stored until the broker receives an acknowledgment.'),(0,a.kt)("p",null,"On the other hand, you really should think about the disadvantages as QoS1 occupies resources.\nWhether to use QoS1 or QoS0 you might want to make up your mind before setting up the broker."),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("strong",{parentName:"p"},"Digression:")," How the acknowledgment works"),(0,a.kt)("p",{parentName:"div"},"A subscriber must send a so-called PUBACK packet (publish acknowledge) to the broker when the broker demands acknowledgment."),(0,a.kt)("p",{parentName:"div"},"If the subscriber does not send a PUBACK, the broker continues sending PUBLISH packets. If the broker sends the PUBLISH packet again, even the second time, it contains a duplicate flag (DUP)."),(0,a.kt)("p",{parentName:"div"},"The packetId enables the broker to match the PUBLISH packet and PUBACK packet. And the packetId is free and reusable again."))),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"PUBACK",src:n(50486).Z,width:"600",height:"219"})),(0,a.kt)("p",null,"The publishing client must store all QoS1 messages sent to the broker without confirmation from the broker."),(0,a.kt)("p",null,"The broker must store:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The information that the session still exists."),(0,a.kt)("li",{parentName:"ul"},"All subscriptions a client subscribed to."),(0,a.kt)("li",{parentName:"ul"},"The QoS1 messages waiting to be sent to the client."),(0,a.kt)("li",{parentName:"ul"},"The QoS1 message, will message and will delay the interval that the client received, but without confirmation.")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"qos1",src:n(53634).Z,width:"800",height:"600"})),(0,a.kt)("p",null,"A subscriber can also use QoS1."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"qos0+qos1",src:n(33292).Z,width:"1600",height:"600"})),(0,a.kt)("h5",{id:"qos2---exactly-once"},"QoS2 - Exactly once"),(0,a.kt)("p",null,"QoS level 2 guarantees each message is received exactly once."),(0,a.kt)("p",null,"To do as pleased the broker transmits the PUBLISH packet as usual.  But the recipient must respond with a PUBREC Publish Release)."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"PUBREC",src:n(59137).Z,width:"600",height:"219"})),(0,a.kt)("p",null,"After that happens, the broker sends another request (PUBREL), and the recipient must respond again."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"PUBREL",src:n(75942).Z,width:"600",height:"219"})),(0,a.kt)("p",null,"The publishing client must store all QoS2 messages sent to the broker without confirmation from the broker."),(0,a.kt)("p",null,"The broker must store:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The information that the session still exists."),(0,a.kt)("li",{parentName:"ul"},"All subscriptions a client subscribed to."),(0,a.kt)("li",{parentName:"ul"},"The QoS2 messages waiting to be sent to the client."),(0,a.kt)("li",{parentName:"ul"},"The QoS2 message, will message and will delay the interval that the client received, but without confirmation.")),(0,a.kt)("p",null,"To discard all stored states and answers  a so-called PUBCOMP packet (Publish complete) is sent. That's the end of the QoS2 order of events."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"PUBCOMP",src:n(37005).Z,width:"600",height:"219"})),(0,a.kt)("p",null,"Until a PUBCOMP is sent, the broker stores a reference of the original PUBLISH packets packetId."),(0,a.kt)("p",null,"The packet and packetId become reusable again."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"qos2",src:n(61517).Z,width:"800",height:"600"})),(0,a.kt)("p",null,"A subscriber can also use QoS2."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"qos0+qos2",src:n(9209).Z,width:"1600",height:"600"})),(0,a.kt)("p",null,"To define which level of Quality of Service you should use, this may help you:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"QoS0:")),(0,a.kt)("p",null,"The connection between sender and receiver is stable. In addition, it's no problem to miss out on several sent messages if there might be problems with the connection stability.\nAlso, message queueing is not needed."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"QoS1:")),(0,a.kt)("p",null,"The receiver must receive every message sent. Also, your setup can handle the duplicate message."),(0,a.kt)("p",null,"Still, QoS2 is too much overhead for your connection (also QoS1 delivers messages faster than QoS2)."),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("strong",{parentName:"p"},"Attention")," QoS1 needs way more resources than QoS0.(#)."))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"QoS2:")),(0,a.kt)("p",null,"Your system must be fed with every message exactly once.  Duplicate messages are not wanted or might even manipulate the system."),(0,a.kt)("p",null,"Also, the loss of a message is crucial. Often QoS2 is set whenever the loss of messages may result in loss of life, e.g. clinical surgery, or property, e.g. stock trading."),(0,a.kt)("p",null,"Some industries such as a bank, firefight, aviation, etc require high completeness of data and timeliness."),(0,a.kt)("p",null,"QoS2 bears the possibility of overhead."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"PUBLISH",src:n(59640).Z,width:"600",height:"310"})),(0,a.kt)("h4",{id:"retainflag"},"retainFlag:"),(0,a.kt)("p",null,"In many cases, a device can not wait until the next time the publisher provides  information sending a message."),(0,a.kt)("p",null,"A sensor of a car door tells whether the door is open or closed. As the door is used very infrequently, including a retained flag makes sense."),(0,a.kt)("p",null,"Without a retained flag set (retainFlag=false), you must wait for the next time the door is opened or closed to find out about the status."),(0,a.kt)("p",null,"With retained messages (retainFlag=true), you immediately find out, because the retained message gives you the last status."),(0,a.kt)("p",null,"A retained message safes the last known value of the topic.\nIt's only possible to save up to one retained message, equal to one retained value."),(0,a.kt)("p",null,"The retainFlag identifies a message to be a retained message. To identify the message the packetId is used."),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("strong",{parentName:"p"},"Digression:")," Wildcards + retained messages"),(0,a.kt)("p",{parentName:"div"},"May the subscribing client include wildcards in the topic pattern they subscribe to, the client receives a retained message even if the topic of the retained message is not an exact match."))),(0,a.kt)("h4",{id:"payload"},"Payload:"),(0,a.kt)("p",null,"The actual content of a message is the content of a payload. Whether it's a .mp3-file or .mp4-file, a picture, or a video. Up to 256MB. The payload does not encrypt the content. The broker simply delivers what the publisher inserted into the payload."),(0,a.kt)("p",null,"Matter of fact the receiving clients don't even know about the data format they receive. Still, there's little chance that a client subscribes to a host and topic it doesn't know about in the first place. Following the client can forecast the receiving data format."),(0,a.kt)("p",null,"The subscriber can not reject a message."),(0,a.kt)("p",null,"But as it can do with it as pleased, that could be nothing as well. Meaning a subscriber could receive a message, but simply don't do anything with it."),(0,a.kt)("h4",{id:"dupflag"},"dupFlag"),(0,a.kt)("p",null,"A dupFlag indicates the duplicate of a message."),(0,a.kt)("p",null,"A message with dupFlag was resent."),(0,a.kt)("p",null,"Following a recipient didn't acknowledge the original message."),(0,a.kt)("h3",{id:"subscribe"},"Subscribe"),(0,a.kt)("p",null,"To receive messages on topics of interest, the client sends a SUBSCRIBE packet to the broker."),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("strong",{parentName:"p"},"Attention")," To subscribe to a topic, the subscriber must also set a QoS level of the topic subscription.\n(#)."))),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"clientSubscribing",src:n(69296).Z,width:"800",height:"300"})),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"SUBSCRIBE",src:n(92687).Z,width:"600",height:"373"})),(0,a.kt)("h4",{id:"packetid-1"},"packetId:"),(0,a.kt)("p",null,"Unique packet identifier."),(0,a.kt)("h4",{id:"subscriptions"},"subscriptions:"),(0,a.kt)("p",null,"The limitation on subscriptions a subscriber can subscribe to within one SUBSCRIBE packet is huge."),(0,a.kt)("p",null,"A SUBSCRIBE packet does not have to have only one subscription. Multiple can be added."),(0,a.kt)("p",null,"Each subscription consists of a topic and a QoS level.\nWhen subscriptions overlap, the broker delivers the message that has the highest QoS level for the specific topic."),(0,a.kt)("p",null,"The brokers must make sure the subscribing client receives the messages that are permitted to be received by him in terms of security. But also concerning the QoS level that was set by the publishing client."),(0,a.kt)("p",null,'Subscribing to several topics simultaneously is an option that\'s possible. A so-called "wildcard" enables this feature.'),(0,a.kt)("p",null,"There are two kinds of wildcards:"),(0,a.kt)("h4",{id:"single-level"},"Single level"),(0,a.kt)("p",null,"Single-level wildcards enable to set of a multi-option part of the topic.\nFor example:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"singleLevelWildcard",src:n(55399).Z,width:"600",height:"273"})),(0,a.kt)("h4",{id:"multi-level"},"Multi level"),(0,a.kt)("p",null,'A "#" is used, the client subscribes to each topic that\'s after the #.\nThere is no regulation for the length or hierarchical depth of the string.\nThe # must be placed as the last character in the topic and preceded by a forward slash. e.g.: "car/heating/#"'),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"multiLevelWildcard",src:n(77671).Z,width:"600",height:"416"})),(0,a.kt)("p",null,"The wildcard characters (",(0,a.kt)("inlineCode",{parentName:"p"},"+")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"#"),") can be used in topic filters. But they can not be used in or as topic names.\nTherefore wildcards are only intended for subscribing to messages and not for publishing messages."),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("strong",{parentName:"p"},"Attention")," Topic level separators (",(0,a.kt)("inlineCode",{parentName:"p"},"/"),") can be used in both cases! (#)."))),(0,a.kt)("p",null,"Wildcards + retained messages:"),(0,a.kt)("p",null,"May the subscribing client include wildcards in the topic pattern they subscribe to, the client receives a retained message even if the topic of the retained message is not an exact match."),(0,a.kt)("p",null,"Topics starting with $ are not hit by a wildcard according to the standard."),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("strong",{parentName:"p"},"Attention")," The broker checks the permission of the subscribing client and forwards the messages the subscriber is allowed to receive. Reversed this can mean that a subscribing client does not get the messages the client is not permitted to receive, even though the subscribing client may have subscribed to the topic using a wildcard. (#)."))),(0,a.kt)("p",null,"The broker must acknowledge each SUBSCRIBE packet. Therefore the broker sends a SUBACK packet (subscribe acknowledge) to the client."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"SUBACK",src:n(86236).Z,width:"600",height:"286"})),(0,a.kt)("p",null,"The broker sends one return code for each topic/QoS-pair that it receives in the SUBSCRIBE packet."),(0,a.kt)("p",null,"The return codes can be:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"0 - Success-Maximum QoS0"),(0,a.kt)("li",{parentName:"ul"},"1 - Success-Maximum QoS1"),(0,a.kt)("li",{parentName:"ul"},"2 - Success-Maximum QoS2"),(0,a.kt)("li",{parentName:"ul"},"128 - Failure")),(0,a.kt)("p",null,"The Success-Maximum QoS0-2 shows the level of Quality of Service (QoS) that is set and can be supported."),(0,a.kt)("p",null,"Published messages, but no one subscribing, are discarded by the broker."),(0,a.kt)("p",null,"The broker filters the incoming messages. In the next step, the filtered message gets forwarded to the subscriber.\nThat\u2019s how the subscriber only receives messages of interest."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"brokerHandlingSubscriptions",src:n(54209).Z,width:"800",height:"300"})),(0,a.kt)("p",null,'As there is no direct link between publisher and client, the publisher can never make sure that somebody is actually "listening" to the messages sent.'),(0,a.kt)("p",null,"In MQTT v5, if a client publishes with QoS 1 or 2 and there is no subscriber, then the broker can tell the publisher this in the PUBACK/PUBREC reply."),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("strong",{parentName:"p"},"Attention")," "),(0,a.kt)("p",{parentName:"div"},"MQTT v.3.1.1:"),(0,a.kt)("p",{parentName:"div"},"Whenever you disconnect unintendedly and haven't set a cleanSession flag (cleanSession=false) all topic subscriptions are lost. You must resubscribe to every single one again."),(0,a.kt)("p",{parentName:"div"},"In case you have set CleanFlag=false and reconnected with the same clientId, the broker remembers the topics you have subscribed to."),(0,a.kt)("p",{parentName:"div"},"MQTT v.5.0:"),(0,a.kt)("p",{parentName:"div"},"The session duration is set by the session expiry interval. (#)."))),(0,a.kt)("h3",{id:"unsubscribe"},"Unsubscribe"),(0,a.kt)("p",null,"A client can always UNSUBSCRIBE from a topic."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"UNSUBSCRIBE",src:n(6130).Z,width:"600",height:"286"})),(0,a.kt)("h4",{id:"packetid-2"},"packetId:"),(0,a.kt)("p",null,"Uniquely identifies a message."),(0,a.kt)("h4",{id:"list-of-topics"},"List of topics:"),(0,a.kt)("p",null,"The UNSUBSCRIBE packet contains also the topics you want to unsubscribe from."),(0,a.kt)("p",null,"After the packet is sent, the broker unsubscribes the client from the topics."),(0,a.kt)("h3",{id:"-symbol"},"$-Symbol"),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("strong",{parentName:"p"},"Attention")," "),(0,a.kt)("p",{parentName:"div"},'$ topics are just "reserved" and shouldn\'t be used by applications.'))))}u.isMDXComponent=!0},26932:function(e,t,n){t.Z=n.p+"assets/images/CONNACK-01d74fa06e61abb23ab6c3136b9ee4f9.png"},21307:function(e,t,n){t.Z=n.p+"assets/images/CONNECT-5a980387b5072c46485bb7e5846a778e.png"},9436:function(e,t,n){t.Z=n.p+"assets/images/NATcommunication-05872ce262ad5b558a2b11082152d38e.png"},17207:function(e,t,n){t.Z=n.p+"assets/images/PINGREQ-3f59bf01166e56a43e22c0a329a2ac23.png"},98969:function(e,t,n){t.Z=n.p+"assets/images/PINGRESP-015856310847e3d4f1d6765f307f3b43.png"},50486:function(e,t,n){t.Z=n.p+"assets/images/PUBACK-006003278fa5905ddb879b54cbb6f378.png"},37005:function(e,t,n){t.Z=n.p+"assets/images/PUBCOMP-c6e2ea70b25e2fa1ce2a910dccb8be7b.png"},59640:function(e,t,n){t.Z=n.p+"assets/images/PUBLISH-e0d3503e716c9661f59b1704ad9cd154.png"},59137:function(e,t,n){t.Z=n.p+"assets/images/PUBREC-e13f60c51521081b2905ecc1003ef1bb.png"},75942:function(e,t,n){t.Z=n.p+"assets/images/PUBREL-ed79ff6635f8562dda6dc0fbd268f679.png"},86236:function(e,t,n){t.Z=n.p+"assets/images/SUBACK-53a4bd04acbd26f7aaf37a9888f04f95.png"},92687:function(e,t,n){t.Z=n.p+"assets/images/SUBSCRIBE-85c834fcaaa6eed0eb6bd0b86a9a96fa.png"},6130:function(e,t,n){t.Z=n.p+"assets/images/UNSUBSCRIBE-bafcc7ea712e85f35476223766cd5572.png"},17325:function(e,t,n){t.Z=n.p+"assets/images/bidirectionalPublishing-9296c36cb8f9ad15fef6dc33786a9fc3.png"},16425:function(e,t,n){t.Z=n.p+"assets/images/broker-2d2f0fbb06b215cbf5575a027947893c.gif"},54209:function(e,t,n){t.Z=n.p+"assets/images/brokerHandlingSubscriptions-d3e85c05cd78b0f3fea3a8d0b7d436b7.gif"},69296:function(e,t,n){t.Z=n.p+"assets/images/clientSubscribing-721943327abf5edfb870e0a3fc4d8990.gif"},86111:function(e,t,n){t.Z=n.p+"assets/images/connect-bb85ee2b04c822acf41b326292e3627d.gif"},67852:function(e,t,n){t.Z=n.p+"assets/images/keepAlive-83ae00d87f5d618e7b258615abafe0a2.gif"},28245:function(e,t,n){t.Z=n.p+"assets/images/keepAliveDisconnect-ceb1c0e68515a5f6a9cd089a66cd951e.gif"},34372:function(e,t,n){t.Z=n.p+"assets/images/mqttProtocol-0de532fe9f87d8b526f10ab5b12d66aa.gif"},77671:function(e,t,n){t.Z=n.p+"assets/images/multiLevelWildcard-5891b52d18a7e2c766096b3c84009134.png"},80207:function(e,t,n){t.Z=n.p+"assets/images/multiplePUBLISHERoneSUBSCRIBER-6a540ce467facf4ea953da73b1006384.png"},66470:function(e,t,n){t.Z=n.p+"assets/images/multipleSUBSCRIBERonePUBLISHER-50c5fc2459441cfc85e361c4735d708e.png"},55408:function(e,t,n){t.Z=n.p+"assets/images/negativeAcknowledgement-a8a1cd6e5c90e817d43e9544e882be5b.gif"},44641:function(e,t,n){t.Z=n.p+"assets/images/qos-6dab3896176efe91eb91fce46954d28f.png"},48986:function(e,t,n){t.Z=n.p+"assets/images/qos0+qos0-5b2dedf64b98072d8699f8d2c4a728f1.gif"},33292:function(e,t,n){t.Z=n.p+"assets/images/qos0+qos1-b084c2b4f728bc96d390aac812f363d5.gif"},9209:function(e,t,n){t.Z=n.p+"assets/images/qos0+qos2-e178dbbb7adc1b1e0ba62b91cd50a399.gif"},56713:function(e,t,n){t.Z=n.p+"assets/images/qos0-1aeda19576b130b04c2d29840088f0e1.gif"},53634:function(e,t,n){t.Z=n.p+"assets/images/qos1-5409a4757808e7b863ff37067e5255c0.gif"},61517:function(e,t,n){t.Z=n.p+"assets/images/qos2-ef4acf13bfe9c2b521acab64da7eaae4.gif"},55399:function(e,t,n){t.Z=n.p+"assets/images/singleLevelWildcard-91bc807966ddb3472020cd99e51ee06c.png"},38976:function(e,t,n){t.Z=n.p+"assets/images/tcpTLS-f8320f23f976f36ea37518b77cb4fd8b.gif"}}]);