"use strict";(self.webpackChunkstreamsheets=self.webpackChunkstreamsheets||[]).push([[13374],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>p});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(n),p=r,h=m["".concat(s,".").concat(p)]||m[p]||u[p]||a;return n?o.createElement(h,i(i({ref:t},c),{},{components:n})):o.createElement(h,i({ref:t},c))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},55621:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>p,default:()=>b,frontMatter:()=>m,metadata:()=>h,toc:()=>k});var o=n(3905),r=Object.defineProperty,a=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,c=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))s.call(t,n)&&c(e,n,t[n]);if(l)for(var n of l(t))d.call(t,n)&&c(e,n,t[n]);return e};const m={id:"mosquitto-high-availability",title:"Mosquitto High Availability Cluster",sidebar_label:"High Availability"},p=void 0,h={unversionedId:"mosquitto-high-availability",id:"version-2.5/mosquitto-high-availability",title:"Mosquitto High Availability Cluster",description:"Premium feature",source:"@site/mosquitto_versioned_docs/version-2.5/cluster.md",sourceDirName:".",slug:"/mosquitto-high-availability",permalink:"/mosquitto/2.5/mosquitto-high-availability",draft:!1,tags:[],version:"2.5",frontMatter:{id:"mosquitto-high-availability",title:"Mosquitto High Availability Cluster",sidebar_label:"High Availability"},sidebar:"someSidebar",previous:{title:"Subscribing",permalink:"/mosquitto/2.5/subscribing"},next:{title:"Security",permalink:"/mosquitto/2.5/security"}},g={},k=[{value:"Introduction",id:"introduction",level:2},{value:"Cluster architecture",id:"cluster-architecture",level:2},{value:"Docker image installation",id:"docker-image-installation",level:2},{value:"Broker Configuration",id:"broker-configuration",level:2},{value:"Load balancer configuration",id:"load-balancer-configuration",level:2},{value:"Cluster configuration",id:"cluster-configuration",level:2},{value:"Creating the Cluster",id:"creating-the-cluster",level:2},{value:"Configuring the first node",id:"configuring-the-first-node",level:3},{value:"Joining the nodes to the cluster",id:"joining-the-nodes-to-the-cluster",level:3},{value:"Adding further nodes",id:"adding-further-nodes",level:2},{value:"Informing the cluster",id:"informing-the-cluster",level:3},{value:"Joining the node to the cluster",id:"joining-the-node-to-the-cluster",level:3},{value:"Removing nodes from Cluster",id:"removing-nodes-from-cluster",level:2},{value:"Inform Cluster Leader",id:"inform-cluster-leader",level:2},{value:"Leave Cluster",id:"leave-cluster",level:3},{value:"Deleting the cluster",id:"deleting-the-cluster",level:2},{value:"Getting cluster information",id:"getting-cluster-information",level:2},{value:"Getting node information",id:"getting-node-information",level:2},{value:"Cluster System Requirements",id:"cluster-system-requirements",level:2},{value:"Server hardware",id:"server-hardware",level:3},{value:"Network",id:"network",level:3}],f={toc:k};function b(e){var t,r=e,{components:c}=r,m=((e,t)=>{var n={};for(var o in e)s.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&l)for(var o of l(e))t.indexOf(o)<0&&d.call(e,o)&&(n[o]=e[o]);return n})(r,["components"]);return(0,o.kt)("wrapper",(t=u(u({},f),m),a(t,i({components:c,mdxType:"MDXLayout"}))),(0,o.kt)("admonition",u({},{type:"note"}),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Premium feature"))),(0,o.kt)("h1",u({},{id:"cedalo-high-availability-cluster-setup-for-eclipse-mosquitto"}),"Cedalo High Availability Cluster Setup for Eclipse Mosquitto"),(0,o.kt)("h2",u({},{id:"introduction"}),"Introduction"),(0,o.kt)("p",null,"The Cedalo high availability feature provides the ability to run a cluster of Mosquitto nodes with a single leader and multiple followers, so that broker availability can be ensured even if a single node becomes unavailable through fault or for an upgrade.\nThis document describes the recommended cluster architecture and how to configure the cluster for first use, and in the future."),(0,o.kt)("h2",u({},{id:"cluster-architecture"}),"Cluster architecture"),(0,o.kt)("p",null,"The Mosquitto cluster comprises at least three nodes. A single node is available for use by MQTT clients at once, the other nodes operate as failover nodes. The cluster expects a minimum of two nodes to be available at once, to provide a leader and a fallback node. If the state of the cluster fails so that only a single node is available, clients will be unable to connect until the cluster is in a stable state again."),(0,o.kt)("p",null,"Figure 1 shows a suggested cluster architecture. There are three broker nodes operating Mosquitto, and a fourth node providing a Management Center for Mosquitto instance (MMC)."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"hamap",src:n(18299).Z,width:"600",height:"431"})," "),(0,o.kt)("p",null,"The nodes operate with public and private network communication. The private communication includes node-to-node synchronization data, which is not encrypted and must be kept private. In this example, all private communication happens on a separate private network in the 192.168.1.* address space. If private IP addresses are not available or appropriate, then the private connection can be made using a VPN. Do not use a publicly accessible network for the cluster communication, or your credentials and data will be exposed to the internet even if your main MQTT communication is encrypted."),(0,o.kt)("p",null,"The load balancers listen on port 8883 in this example. They carry out TLS termination and forward connections to the leader broker node on port 1884. Each broker node has port 1885 open to allow connections even when the node is not the leader. This port should only be used for cluster configuration and inspection. Any other use is not covered by HA."),(0,o.kt)("p",null,"It is strongly recommended that all public communication is encrypted. If required, using port 1883 for unencrypted connections can be done by exposing the port on the load balancer and forwarding it to the broker port 1884."),(0,o.kt)("p",null,"In this example there are three separate load balancers, and three separate broker nodes, with the broker nodes having no public networking. The purpose of the load balancer is threefold: to provide TLS/SSL termination, to route client connections to the currently available broker, and to provide separation between the public and private networks."),(0,o.kt)("p",null,"Other arrangements are possible, for example combining the load balancer and broker on nodes may be desirable in simple clusters where keeping node count low is required."),(0,o.kt)("h2",u({},{id:"docker-image-installation"}),"Docker image installation"),(0,o.kt)("p",null,"The Docker image is at ",(0,o.kt)("em",{parentName:"p"},"registry.cedalo.com/mosquitto/mosquitto:2.1"),". Cedalo Registry Credentials are needed to access this image."),(0,o.kt)("p",null,"Example docker-compose file showing the configuration described in the diagram."),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{}),"version: '3.7'\n \nservices:\n   mosquitto:\n       image: registry.cedalo.com/mosquitto/mosquitto:2.1\n       ports:\n           - <private-network-ip>:1884:1884\n           - <private-network-ip>:1885:1885\n           - <private-network-ip>:7000:7000\n       volumes:\n           - ./mosquitto/config:/mosquitto/config\n           - ./mosquitto/data:/mosquitto/data\n       networks:\n           - mosquitto\n       environment:\n           CEDALO_LICENSE_FILE: /mosquitto/data/license.lic\n           CEDALO_HA_DATA_DIR: /mosquitto/data/ha\n           MOSQUITTO_DYNSEC_PASSWORD: <admin password to use when generating config>\n       restart: unless-stopped\nnetworks:\n   mosquitto:\n       name: mosquitto\n       driver: bridge\n")),(0,o.kt)("p",null,"The suggested directory layout for the volume to be mounted on the Mosquitto Docker container is:"),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{}),"/mosquitto/docker-compose.yml\n/mosquitto/mosquitto/config/mosquitto.conf\n/mosquitto/mosquitto/data/license.lic\n/mosquitto/mosquitto/data/ha/\n")),(0,o.kt)("h2",u({},{id:"broker-configuration"}),"Broker Configuration"),(0,o.kt)("p",null,"The suggested broker configuration file for each node is given below:"),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{})," \nglobal_plugin /usr/lib/cedalo_mosquitto_ha.so\nenable_control_api true \nallow_anonymous false\n \n# The listener for receiving incoming MQTT connections from the load balancer.\n# This listener will be automatically closed when this node is not the cluster\n# leader.\n \nlistener 1884\n \n# Optional websockets listener, if used this must be exposed in the \n# docker-compose configuration\n#listener 8080\n#protocol websockets\n \n# The listener for receiving the MMC connection / API control of a follower node.\n# This listener will remain open regardless of the role of the node in the\n# cluster. It should not be used by general purpose MQTT clients and is not\n# HA supported.\nlistener 1885\nadmin_listener true\n \n# Some sensible options - tweak as per your requirements\n# Set max_keepalive to be reasonably higher than your expected max value\nmax_keepalive 1800\n# max_packet_size can protect devices against unreasonably large payloads\nmax_packet_size 100000000\n# Reduce network latency\nset_tcp_nodelay true\n")),(0,o.kt)("p",null,"In addition, environment variables must be set to configure the license file and HA data path, as demonstrated in the docker-compose example above:"),(0,o.kt)("p",null,"The MOSQUITTO_DYNSEC_PASSWORD variable is not required, but allows the initial authentication/authorisation configuration to be generated with an admin user using this password, which is convenient when generating configurations for multiple nodes. If this is not set, then each node will generate its own admin password on startup and save a plain text copy at /mosquitto/data/dynamic-security.json.pw\nThe cluster configuration is controlled through the HA MQTT topic API described below."),(0,o.kt)("h2",u({},{id:"load-balancer-configuration"}),"Load balancer configuration"),(0,o.kt)("p",null,"The load balancer should be configured to listen on the public address for the node, to terminate TLS/SSL connections, and to forward the client connections to the private addresses of the cluster nodes. In this example the broker port is 1884."),(0,o.kt)("p",null,"If the load balancer has an idle timeout value that disconnects clients if no network traffic is observed for a given period, this should be configured to be greater than the MQTT keepalive value you intend to use with your clients, otherwise there will be frequent disconnections for your idle clients. Many MQTT clients use a default of 60 seconds keepalive.\nAn example for HAProxy is given below"),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{}),"global\n   user haproxy\n   group haproxy\n   daemon\n   nbproc 4\n   nbthread 1\n   maxconn 4096\n \n   # Default SSL material locations\n   ca-base /etc/ssl/certs\n   crt-base /etc/ssl/private\n   # Default ciphers to use on SSL-enabled listening sockets.\n   # For more information, see ciphers(1SSL). This list is from:\n   #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/\n   # An alternative list with additional directives can be obtained from\n   #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy\n   ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS\n   ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets\n   ssl-dh-param-file /etc/haproxy/dhparams.pem\n \ndefaults\n   log global\n   mode    tcp\n   option  dontlognull\n   timeout connect 5000\n   timeout client 2m\n   timeout server 2m\n \nfrontend mosquitto_frontend\n   bind *:8883 ssl crt /etc/haproxy/server.comb.pem\n   mode tcp\n   option tcplog\n   default_backend mosquitto_backend\n \nbackend mosquitto_backend\n   mode tcp\n   option tcplog\n   option redispatch\n   server node1 192.168.1.1:1884 check\n   server node2 192.168.1.2:1884 check\n   server node3 192.168.1.3:1884 check\n")),(0,o.kt)("h2",u({},{id:"cluster-configuration"}),"Cluster configuration"),(0,o.kt)("p",null,"The cluster can be configured dynamically using the MQTT topic API provided for this purpose. JSON messages are sent to the topic ",(0,o.kt)("em",{parentName:"p"},"$CONTROL/cedalo/ha/v1")," using the admin user and password configured in MOSQUITTO_DYNSEC_PASSWORD. Responses from the broker are published on the topic ",(0,o.kt)("em",{parentName:"p"},"$CONTROL/cedalo/ha/v1/response")),(0,o.kt)("p",null,"The Management Center for Mosquitto can be used to carry out the configuration, or the topic API can be used directly. The Mosquitto command line client mosquitto_rr can be used as a very basic control method:"),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{}),"mosquitto_rr -h node1 -p 1884 -u admin -P <password> -t \u2018$CONTROL/cedalo/ha/v1\u2019 -e \u2018$CONTROL/cedalo/ha/v1/response\u2019 -m \u2018<command>\u2019\n")),(0,o.kt)("h2",u({},{id:"creating-the-cluster"}),"Creating the Cluster"),(0,o.kt)("h3",u({},{id:"configuring-the-first-node"}),"Configuring the first node"),(0,o.kt)("p",null,"Send the ",(0,o.kt)("em",{parentName:"p"},"createCluster")," command to the first node to initialize the cluster. The nodes array contains a list of at least three nodes to be used for the cluster. The address and port of each node are the private network address of that node and the port to be used for cluster communication. The nodeid is a unique integer for the node within the cluster, in the range 1-1023. The mynode boolean must be set to true on the details of the node where the command is being sent."),(0,o.kt)("p",null,"The command should be sent directly to the node from within the private network, rather than through the load balancer."),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{}),'{\n   "commands":[\n{\n  "command": "createCluster",\n  "clustername": "name",\n  "nodes": [\n    {"address": "192.168.1.1", "port": 7000, "nodeid": 1, "mynode": true},\n    {"address": "192.168.1.2", "port": 7000, "nodeid": 2},\n    {"address": "192.168.1.3", "port": 7000, "nodeid": 3}\n  ]\n}\n   ]\n}\n')),(0,o.kt)("p",null,"With the Cluster creation a leader is automatically elected.\nAll nodes are synced and now work via the leader authentication."),(0,o.kt)("h3",u({},{id:"joining-the-nodes-to-the-cluster"}),"Joining the nodes to the cluster"),(0,o.kt)("p",null,"Once the first cluster node is configured, the nodes in the list must be told to join the cluster. Send the ",(0,o.kt)("em",{parentName:"p"},"joinCluster")," command to each new cluster node. The ",(0,o.kt)("em",{parentName:"p"},"nodes")," list must include details of the cluster as in the ",(0,o.kt)("em",{parentName:"p"},"createCluster")," command, with the new node details having ",(0,o.kt)("em",{parentName:"p"},"mynode")," set to true. All addresses and ports are for the private network and cluster port."),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{}),'{\n  "commands":[\n    {\n      "command": "joinCluster",\n      "clustername": "name",\n      "nodes":[\n    {"address": "192.168.1.1", "port": 7000, "nodeid": 1},\n    {"address": "192.168.1.2", "port": 7000, "nodeid": 2, "mynode": true},\n    {"address": "192.168.1.3", "port": 7000, "nodeid": 3}\n \n      ]\n    }\n  ]\n}\n')),(0,o.kt)("h2",u({},{id:"adding-further-nodes"}),"Adding further nodes"),(0,o.kt)("p",null,"To add further nodes at a later date requires two steps: "),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Informing the existing cluster of the new node"),(0,o.kt)("li",{parentName:"ol"},"Telling the new node to join the cluster.")),(0,o.kt)("h3",u({},{id:"informing-the-cluster"}),"Informing the cluster"),(0,o.kt)("p",null,"Send the addNode command to the existing cluster node. This must be sent to the leader node. Port 1883 will only be available for the leader node, port 1884 will be available on each node, but only the leader will accept cluster commands."),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{}),'{\n   "commands":[\n       {\n           "command":"addNode",\n           "clustername":"name",\n           "address":"192.168.1.4",\n           "port":7000,\n           "nodeid":4\n       }\n   ]\n}\n')),(0,o.kt)("h3",u({},{id:"joining-the-node-to-the-cluster"}),"Joining the node to the cluster"),(0,o.kt)("p",null,"Send the joinCluster command to the new cluster node. The nodes list must include details of the existing cluster nodes, with mynode omitted or set to false, and the new node details with mynode set to true. All addresses and ports are for the private network and cluster port."),(0,o.kt)("admonition",u({},{type:"info"}),(0,o.kt)("p",{parentName:"admonition"},"It is strongly recommended adding nodes one at a time with the ",(0,o.kt)("em",{parentName:"p"},"addNode")," and ",(0,o.kt)("em",{parentName:"p"},"joinCluster")," commands, then verify the cluster is operating correctly before adding further nodes. If multiple nodes are added using ",(0,o.kt)("em",{parentName:"p"},"addNode")," without those nodes joining the cluster, then it is possible that the cluster will be unable to maintain consensus which would adversely affect the HA capability.")),(0,o.kt)("h2",u({},{id:"removing-nodes-from-cluster"}),"Removing nodes from Cluster"),(0,o.kt)("h2",u({},{id:"inform-cluster-leader"}),"Inform Cluster Leader"),(0,o.kt)("p",null,"To remove a node from the cluster, send the ",(0,o.kt)("em",{parentName:"p"},"removeNode")," command to the cluster leader."),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{}),'{\n   "commands":[\n       {\n           "command":"removeNode",\n           "clustername":"name",\n           "address":"192.168.1.2",\n           "port":7000,\n           "nodeid":2\n       }\n   ]\n}\n')),(0,o.kt)("p",null,"All details must match for the node to be removed."),(0,o.kt)("p",null,"The cluster will refuse to remove a node if it will result in the cluster having fewer than three nodes."),(0,o.kt)("h3",u({},{id:"leave-cluster"}),"Leave Cluster"),(0,o.kt)("p",null,"Once the Cluster leader is informed, remove the node from the cluster. The command should be sent to the node that is to leave the cluster, not the cluster leader. The clustername, address, port, and nodeid must match."),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{}),'{\n   "commands":[\n       {\n           "command":"leaveCluster",\n           "clustername":"name",\n           "address":"192.168.1.2",\n           "port":7000,\n           "nodeid":2\n       }\n   ]\n}\n')),(0,o.kt)("h2",u({},{id:"deleting-the-cluster"}),"Deleting the cluster"),(0,o.kt)("p",null,"Send the ",(0,o.kt)("em",{parentName:"p"},"deleteCluster")," command to the cluster leader. All nodes will retain their current settings, but will no longer be part of a cluster."),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{}),'{\n   "commands":[\n       {\n           "command":"deleteCluster",\n           "clustername":"name"\n       }\n   ]\n}\n')),(0,o.kt)("h2",u({},{id:"getting-cluster-information"}),"Getting cluster information"),(0,o.kt)("p",null,"Send the ",(0,o.kt)("em",{parentName:"p"},"getCluster")," command to the cluster leader."),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{}),'{\n   "commands":[\n       {\n           "command":"getCluster"\n       }\n   ]\n}\n')),(0,o.kt)("h2",u({},{id:"getting-node-information"}),"Getting node information"),(0,o.kt)("p",null,"Send the getNode command to any individual node. Nodes are always available for communication on port 1884."),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{className:"language-{"}),'   "commands":[\n       {\n           "command":"getNode"\n       }\n   ]\n}\n')),(0,o.kt)("h2",u({},{id:"cluster-system-requirements"}),"Cluster System Requirements"),(0,o.kt)("p",null,"On each High-Availability node the components need the following system resources:"),(0,o.kt)("h3",u({},{id:"server-hardware"}),"Server hardware"),(0,o.kt)("p",null,"For the Load Balancer we recommend HAProxy. The recommended hardware components for the instance would be:\nRecent 4+ core CPU (AMD or Intel) and 8GB of RAM, if Load Balancers run separately, 8+ cores if load balancers run on same hosts as the Mosquitto nodes. As storage, 5 GB (R/W speed at least 500 MB/s) in a RAID is recommended."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",u({parentName:"tr"},{align:"center"})),(0,o.kt)("th",u({parentName:"tr"},{align:null}),(0,o.kt)("strong",{parentName:"th"},"Mosquitto Node")),(0,o.kt)("th",u({parentName:"tr"},{align:null}),(0,o.kt)("strong",{parentName:"th"},"Load balancer")),(0,o.kt)("th",u({parentName:"tr"},{align:null}),(0,o.kt)("strong",{parentName:"th"},"Mosquitto Node + Loadbalancer")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",u({parentName:"tr"},{align:"center"}),(0,o.kt)("strong",{parentName:"td"},"CPU:")),(0,o.kt)("td",u({parentName:"tr"},{align:null}),"4+ Cores"),(0,o.kt)("td",u({parentName:"tr"},{align:null}),"4+ Cores"),(0,o.kt)("td",u({parentName:"tr"},{align:null}),"8+ Cores")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",u({parentName:"tr"},{align:"center"}),(0,o.kt)("strong",{parentName:"td"},"RAM:")),(0,o.kt)("td",u({parentName:"tr"},{align:null}),"8GB"),(0,o.kt)("td",u({parentName:"tr"},{align:null}),"8GB"),(0,o.kt)("td",u({parentName:"tr"},{align:null}),"8GB")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",u({parentName:"tr"},{align:"center"}),(0,o.kt)("strong",{parentName:"td"},"Storage:")),(0,o.kt)("td",u({parentName:"tr"},{align:null}),"5GB (500Mb/s +)"),(0,o.kt)("td",u({parentName:"tr"},{align:null})),(0,o.kt)("td",u({parentName:"tr"},{align:null}))))),(0,o.kt)("p",null,"In case stream processing is used, then the following recommendations apply for each node.\nWhile the CPU recommendations stay the same, it is proposed to use 24 GB of RAM and 50 GB (R/W speed at least 500 MB/s) of storage."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Stream Plugin usage:")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",u({parentName:"tr"},{align:"center"})),(0,o.kt)("th",u({parentName:"tr"},{align:null}),(0,o.kt)("strong",{parentName:"th"},"Mosquitto Node")),(0,o.kt)("th",u({parentName:"tr"},{align:null}),(0,o.kt)("strong",{parentName:"th"},"Load balancer")),(0,o.kt)("th",u({parentName:"tr"},{align:null}),(0,o.kt)("strong",{parentName:"th"},"Mosquitto Node + Loadbalancer")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",u({parentName:"tr"},{align:"center"}),(0,o.kt)("strong",{parentName:"td"},"CPU:")),(0,o.kt)("td",u({parentName:"tr"},{align:null}),"4+ Cores"),(0,o.kt)("td",u({parentName:"tr"},{align:null}),"4+ Cores"),(0,o.kt)("td",u({parentName:"tr"},{align:null}),"8+ Cores")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",u({parentName:"tr"},{align:"center"}),(0,o.kt)("strong",{parentName:"td"},"RAM:")),(0,o.kt)("td",u({parentName:"tr"},{align:null}),"24GB"),(0,o.kt)("td",u({parentName:"tr"},{align:null}),"24GB"),(0,o.kt)("td",u({parentName:"tr"},{align:null}),"24GB")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",u({parentName:"tr"},{align:"center"}),(0,o.kt)("strong",{parentName:"td"},"Storage:")),(0,o.kt)("td",u({parentName:"tr"},{align:null}),"50GB (500Mb/s +)"),(0,o.kt)("td",u({parentName:"tr"},{align:null}),"50GB (500Mb/s +)"),(0,o.kt)("td",u({parentName:"tr"},{align:null}),"50GB (500Mb/s +)")))),(0,o.kt)("h3",u({},{id:"network"}),"Network"),(0,o.kt)("p",null,"As shown in the cluster architecture, the following network system is required. "),(0,o.kt)("p",null,"All nodes need to have access to a public network with public IPs (where MQTT clients and browser to view MMC information reside).\nA private network with private IPs (for communication between nodes, load balancers, and between nodes and Management Center). If this is not explicitly possible then a VPN can be pulled up to privately connect the components. Private network communication is done via TCP, while the Load Balancer are used for SSL termination. "),(0,o.kt)("p",null,"All nodes are 100% replicas from each other and get synchronized in real-time via the private network. "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Network speed:")," Depending on expected bandwidth, 100 Mbit or 1 Gbit network is recommended. "),(0,o.kt)("p",null,"The Network speeds always need to be aligned with desired message bandwidth from your MQTT clients. The upper limit for bandwidth that the Mosquitto cluster can cope with is governed by a lot of factors, however 30 MB/sec or 240 Mbit is an ultimate upper limit what a Mosquitto node can cover under certain circumstances. Therefore, it is recommended that the network between the nodes is at least a Gbit network."))}b.isMDXComponent=!0},18299:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/hamap-94220e0ab52597e5e9b48e7ac30f292a.png"}}]);