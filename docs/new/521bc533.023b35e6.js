(window.webpackJsonp=window.webpackJsonp||[]).push([[351],{1249:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),s=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},O={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,b=i(e,["components","mdxType","originalType","parentName"]),u=s(n),p=a,m=u["".concat(o,".").concat(p)]||u[p]||O[p]||l;return n?r.a.createElement(m,c(c({ref:t},b),{},{components:n})):r.a.createElement(m,c({ref:t},b))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=p;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var b=2;b<l;b++)o[b]=n[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1460:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/JSON-e6b30192fa1ec871b726a118122382e0.PNG"},418:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return s}));var a=n(3),r=n(7),l=(n(0),n(1249)),o={id:"json",title:"JSON",sidebar_label:"JSON"},c={unversionedId:"functions/streamsheet/json",id:"version-2.2/functions/streamsheet/json",isDocsHomePage:!1,title:"JSON",description:"A Streamsheet has the possibility to process, generate and accumulate",source:"@site/streamsheets_versioned_docs/version-2.2/functions/streamsheet/json.md",slug:"/functions/streamsheet/json",permalink:"/new/streamsheets/2.2/functions/streamsheet/json",version:"2.2",sidebar_label:"JSON",sidebar:"version-2.2/someSidebar",previous:{title:"ISODD",permalink:"/new/streamsheets/2.2/functions/info/isodd"},next:{title:"JSON2EXCELTIME",permalink:"/new/streamsheets/2.2/functions/date/json2exceltime"}},i=[],b={rightToc:i};function s(e){var t=e.components,o=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},b,o,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,'A Streamsheet has the possibility to process, generate and accumulate\ndata. Before sending this data, the cells from a data range have to be\nstructured, in order for an App to interpret them correctly. JSON() is\nparing two columns together to a key and value pair using the JSON\nSyntax. Alternatively it is possible to specify a text which will be\nparsed to JSON or use one of the various INBOX/OUTBOX functions to\nreference an element from a message stored in inbox or outbox\nrespectively. The optional second parameter can be used to convert the\nresulting JSON object to a textual representation. This function is\nmostly used within publish functions like: MQTTPUBLISH. The JSON\nstructure supports quotes "". eg. {"Key":"value"}'),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Syntax")),Object(l.b)("p",null,"=JSON(DataRangeOrTextOrInboxOutboxFunction,ResultAsText)"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"DataRangeOrTextOrInboxOutboxFunction"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"A data range over at least two columns, only interpreting the first and last column into the JSON object. Or a text which will be evaluated to JSON. Or an INBOX/OUTBOX function to reference an element of a message.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"ResultAsText"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Optional. Set to TRUE to return a textual representation of resulting JSON object. Defaults to FALSE.")))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Return Value")),Object(l.b)("p",null,"{ JSON } as a placeholder for JSON object or a textual representation,\nif successful."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Example")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Function"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Result"),Object(l.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Comment"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"=JSON(B6:C8)"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"{ JSON }"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"This is the representation of a cell filled with JSON data.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"=JSON(B6:C8, TRUE)"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),'{"values":{"temperature":16918,"CO2":49}}'),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The textual representation of resulting JSON data.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),'=JSON(C4) with following text in C4: {"values":{"temperature":16918,"CO2":49}}'),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"{ JSON }"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"This is the representation of a cell filled with JSON data.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),'=JSON(OUTBOXDATA("MessageId","Customer"))'),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"{ JSON }"),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),'This is the representation of a cell filled with JSON data. Internally the cell has a JSON object which represents the "Customer" value from specified outbox message.')),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),'=FEEDINBOX(B11,"S1") with B11 JSON(B6:C8)'),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.b)("img",{alt:"JSON",src:n(1460).default})),Object(l.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"In Streamsheet S1 the Inbox will be  filled with the JSON gathered by B11")))))}s.isMDXComponent=!0}}]);