(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{204:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return l}));var r=n(3),o=(n(0),n(375));const a={id:"components-streams",title:"Streams",sidebar_label:"Streams"},c={unversionedId:"streamsheets/maincomponents/components-streams",id:"streamsheets/maincomponents/components-streams",isDocsHomePage:!1,title:"Streams",description:"Streams can be found next to the App Dashboard in another Tab.",source:"@site/docs/streamsheets/maincomponents/streams.md",slug:"/streamsheets/maincomponents/components-streams",permalink:"/latest/docs/streamsheets/maincomponents/components-streams",version:"current",sidebar_label:"Streams",sidebar:"someSidebar",previous:{title:"Dashboard",permalink:"/latest/docs/streamsheets/maincomponents/components-dashboard"},next:{title:"Streamsheet",permalink:"/latest/docs/streamsheets/maincomponents/components-streamsheet"}},s=[{value:"Connector",id:"connector",children:[{value:"MQTT Connector",id:"mqtt-connector",children:[]}]},{value:"Producer",id:"producer",children:[{value:"MQTT Producer",id:"mqtt-producer",children:[]}]},{value:"Consumer",id:"consumer",children:[{value:"MQTT Consumer",id:"mqtt-consumer",children:[]}]}],i={rightToc:s};function l({components:e,...t}){return Object(o.b)("wrapper",Object(r.a)({},i,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Streams can be found next to the App Dashboard in another Tab."),Object(o.b)("p",null,Object(o.b)("img",{alt:"Administration",src:n(448).default})),Object(o.b)("p",null,"The Stream-resources Consumers, Producers and Connectors serve the\npurpose of defining data streams. There is a hierarchy to these\nresources in which Connectors form the foundation for Consumers and\nProducers. Hence, the definition of a data stream consists either of a\nConnector-Consumer pair or a Connector-Producer pair. Each Consumer and\neach Producer runs on exactly one connector. Connectors, on the other\nhand, can have many consumers and producers."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"As the name suggests, Connectors take information on overall\nconnection parameters, such as addresses and authentication details.\nEspecially if several message streams are on a broker, server or\nother \u201cdata space\u201d, Connectors contain information which can be\nshared by Consumers and Producers. Consequently, shared information\nhas to be defined only once in one place."),Object(o.b)("li",{parentName:"ul"},"Consumers are used to define the input message stream of\nStreamsheets. They are added to the Inbox of a Streamsheet"),Object(o.b)("li",{parentName:"ul"},"Producers are used to define outgoing message streams. They are\nreferenced in stream functions like MQTT.PUBLISH().")),Object(o.b)("p",null,"In the following we will use MQTT as an example stream:"),Object(o.b)("h2",{id:"connector"},"Connector"),Object(o.b)("p",null,'A Connector is always the foundation of our communication architecture.\nConsumer and Producer reference to a Connector and define the details.\nThe connector itself "connects" the Streamsheet to a provider, you can\nchoose from a preconfigured list. Once a provider is choosen, there are\na variety of settings, which can be applied to define the details of\nyour data stream.'),Object(o.b)("h3",{id:"mqtt-connector"},"MQTT Connector"),Object(o.b)("p",null,"The MQTT Connector has the following possible settings."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Name:")," The Name of your Connector"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Provider:")," you can\xb4t change the provider. You choose it while\ncreating the connector."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"URL:")," Choose the MQTT Broke you want to use. If you want to use\nour own broker, which is hosted by the Stream Sheet Server, type in\nbroker"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Port:")," Choose the port you will be using to transfer the data."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"User Name & Password:")," If your URL needs identification, you can\ntype in your credentials. For local usage not neccessary."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Base Topic:")," The Base topic describes where the connector will be\nconnected to."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Retain Message:")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"QoS:")," Stands for quality of service. You have the choice between:\nAt most once, At least once, Exactly once."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Protocol Versio:")," MQTT Broker can run on different protocols.")),Object(o.b)("h2",{id:"producer"},"Producer"),Object(o.b)("p",null,"A Producer is used in a Function. It directs the data stream out of the\nStream Sheet. The Function together with the Producer defines where your\ndata will be heading. A Producer is always connected to a Connector,\nwhich serves as the foundation of a Producer. Once the Connector is\nchoosen, there are some additional settings within the Producer."),Object(o.b)("h3",{id:"mqtt-producer"},"MQTT Producer"),Object(o.b)("p",null,"The MQTT Producer has the following possible settings:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Name:")," The Name of your Producer."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Connector:")," Choose the connected Connector."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Data Format:")," Choose the Data Format a Producer will publish the\nMessages in."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Topic:")," Extend the Base Topic of the Connector. The Message will\nbe sent to the full topic branch defined through Connector, Producer\nand Function (ConnectorTopic/ProducerTopic/FunctionTopic)."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Clean:")," turn on clean session"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Static Client ID:")," set a static client ID if needed")),Object(o.b)("h2",{id:"consumer"},"Consumer"),Object(o.b)("p",null,"A Consumer is always connected to the Inbox of a Stream Sheet. It\ndefines the details of the data stream comming into a Stream Sheet. A\nConsumer is always connected to a Connector. Once the Connector is\nchoosen, there are some additional settings within the Consumer."),Object(o.b)("h3",{id:"mqtt-consumer"},"MQTT Consumer"),Object(o.b)("p",null,"The MQTT Consumer has the following Settings:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Name:")," The Name of your Consumer."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Data Format:")," Choose the Data Format you wish to accept in the\nInbox."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Static Client ID:")," set a static client ID if needed"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Topics:")," Choose one or more topics the Consumer will listen to.\nThe topics always extend the Connector Base Topic."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Clean:")," turn on clean session")))}l.isMDXComponent=!0},375:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return p}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),u=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=u(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,p=m["".concat(c,".").concat(d)]||m[d]||b[d]||a;return n?o.a.createElement(p,s(s({ref:t},l),{},{components:n})):o.a.createElement(p,s({ref:t},l))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,c=new Array(a);c[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var l=2;l<a;l++)c[l]=n[l];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},448:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/AdministrationC-a04258a21e03b54b53423a3555c9a824.PNG"}}]);